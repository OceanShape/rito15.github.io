

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://rito15.github.io/</id>
  <title>Rito15</title>
  <subtitle>Unity Csharp Developer</subtitle>
  <updated>2021-05-18T03:40:47+09:00</updated>
  <author>
    <name>Rito15</name>
    <uri>https://rito15.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://rito15.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://rito15.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator>
  <rights> © 2021 Rito15 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>GUI 스타일 지정하기</title>
    <link href="https://rito15.github.io/posts/unity-editor-gui-style/" rel="alternate" type="text/html" title="GUI 스타일 지정하기" />
    <published>2021-05-18T02:02:00+09:00</published>
  
    <updated>2021-05-18T02:02:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-editor-gui-style/</id>
    <content src="https://rito15.github.io/posts/unity-editor-gui-style/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Editor" />
    
  

  
    <summary>
      





      인라인 방식으로 스타일 설정하기



  GUI.___ 프로퍼티 값들을 수정하고 돌려놓기


// OnInspectorGUI

var oldBgColor = GUI.backgroundColor;

// GUIs

GUI.backgroundColor = oldBgColor;




GUIStyle 객체 이용하기



  
    GUIStyle 객체를 만들 때 매개변수로 GUI.skin을 알맞게 지정해야 한다.
  
  
    GUI.skin은 OnGUI 종류의 메소드에서만 호출할 수 있으므로
가비지를 감수하고 OnInspectorGUI() 내에서 항상 초기화한다.
  





  스트링 리터럴로 지정할 수도 있다.
  https://gist.github.com/MadLittleMods/ea3e707...
    </summary>
  

  </entry>

  
  <entry>
    <title>컴포넌트를 인스펙터 최상단에 올리기</title>
    <link href="https://rito15.github.io/posts/unity-put-component-on-top/" rel="alternate" type="text/html" title="컴포넌트를 인스펙터 최상단에 올리기" />
    <published>2021-05-17T21:12:00+09:00</published>
  
    <updated>2021-05-17T21:12:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-put-component-on-top/</id>
    <content src="https://rito15.github.io/posts/unity-put-component-on-top/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Memo" />
    
  

  
    <summary>
      





      Memo


/// &amp;lt;summary&amp;gt; 컴포넌트를 최상단에 올리기 &amp;lt;/summary&amp;gt;
[System.Diagnostics.Conditional("UNITY_EDITOR")]
private static void PutComponentOnTop(Component component)
{
    for (int i = 0; i &amp;lt; 100 &amp;amp;&amp;amp; UnityEditorInternal.ComponentUtility.MoveComponentUp(component); i++);
}


    </summary>
  

  </entry>

  
  <entry>
    <title>Obj Exporter(메시를 OBJ 파일로 저장하기)</title>
    <link href="https://rito15.github.io/posts/unity-obj-exporter/" rel="alternate" type="text/html" title="Obj Exporter(메시를 OBJ 파일로 저장하기)" />
    <published>2021-05-17T05:17:00+09:00</published>
  
    <updated>2021-05-17T05:17:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-obj-exporter/</id>
    <content src="https://rito15.github.io/posts/unity-obj-exporter/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Memo" />
    
  

  
    <summary>
      





      Source Code



   
ObjExporter.cs


  #if UNITY_EDITOR

using System;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using System.IO;

namespace Rito
{
    // http://wiki.unity3d.com/index.php?title=ObjExporter
    public static class ObjExporter
    {
        public static string MeshToString(Mesh mesh, MeshRenderer mr, string name)
        {
...
    </summary>
  

  </entry>

  
  <entry>
    <title>Graphic Raycaster - 마우스 이벤트 예제</title>
    <link href="https://rito15.github.io/posts/unity-graphic-raycaster-mouse-event-examples/" rel="alternate" type="text/html" title="Graphic Raycaster - 마우스 이벤트 예제" />
    <published>2021-05-16T03:21:00+09:00</published>
  
    <updated>2021-05-16T03:21:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-graphic-raycaster-mouse-event-examples/</id>
    <content src="https://rito15.github.io/posts/unity-graphic-raycaster-mouse-event-examples/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Memo" />
    
  

  
    <summary>
      





      Preview


Enter, Exit, Down





Drag





Drag(Grid)





Source Code



   
Icon.cs


  using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

public class Icon : MonoBehaviour
{
    private Image image;
    private int siblingIndex;

    private static readonly Color DefaultColor = Color.white;
    private static readonly Color Foc...
    </summary>
  

  </entry>

  
  <entry>
    <title>실수를 스트링으로 변환할 때 포맷 지정하기</title>
    <link href="https://rito15.github.io/posts/cpp-float-to-string-format/" rel="alternate" type="text/html" title="실수를 스트링으로 변환할 때 포맷 지정하기" />
    <published>2021-05-16T01:33:00+09:00</published>
  
    <updated>2021-05-16T01:33:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/cpp-float-to-string-format/</id>
    <content src="https://rito15.github.io/posts/cpp-float-to-string-format/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Memo" />
    
    <category term="Cpp Memo" />
    
  

  
    <summary>
      





      Headers


#include &amp;lt;iostream&amp;gt;
#include &amp;lt;sstream&amp;gt;
#include &amp;lt;iomanip&amp;gt;




Cout Format



  출력하기 전에 std::cout &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision() 호출


// 소수 첫째 자리에서 반올림
std::cout &amp;lt;&amp;lt; std::fixed &amp;lt;&amp;lt; std::setprecision(0);
std::cout &amp;lt;&amp;lt; 12.345f &amp;lt;&amp;lt; std::endl;
std::cout &amp;lt;&amp;lt; 123.456f &amp;lt;&amp;lt; std::endl;

// 소수 둘째 자리에서 반올림
std::cout &amp;lt;&amp;lt; std::f...
    </summary>
  

  </entry>

</feed>


