

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://rito15.github.io/</id>
  <title>Rito15</title>
  <subtitle>Unity Csharp Developer</subtitle>
  <updated>2021-10-26T05:10:09+09:00</updated>
  <author>
    <name>Rito15</name>
    <uri>https://rito15.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://rito15.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://rito15.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator>
  <rights> © 2021 Rito15 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>C# - Global Mouse Hook</title>
    <link href="https://rito15.github.io/posts/cs-global-mouse-hook/" rel="alternate" type="text/html" title="C# - Global Mouse Hook" />
    <published>2021-10-26T03:56:00+09:00</published>
  
    <updated>2021-10-26T03:56:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/cs-global-mouse-hook/</id>
    <content src="https://rito15.github.io/posts/cs-global-mouse-hook/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="C#" />
    
    <category term="C# Winform" />
    
  

  
    <summary>
      





      Source Code





  


using System;
using System.Runtime.InteropServices;
using System.Diagnostics;
using System.Threading;

namespace Rito
{
    /*
         [기능]
             - 마우스 누름, 뗌, 휠 올림/내림, 휠클릭 이벤트 글로벌 후킹

         [메소드]
            - 후킹 시작 : Begin()
            - 후킹 종료 : End()
            - 핸들러 추가 : Mouse~, Middle~, Left~, Right~ 이벤트 핸들러에 메소드 등록
            - 마우스 현재 위치 받아오기 : GetCursor...
    </summary>
  

  </entry>

  
  <entry>
    <title>C# - Global Key Hook</title>
    <link href="https://rito15.github.io/posts/cs-global-key-hook/" rel="alternate" type="text/html" title="C# - Global Key Hook" />
    <published>2021-10-26T03:55:00+09:00</published>
  
    <updated>2021-10-26T03:55:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/cs-global-key-hook/</id>
    <content src="https://rito15.github.io/posts/cs-global-key-hook/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="C#" />
    
    <category term="C# Winform" />
    
  

  
    <summary>
      





      Source Code





  


using System;
using System.Linq;
using System.Windows.Forms;

namespace Rito
{
    /* 
        [기능]
            - 키 누름, 키 뗌 이벤트 글로벌 후킹

        [프로퍼티]
            - bool Shift   : Shift 키 누른 상태인지 여부
            - bool Control : Control 키 누른 상태인지 여부
            - bool Alt     : Alt 키 누른 상태인지 여부

        [메소드]
            - 후킹 시작 : Begin()
            - 후킹 종료 : End()
       ...
    </summary>
  

  </entry>

  
  <entry>
    <title>유니티 - Quaternion</title>
    <link href="https://rito15.github.io/posts/unity-quaternion/" rel="alternate" type="text/html" title="유니티 - Quaternion" />
    <published>2021-10-24T16:00:00+09:00</published>
  
    <updated>2021-10-24T22:57:18+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-quaternion/</id>
    <content src="https://rito15.github.io/posts/unity-quaternion/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Memo" />
    
  

  
    <summary>
      





      Note : 회전에 대한 정의


공간은 표준 기저 벡터의 집합에 의해 정의될 수 있다.

표준 기저 벡터란, 쉽게 말해 해당 공간의 축 방향을 향하는 정규화된 벡터다.

2D 공간, 즉 평면은 (1, 0), (0, 1)에 의해 정의될 수 있으며,

3D 공간은 (1, 0, 0), (0, 1, 0), (0, 0, 1) 에 의해 정의될 수 있다.



회전이란, 표준 기저 벡터를 회전시키는 것과 같다.

트랜스폼이 현재 갖고 있는 회전 정보를 오일러 각으로 정의했을 때,

(0, 0, 0)일 경우 해당 오브젝트의 로컬 공간 표준 기저가

월드 공간의 표준 기저와 일치한 상태를 의미한다.



(30, 0, 0)일 경우 해당 오브젝트의 로컬 공간 표준 기저가

월드 공간 표준 기저에 대해 X축을 기준으로 ...
    </summary>
  

  </entry>

  
  <entry>
    <title>게임 수학 - 회전(2차원, 3차원, 4원수)</title>
    <link href="https://rito15.github.io/posts/game-math-rotation/" rel="alternate" type="text/html" title="게임 수학 - 회전(2차원, 3차원, 4원수)" />
    <published>2021-10-23T17:14:00+09:00</published>
  
    <updated>2021-10-24T21:14:16+09:00</updated>
  
    <id>https://rito15.github.io/posts/game-math-rotation/</id>
    <content src="https://rito15.github.io/posts/game-math-rotation/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Memo" />
    
    <category term="Game Mathematics" />
    
  

  
    <summary>
      





      기초 개념


기저 벡터(Basis Vector)


  n차원 공간에서 임의의 벡터를 표현할 수 있는, 선형 독립 관계의 벡터
  n차원 공간을 구성하려면 n개의 기저 벡터가 필요하다.




표준 기저 벡터(Standard Basis Vector)


  기저 벡터 중에서도 원소 중 하나의 값이 1이고, 나머지 원소가 0인 벡터
  예를 들어 2차원 평면에서의 표준 기저 벡터는 (1, 0), (0, 1)이다.
  공간의 축에 대응되는 벡터라고 할 수 있다.




공간 변환(Space Transformation)




  공간 변환이란 기존의 공간을 이루고 있던 표준기저벡터를 변경하여 새로운 공간을 만드는 작업이다.
  이동, 회전, 크기 변환이 있다.




2차원 평면의 회전


2차원 회전 ...
    </summary>
  

  </entry>

  
  <entry>
    <title>유니티 - FixedUpdate()와 Physics Loop에 대한 이해</title>
    <link href="https://rito15.github.io/posts/unity-fixed-update-and-physics-loop/" rel="alternate" type="text/html" title="유니티 - FixedUpdate()와 Physics Loop에 대한 이해" />
    <published>2021-10-23T03:45:00+09:00</published>
  
    <updated>2021-10-23T15:58:34+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-fixed-update-and-physics-loop/</id>
    <content src="https://rito15.github.io/posts/unity-fixed-update-and-physics-loop/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Memo" />
    
  

  
    <summary>
      





      Update()와 Game Loop


유니티 엔진의 Update()는 매 프레임 호출되며,

이동, 회전, 입력, 실시간 계산 등 수많은 기능을 여기에 작성한다.

그렇다면 Update()의 정체는 무엇일까?



그래픽스 라이브러리를 통해 구현되는 게임은 기본적으로 Game Loop(게임 루프) 를 통해 프레임 기반 동작이 수행된다.

DirectX, OpenGL, Vulkan, … 등 어떤 그래픽스 라이브러리를 사용하더라도

/* Main Function */

// Game Loop
while(...)
{
    // User Inputs..
    // Game Logics..
    // Draw Calls..
    // ...
}


이렇게 메인 스레드에 무한 반복문을 통해 게임 루프를 ...
    </summary>
  

  </entry>

</feed>


