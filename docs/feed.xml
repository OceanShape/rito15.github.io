

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://rito15.github.io/</id>
  <title>Rito15</title>
  <subtitle>Unity Csharp Developer</subtitle>
  <updated>2021-01-28T07:20:19+09:00</updated>
  <author>
    <name>Rito15</name>
    <uri>https://rito15.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://rito15.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://rito15.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator>
  <rights> © 2021 Rito15 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>OpenGL 공부 - 01</title>
    <link href="https://rito15.github.io/posts/opengl-study-01/" rel="alternate" type="text/html" title="OpenGL 공부 - 01" />
    <published>2021-01-28T00:10:00+09:00</published>
  
    <updated>2021-01-28T00:10:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/opengl-study-01/</id>
    <content src="https://rito15.github.io/posts/opengl-study-01/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="OpenGL" />
    
    <category term="OpenGL Study" />
    
  

  
    <summary>
      





      동기


  그동안 유니티를 공부하면서 필요에 따라 쉐이더나 렌더링 파이프라인에 대한 단편적인 지식들을 익혀왔지만, DirectX나 OpenGL같은 그래픽스 라이브러리를 한 번쯤은 제대로 공부하는 게 나을 것이라는 생각이 들었다.




목표


  OpenGL의 완전 기초부터 쉐이더 적용까지 모든 과정 공부
  그래픽스에 대한 전반적인 지식 습득




OpenGL?


  
    OpenGL 자체는 API가 아닌, 각종 OpenGL 라이브러리를 개발하기 위해 Khronos Group이 개발 및 유지 관리하는 설명서이다.
  
  
    OpenGL은 각 함수의 출력과 수행 방법을 정의한다.
  
  
    실제로 OpenGL 라이브러리를 개발하는 사람들은 일반적으로 그래픽카드 제조업체이다.
 ...
    </summary>
  

  </entry>

  
  <entry>
    <title>Unlit 쉐이더그래프로 만드는 Stylized Lit 쉐이더</title>
    <link href="https://rito15.github.io/posts/unlit-stylized-lit-shadergraph/" rel="alternate" type="text/html" title="Unlit 쉐이더그래프로 만드는 Stylized Lit 쉐이더" />
    <published>2021-01-27T22:00:00+09:00</published>
  
    <updated>2021-01-28T02:12:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unlit-stylized-lit-shadergraph/</id>
    <content src="https://rito15.github.io/posts/unlit-stylized-lit-shadergraph/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity Shader" />
    
    <category term="Shader Graph Study" />
    
  

  
    <summary>
      





      동기





  유나이트 서울 2020의 위 세션을 보고, 쉐이더그래프만을 이용해 비슷하게 만들어 봐야겠다고 생각했다.


목표


  URP 쉐이더그래프 중 Unlit 그래프를 이용해 직접 Stylized Lit 쉐이더 만들기




1. 서브그래프 준비


  영상에서 보면, SmoothStep과 비슷한 연산을 더 저렴하게 할 수 있게 해주는 LinearStep을 다룬다.





  LinearStep을 함수화하여 자주 사용하는 코드가 나오기에, 서브그래프로 만들어주었다.





  그런데 실제로 이 세션의 코드를 보면 LinearStep 내에 threshold, smooth 값들을 동일한 형태로 사용하는 코드가 반복된다.





  따라서 이것을 Smoother라고 명명하고 통째로 서브그래...
    </summary>
  

  </entry>

  
  <entry>
    <title>Frame Rate Checker</title>
    <link href="https://rito15.github.io/posts/frame-rate-checker/" rel="alternate" type="text/html" title="Frame Rate Checker" />
    <published>2021-01-24T17:00:00+09:00</published>
  
    <updated>2021-01-25T02:17:35+09:00</updated>
  
    <id>https://rito15.github.io/posts/frame-rate-checker/</id>
    <content src="https://rito15.github.io/posts/frame-rate-checker/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Toys" />
    
  

  
    <summary>
      





      Note


  실제 FPS 값을 실시간, 최근 N개의 평균, 최소, 최댓값으로 확인할 수 있습니다.
  게임 진행 동안 텍스트의 위치, 색상, 크기, GUI 표시 상태를 실시간으로 변경할 수 있습니다.


Preview




Source Code


  https://github.com/rito15/Unity_Toys


Download


  FrameRateChecker.zip


    </summary>
  

  </entry>

  
  <entry>
    <title>Job System</title>
    <link href="https://rito15.github.io/posts/job-system/" rel="alternate" type="text/html" title="Job System" />
    <published>2021-01-24T13:15:00+09:00</published>
  
    <updated>2021-01-25T02:17:35+09:00</updated>
  
    <id>https://rito15.github.io/posts/job-system/</id>
    <content src="https://rito15.github.io/posts/job-system/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Study" />
    
  

  
    <summary>
      





      개념


  유니티에서 안전한 멀티스레딩을 구현하는 시스템
  스레드를 별도로 생성하지 않으며, 유니티의 워커스레드에 작업을 지시할 수 있게 한다.
  잡 대기열에 잡을 배치하면 워커 스레드가 잡 대기열에서 항목을 가져와 실행한다.
  Native Container를 이용해 잡의 수행 결과를 메인 스레드와 공유한다.
  버스트 컴파일러를 이용하여 추가적인 성능 향상을 기대할 수 있다.






장점


  다수의 작은 작업들을 처리하기에 좋으며, 속도가 빠르다.
  스레드를 추가로 만들고 관리하지 않아도 되므로 메모리를 절약할 수 있다.
  유니티 콘솔을 이용해 디버깅할 수 있다.
  메인 스레드의 데이터를 잡의 스택에 깊은 복사를 하여 복사본으로 사용하므로 Race Condition이 발생하지 않는...
    </summary>
  

  </entry>

  
  <entry>
    <title>Fog of War</title>
    <link href="https://rito15.github.io/posts/fog-of-war/" rel="alternate" type="text/html" title="Fog of War" />
    <published>2021-01-20T21:00:00+09:00</published>
  
    <updated>2021-01-26T12:23:40+09:00</updated>
  
    <id>https://rito15.github.io/posts/fog-of-war/</id>
    <content src="https://rito15.github.io/posts/fog-of-war/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Study" />
    
  

  
    <summary>
      





      개념


  맵과 크기가 동일한 RGBA(0, 0, 0, a)의 텍스쳐를 이용해 지정한 유닛들의 주변시야를 표현한다.
  지정한 유닛이 현재 위치한 원형 범위 내 영역들은 a = 0,
  지정한 유닛이 한 번이라도 위치했던 영역들은 a = 0.5~0.8,
  지정한 유닛이 한 번도 방문하지 않은 영역은 a = 1로 표현한다.



[스타크래프트2 게임 플레이 화면]



구현 방법

[1] 카메라와 지상 사이에 검정색 Plane 사용


  
    시야의 역할을 해줄 Plane을 카메라와 지상 사이에 위치시킨다.
  
  
    맵 전체를 좌표 형태의 2차원 배열로 관리하여, 유닛들이 현재 위치한 영역, 방문했던 영역, 한 번도 방문하지 않은 영역의 정보를 실시간으로 저장한다.
  
  
    카...
    </summary>
  

  </entry>

</feed>


