

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://rito15.github.io/</id>
  <title>Rito15</title>
  <subtitle>Unity Csharp Developer</subtitle>
  <updated>2021-03-07T01:54:50+09:00</updated>
  <author>
    <name>Rito15</name>
    <uri>https://rito15.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://rito15.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://rito15.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator>
  <rights> © 2021 Rito15 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>bool 타입 필드를 인스펙터에서 버튼처럼 사용하기</title>
    <link href="https://rito15.github.io/posts/unity-memo-bool-as-a-button/" rel="alternate" type="text/html" title="bool 타입 필드를 인스펙터에서 버튼처럼 사용하기" />
    <published>2021-03-07T01:33:00+09:00</published>
  
    <updated>2021-03-07T01:33:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-memo-bool-as-a-button/</id>
    <content src="https://rito15.github.io/posts/unity-memo-bool-as-a-button/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Memo" />
    
  

  
    <summary>
      





      인스펙터의 버튼


컴포넌트의 인스펙터에서 버튼을 사용하고 싶을 때가 있다.

예를 들면 플레이 모드로 진입하지 않고 에디터 모드에서 메소드를 바로 호출 하고 싶을 때.

그리고 실제로 커스텀 에디터를 이용해 버튼을 만들 수도 있다.



하지만 잠깐 테스트용으로 쓰려는데 스크립트 하나 더 만들고, 커스텀 에디터 선언하고, …

심지어 에디터 GUI좀 쓰려면 EditorGUI, EditorUtility, EditorGUILayout, GUIUtility, GUILayout, … 뭐가 이렇게 다양하고 헷갈리게 만들어 놨는지,

어쨌든 커스텀 에디터 만들어서 if(GUILayout.Button()){} 으로 버튼 하나 달아서 사용할 수 있다.

그러니까, 가끔씩 이게 참 번거롭다.



bool 필드를 버...
    </summary>
  

  </entry>

  
  <entry>
    <title>UniRx (Reactive Extensions for Unity)</title>
    <link href="https://rito15.github.io/posts/unity-study-unirx/" rel="alternate" type="text/html" title="UniRx (Reactive Extensions for Unity)" />
    <published>2021-03-06T20:14:00+09:00</published>
  
    <updated>2021-03-06T20:14:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-study-unirx/</id>
    <content src="https://rito15.github.io/posts/unity-study-unirx/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Study" />
    
  

  
    <summary>
      





      개요


Rx란?


  Reactive Extensions
  .NET에도 다양한 언어로 구현되어 있다.
  절차적 프로그래밍에서 다루기 쉽지 않은 비동기 프로그래밍을 손쉽게 다루기 위한 패러다임
  비동기 데이터 스트림을 중심으로 동작한다.
  스트림 내의 데이터에 변화가 발생했을 때 반응형으로 기능이 동작하는 방식을 사용한다.
  Observer Pattern + Iterator Pattern + Functional Programming




UniRx

  .NET의 Rx를 유니티에서 사용할 수 없다는 한계를 극복하기 위해 만들어졌다.
  유니티의 코루틴, 주요 이벤트 함수, UGUI 등과 상호작용하기 편하게 구현되어 있다.


using UniRx;
using UniRx.Triggers;

...
    </summary>
  

  </entry>

  
  <entry>
    <title>Model Pivot Resetter</title>
    <link href="https://rito15.github.io/posts/unity-toy-model-pivot-resetter/" rel="alternate" type="text/html" title="Model Pivot Resetter" />
    <published>2021-03-05T22:22:00+09:00</published>
  
    <updated>2021-03-06T04:12:39+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-toy-model-pivot-resetter/</id>
    <content src="https://rito15.github.io/posts/unity-toy-model-pivot-resetter/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Toys" />
    
  

  
    <summary>
      





      Note


  모델링 파일을 유니티로 가져올 때 동작하는 애셋포스트프로세서
  모델의 회전과 위치를 리셋한다.
  모델의 정점 위치를 모두 계산하여, 피벗이 모델의 중심 하단으로 오게 한다.




How To Use


  
    스크립트를 유니티 프로젝트 내에 넣는다.
  
  
    [Window] - [Rito] - [Model Pivot Resetter] - [Activated]를 체크한다.
    
      체크 해제되어 있을 경우 동작하지 않는다.
    
  





  임포트 할 때마다 대화상자를 통해 선택하게 하려면
[Window] - [Rito] - [Model Pivot Resetter] - [Show Dialog]에 체크한다.






Preview


기본


  모...
    </summary>
  

  </entry>

  
  <entry>
    <title>무한 루프를 방지하는 작은 습관</title>
    <link href="https://rito15.github.io/posts/unity-memo-prevent-infinite-loop/" rel="alternate" type="text/html" title="무한 루프를 방지하는 작은 습관" />
    <published>2021-03-05T04:00:00+09:00</published>
  
    <updated>2021-03-05T04:00:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-memo-prevent-infinite-loop/</id>
    <content src="https://rito15.github.io/posts/unity-memo-prevent-infinite-loop/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Memo" />
    
  

  
    <summary>
      





      Note


  
    유니티 엔진에서 무한루프가 발생하면 에디터가 그대로 뻗어버린다.
  
  
    따라서 혹시나 무한루프가 될 가능성이 있는 코드를 인지했다면, 간단한 체크 로직을 넣어주는 것이 좋다.
  


while( /* condition */ )
{
    // codes..
}


이런 코드에서, 간단히 다음처럼 추가해준다.

int loopNum = 0;

while( /* condition */ )
{
    // codes..

    if(loopNum++ &amp;gt; 1000)
        throw new Exception("Infinite Loop");
}


이렇게 작성하면 무한 루프가 발생했을 때 유니티 엔진이 뻗어버리지 않고, 무한 루프에서 탈출하고 콘솔에 예외를 출...
    </summary>
  

  </entry>

  
  <entry>
    <title>유니티 쉐이더 프로퍼티 애트리뷰트 모음</title>
    <link href="https://rito15.github.io/posts/unity-shader-property-attributes/" rel="alternate" type="text/html" title="유니티 쉐이더 프로퍼티 애트리뷰트 모음" />
    <published>2021-03-04T21:58:00+09:00</published>
  
    <updated>2021-03-05T05:03:34+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-shader-property-attributes/</id>
    <content src="https://rito15.github.io/posts/unity-shader-property-attributes/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity Shader" />
    
    <category term="Shader Study" />
    
  

  
    <summary>
      





      Space


[Space(10)]



  단순 공백을 크기로 지정한다.




Header


[Header(Header Text)]



  헤더 문자열을 지정한다.
  큰따옴표로 묶지 않아야 한다.




Toggle


[Toggle] _MyToggle ("My Toggle", Float) = 1.0



  체크할 경우 1.0, 체크 해제할 경우 0.0으로 값을 받을 수 있다.




IntRange


[IntRange] _Value("Value", Range(0, 100)) = 50



  Range를 정수로 지정할 수 있게 한다.




PowerSlider


[PowerSlider(3.0)] _Pow("Power", Range(0.01, 1)) = 0.01



  지수 슬라이더를...
    </summary>
  

  </entry>

</feed>


