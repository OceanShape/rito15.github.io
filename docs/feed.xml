

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://rito15.github.io/</id>
  <title>Rito15</title>
  <subtitle>Unity Csharp Developer</subtitle>
  <updated>2021-11-01T17:25:19+09:00</updated>
  <author>
    <name>Rito15</name>
    <uri>https://rito15.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://rito15.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://rito15.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator>
  <rights> © 2021 Rito15 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>유니티 - 매 프레임 처리 성능 테스트 - Update() vs 코루틴</title>
    <link href="https://rito15.github.io/posts/unity-update-vs-coroutine-every-frame/" rel="alternate" type="text/html" title="유니티 - 매 프레임 처리 성능 테스트 - Update() vs 코루틴" />
    <published>2021-11-01T15:02:00+09:00</published>
  
    <updated>2021-11-01T15:02:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-update-vs-coroutine-every-frame/</id>
    <content src="https://rito15.github.io/posts/unity-update-vs-coroutine-every-frame/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Memo" />
    
  

  
    <summary>
      





      실험 목적



  매 프레임 호출되는 Update() 메소드, 코루틴의 성능 비교




실험 조건



  운영체제 : Windows 10
  유니티 에디터 버전 : 2020.3.17f1
  실행 환경 : 유니티 에디터, Windows Standalone Build(Mono, IL2CPP)




실험 대상


[1] Update()


  각 컴포넌트마다 Update() 작성



  
UpdateEveryFrame.cs


  public class UpdateEveryFrame : MonoBehaviour
{
    private void Update() { }
}
  





[2] CustomUpdate()


  한 컴포넌트의 Update()에서 다른 컴포넌트들의 CustomUpdate...
    </summary>
  

  </entry>

  
  <entry>
    <title>Sphere-AABB Intersection</title>
    <link href="https://rito15.github.io/posts/sphere-aabb-intersection/" rel="alternate" type="text/html" title="Sphere-AABB Intersection" />
    <published>2021-10-26T20:22:00+09:00</published>
  
    <updated>2021-10-29T03:59:19+09:00</updated>
  
    <id>https://rito15.github.io/posts/sphere-aabb-intersection/</id>
    <content src="https://rito15.github.io/posts/sphere-aabb-intersection/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Algorithm" />
    
    <category term="Algorithms" />
    
  

  
    <summary>
      





      Sphere



  
    공간의 한 점에서부터 동일한 거리에 있는 점들의 집합
  
  
    구체의 중심 좌표(Vector3), 반지름(float)을 통해 정의할 수 있다.
  




AABB



  
    Axis-Aligned Bounding Box
  
  
    여섯 면이 모두 각각 X, Y, Z 축에 정렬된 형태의 육면체
  
  
    중심 좌표(Vector3)와 각 축의 크기(Vector3) 또는
최소 좌표(Vector3)와 최대 좌표(Vector3)를 통해 정의할 수 있다.
  






Closest Point to AABB


우선, AABB 바깥의 한 점에서부터

AABB 여섯 면 위의 가장 가까운 점을 찾는다.

2차원 평면의 예시는 다음과 같다.





위의...
    </summary>
  

  </entry>

  
  <entry>
    <title>C# - Global Mouse Hook</title>
    <link href="https://rito15.github.io/posts/cs-global-mouse-hook/" rel="alternate" type="text/html" title="C# - Global Mouse Hook" />
    <published>2021-10-26T03:56:00+09:00</published>
  
    <updated>2021-10-26T03:56:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/cs-global-mouse-hook/</id>
    <content src="https://rito15.github.io/posts/cs-global-mouse-hook/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="C#" />
    
    <category term="C# Winform" />
    
  

  
    <summary>
      





      Source Code





  


using System;
using System.Runtime.InteropServices;
using System.Diagnostics;
using System.Threading;

namespace Rito
{
    /*
         [기능]
             - 마우스 누름, 뗌, 휠 올림/내림, 휠클릭 이벤트 글로벌 후킹

         [메소드]
            - 후킹 시작 : Begin()
            - 후킹 종료 : End()
            - 핸들러 추가 : Mouse~, Middle~, Left~, Right~ 이벤트 핸들러에 메소드 등록
            - 마우스 현재 위치 받아오기 : GetCursor...
    </summary>
  

  </entry>

  
  <entry>
    <title>C# - Global Key Hook</title>
    <link href="https://rito15.github.io/posts/cs-global-key-hook/" rel="alternate" type="text/html" title="C# - Global Key Hook" />
    <published>2021-10-26T03:55:00+09:00</published>
  
    <updated>2021-10-26T03:55:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/cs-global-key-hook/</id>
    <content src="https://rito15.github.io/posts/cs-global-key-hook/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="C#" />
    
    <category term="C# Winform" />
    
  

  
    <summary>
      





      Source Code





  


using System;
using System.Linq;
using System.Windows.Forms;

namespace Rito
{
    /* 
        [기능]
            - 키 누름, 키 뗌 이벤트 글로벌 후킹

        [프로퍼티]
            - bool Shift   : Shift 키 누른 상태인지 여부
            - bool Control : Control 키 누른 상태인지 여부
            - bool Alt     : Alt 키 누른 상태인지 여부

        [메소드]
            - 후킹 시작 : Begin()
            - 후킹 종료 : End()
       ...
    </summary>
  

  </entry>

  
  <entry>
    <title>유니티 - Quaternion</title>
    <link href="https://rito15.github.io/posts/unity-quaternion/" rel="alternate" type="text/html" title="유니티 - Quaternion" />
    <published>2021-10-24T16:00:00+09:00</published>
  
    <updated>2021-10-24T22:57:18+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-quaternion/</id>
    <content src="https://rito15.github.io/posts/unity-quaternion/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Memo" />
    
  

  
    <summary>
      





      Note : 회전에 대한 정의


공간은 표준 기저 벡터의 집합에 의해 정의될 수 있다.

표준 기저 벡터란, 쉽게 말해 해당 공간의 축 방향을 향하는 정규화된 벡터다.

2D 공간, 즉 평면은 (1, 0), (0, 1)에 의해 정의될 수 있으며,

3D 공간은 (1, 0, 0), (0, 1, 0), (0, 0, 1) 에 의해 정의될 수 있다.



회전이란, 표준 기저 벡터를 회전시키는 것과 같다.

트랜스폼이 현재 갖고 있는 회전 정보를 오일러 각으로 정의했을 때,

(0, 0, 0)일 경우 해당 오브젝트의 로컬 공간 표준 기저가

월드 공간의 표준 기저와 일치한 상태를 의미한다.



(30, 0, 0)일 경우 해당 오브젝트의 로컬 공간 표준 기저가

월드 공간 표준 기저에 대해 X축을 기준으로 ...
    </summary>
  

  </entry>

</feed>


