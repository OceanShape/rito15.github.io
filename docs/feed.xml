

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://rito15.github.io/</id>
  <title>Rito15</title>
  <subtitle>Unity Csharp Developer</subtitle>
  <updated>2021-08-17T02:47:15+09:00</updated>
  <author>
    <name>Rito15</name>
    <uri>https://rito15.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://rito15.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://rito15.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator>
  <rights> © 2021 Rito15 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>(Amplify) Time Easing Functions</title>
    <link href="https://rito15.github.io/posts/unity-amplify-time-easing-functions/" rel="alternate" type="text/html" title="(Amplify) Time Easing Functions" />
    <published>2021-08-16T22:22:00+09:00</published>
  
    <updated>2021-08-16T22:22:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-amplify-time-easing-functions/</id>
    <content src="https://rito15.github.io/posts/unity-amplify-time-easing-functions/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity Shader" />
    
    <category term="Amplify Shader" />
    
  

  
    <summary>
      





      Note



  Time 노드 기반의, 시간 진행에 따른 변화 함수 예제 모음




[1]







  0 ~ 1 값을 단순 선형으로 왕복할 수 있다.




[2]







  
    Power 값은 [2, 8] 범위에서 2의 배수로 넣어 주는 것이 안전하다.
  
  
    사용 예시 : 심장 박동 표현
  






References


  https://easings.net/ko


    </summary>
  

  </entry>

  
  <entry>
    <title>문자 인코딩 방식들 간단 메모</title>
    <link href="https://rito15.github.io/posts/cs-character-encodings/" rel="alternate" type="text/html" title="문자 인코딩 방식들 간단 메모" />
    <published>2021-08-15T21:42:00+09:00</published>
  
    <updated>2021-08-15T21:42:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/cs-character-encodings/</id>
    <content src="https://rito15.github.io/posts/cs-character-encodings/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="C#" />
    
    <category term="C# Memo" />
    
  

  
    <summary>
      





      Encoding



  
    문자(char)를 코드(byte[])로 표현하는 것
  
  
    반의어 : Decoding
  




ASCII



  
    American Standard Code for Information Interchange, 미국 정보 교환 표준 부호
  
  
    영미 문화권의 기본적인 문자들을 코드값에 대응시키기 위해 고안되었다.
  
  
    영어, 숫자, 일반적인 특수 문자들을 0 ~ 127 값으로 표현한다.
  




Unicode



  
    전 세계의 문자를 코드값으로 표현할 수 있도록 고안된 산업 표준
  
  
    최대 21비트에 전 세계의 문자를 표현한다.
  
  
    대부분의 언어들은 2바이트 이내에 표현된다.(영어, 숫...
    </summary>
  

  </entry>

  
  <entry>
    <title>(Amplify) Electricity Shader</title>
    <link href="https://rito15.github.io/posts/unity-amplify-electricity-shader/" rel="alternate" type="text/html" title="(Amplify) Electricity Shader" />
    <published>2021-08-14T09:09:00+09:00</published>
  
    <updated>2021-08-15T02:57:49+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-amplify-electricity-shader/</id>
    <content src="https://rito15.github.io/posts/unity-amplify-electricity-shader/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity Shader" />
    
    <category term="Amplify Shader" />
    
  

  
    <summary>
      





      Summary



  표면에 전기가 맴도는 효과




Note



  
    포스트프로세싱 Bloom을 넣어 주는 것이 좋다.
  
  
    최적화를 위해서는 Noise Generator 노드 대신 노이즈 텍스쳐를 사용해야 한다.
  




Preview








Properties






Settings


General

  Light Model : Unlit
  Cast Shadows, Receive Shadows 체크 해제


Blend Mode

  Masked




Nodes






Download



  2021_0814_Electricity.zip



    </summary>
  

  </entry>

  
  <entry>
    <title>C# String, StringBuilder, ZString</title>
    <link href="https://rito15.github.io/posts/cs-string-stringbuilder-and-zstring/" rel="alternate" type="text/html" title="C# String, StringBuilder, ZString" />
    <published>2021-08-11T17:17:00+09:00</published>
  
    <updated>2021-08-15T20:54:32+09:00</updated>
  
    <id>https://rito15.github.io/posts/cs-string-stringbuilder-and-zstring/</id>
    <content src="https://rito15.github.io/posts/cs-string-stringbuilder-and-zstring/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="C#" />
    
    <category term="C# Study" />
    
  

  
    <summary>
      





      String 포맷팅의 문제점


$"IntValue : {123}, BoolValue : {true}";


또는

string.Format("IntValue {0}, BoolValue : {1}", 123, true);


이런 방식의 스트링 포맷팅을 쓰는 경우가 정말 많다.



정말 편리하긴 하지만,

StringBuilder와 비교하면 성능도 좋지 않고

심지어 가비지도 더 많이 발생시킨다.

그렇다고 StringBuilder를 쓰려니 가독성이 좋지 않고 불편하다는 단점이 있다.



ZString



  https://github.com/Cysharp/ZString




ZString.Format("IntValue {0}, BoolValue : {1}", 123, true);


strin...
    </summary>
  

  </entry>

  
  <entry>
    <title>Snow Pile &amp;amp; Clear (Plane에 눈 쌓기, 지우기)</title>
    <link href="https://rito15.github.io/posts/unity-snow-pile-and-clear/" rel="alternate" type="text/html" title="Snow Pile &amp;amp; Clear (Plane에 눈 쌓기, 지우기)" />
    <published>2021-08-10T23:23:00+09:00</published>
  
    <updated>2021-08-10T23:23:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-snow-pile-and-clear/</id>
    <content src="https://rito15.github.io/posts/unity-snow-pile-and-clear/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Toys" />
    
  

  
    <summary>
      





      Summary


  
    파티클이 닿는 지점에 눈 쌓기
  
  
    쌓인 눈 지우기
  




Preview


[1] 쌓기






[2] 지우기






Details


[1] Ground 쉐이더


  
    메인 텍스쳐의 색상을 그대로 최종 색상으로 출력한다.
  
  
    메인 텍스쳐의 rgb 값 중 하나를 Height Map으로 사용하여, 버텍스 Y 위치값에 더해준다.
  
  
    마테리얼을 생성하여 Plane에 적용한다.
  




[2] 렌더 텍스쳐


  
    게임 시작 시 렌더 텍스쳐를 하나 생성한다.
  
  
    Ground 마테리얼의 메인 텍스쳐에 렌더 텍스쳐를 넣어준다.
  




[3] 브러시 텍스쳐


  
    마치 Default ...
    </summary>
  

  </entry>

</feed>


