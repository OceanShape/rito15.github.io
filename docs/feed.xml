

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://rito15.github.io/</id>
  <title>Rito15</title>
  <subtitle>Unity Csharp Developer</subtitle>
  <updated>2021-05-22T03:07:48+09:00</updated>
  <author>
    <name>Rito15</name>
    <uri>https://rito15.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://rito15.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://rito15.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator>
  <rights> © 2021 Rito15 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Pivot Editor(메시의 피벗 위치 수정)</title>
    <link href="https://rito15.github.io/posts/unity-pivot-editor/" rel="alternate" type="text/html" title="Pivot Editor(메시의 피벗 위치 수정)" />
    <published>2021-05-20T15:00:00+09:00</published>
  
    <updated>2021-05-21T01:52:21+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-pivot-editor/</id>
    <content src="https://rito15.github.io/posts/unity-pivot-editor/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Editor Plugins" />
    
  

  
    <summary>
      





      Summary


  메시의 피벗 위치를 직접 수정할 수 있는 기능을 제공한다.
  메시의 위치, 회전, 크기를 직접 변경할 수 있다.




Preview


Inspector


Scene





Preview(GIF)








How To Use


Pivot Editor 컴포넌트 추가


  
    Mesh Filter 컴포넌트를 우클릭하고 Edit Pivot을 클릭한다.
  
  
    게임오브젝트에 Mesh Filter, Mesh Renderer 컴포넌트가 모두 존재해야 한다.
  






Edit/Cancel 버튼


  피벗 수정 기능을 활성화/비활성화한다.




Options


  
    
      이름
      설명
    
  
  
    
      Hid...
    </summary>
  

  </entry>

  
  <entry>
    <title>Position Fixer</title>
    <link href="https://rito15.github.io/posts/unity-position-fixer/" rel="alternate" type="text/html" title="Position Fixer" />
    <published>2021-05-19T20:00:00+09:00</published>
  
    <updated>2021-05-19T20:00:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-position-fixer/</id>
    <content src="https://rito15.github.io/posts/unity-position-fixer/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Toys" />
    
  

  
    <summary>
      





      Summary


  부모 게임오브젝트의 이동에 영향받지 않고 트랜스폼 위치를 고정시키는 컴포넌트


How To Use


  위치를 고정/해제할 게임오브젝트에 컴포넌트로 넣는다.
  인스펙터에서 Activated를 체크하거나 스페이스바를 눌러 기능을 활성화한다.


Download


  PositionFixer.zip


Source Code


  https://github.com/rito15/Unity_Toys



   
.


  using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

// 날짜 : 2021-05-19 PM 7:53:20
// 작성자 : Rito

public c...
    </summary>
  

  </entry>

  
  <entry>
    <title>새로고침하기 - 씬뷰, 프로젝트뷰</title>
    <link href="https://rito15.github.io/posts/unity-editor-refresh-windows/" rel="alternate" type="text/html" title="새로고침하기 - 씬뷰, 프로젝트뷰" />
    <published>2021-05-19T01:00:00+09:00</published>
  
    <updated>2021-05-19T01:00:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-editor-refresh-windows/</id>
    <content src="https://rito15.github.io/posts/unity-editor-refresh-windows/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Editor" />
    
  

  
    <summary>
      





      씬뷰


인스펙터의 변경사항이 씬뷰에 곧바로 적용되지 않고

씬뷰에 마우스를 올리거나 키보드 입력이 있어야 적용될 경우,

SceneView.RepaintAll()을 호출하면 된다.



커스텀 에디터에서 인스펙터와 씬뷰의 동기화가 필요한 경우

OnInspectorGUI() 내에서 호출하면 된다.



프로젝트뷰


프로젝트 내의 파일 변경사항이 생겨도

프로젝트뷰에 곧바로 적용되지 않을 수 있다.

이럴 때는 AssetDatabase.Refresh()를 호출하면 된다.


    </summary>
  

  </entry>

  
  <entry>
    <title>GUI 스타일 지정하기</title>
    <link href="https://rito15.github.io/posts/unity-editor-gui-style/" rel="alternate" type="text/html" title="GUI 스타일 지정하기" />
    <published>2021-05-18T02:02:00+09:00</published>
  
    <updated>2021-05-18T02:02:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-editor-gui-style/</id>
    <content src="https://rito15.github.io/posts/unity-editor-gui-style/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Editor" />
    
  

  
    <summary>
      





      인라인 방식으로 스타일 설정하기



  GUI.___ 프로퍼티 값들을 수정하고 돌려놓기


// OnInspectorGUI

var oldBgColor = GUI.backgroundColor;

// GUIs

GUI.backgroundColor = oldBgColor;




GUIStyle 객체 이용하기



  
    GUIStyle 객체를 만들 때 매개변수로 GUI.skin을 알맞게 지정해야 한다.
  
  
    GUI.skin은 OnGUI 종류의 메소드에서만 호출할 수 있으므로
가비지를 감수하고 OnInspectorGUI() 내에서 항상 초기화한다.
  





  스트링 리터럴로 지정할 수도 있다.
  https://gist.github.com/MadLittleMods/ea3e707...
    </summary>
  

  </entry>

  
  <entry>
    <title>컴포넌트를 인스펙터 최상단에 올리기</title>
    <link href="https://rito15.github.io/posts/unity-put-component-on-top/" rel="alternate" type="text/html" title="컴포넌트를 인스펙터 최상단에 올리기" />
    <published>2021-05-17T21:12:00+09:00</published>
  
    <updated>2021-05-17T21:12:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-put-component-on-top/</id>
    <content src="https://rito15.github.io/posts/unity-put-component-on-top/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Memo" />
    
  

  
    <summary>
      





      Memo


/// &amp;lt;summary&amp;gt; 컴포넌트를 최상단에 올리기 &amp;lt;/summary&amp;gt;
[System.Diagnostics.Conditional("UNITY_EDITOR")]
private static void PutComponentOnTop(Component component)
{
    for (int i = 0; i &amp;lt; 100 &amp;amp;&amp;amp; UnityEditorInternal.ComponentUtility.MoveComponentUp(component); i++);
}


    </summary>
  

  </entry>

</feed>


