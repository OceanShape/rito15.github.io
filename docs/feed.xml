

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://rito15.github.io/</id>
  <title>Rito15</title>
  <subtitle>Unity Csharp Developer</subtitle>
  <updated>2021-03-01T02:45:21+09:00</updated>
  <author>
    <name>Rito15</name>
    <uri>https://rito15.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://rito15.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://rito15.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator>
  <rights> © 2021 Rito15 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>오클루전 컬링</title>
    <link href="https://rito15.github.io/posts/unity-opt-occlusion-culling/" rel="alternate" type="text/html" title="오클루전 컬링" />
    <published>2021-03-01T01:40:00+09:00</published>
  
    <updated>2021-03-01T01:40:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-opt-occlusion-culling/</id>
    <content src="https://rito15.github.io/posts/unity-opt-occlusion-culling/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Optimization" />
    
  

  
    <summary>
      





      프러스텀 컬링 (Frustum Culling)


  
    카메라의 뷰 프러스텀(View Frustum) 영역 밖의 오브젝트들은 렌더링하지 않는 것
  
  
    따로 설정하지 않아도 유니티 내에서 기본적으로 적용된다.
  






그냥 이렇게 두어도



실제로 이렇게 컬링된다.



GIF





오클루전 컬링 (Occlusion Culling)


  
    다른 오브젝트에 가려진 오브젝트들은 렌더링하지 않는 것
  
  
    [Window] - [Rendering] - [Occlusion Culling]
  
  
    Occlusion Culling 윈도우를 통해 설정할 수 있다.
  




사전 준비

  
    오클루전 컬링의 대상이 될 오브젝트들은 게임 내에서 움직...
    </summary>
  

  </entry>

  
  <entry>
    <title>UI 위에 게임오브젝트 띄우기</title>
    <link href="https://rito15.github.io/posts/unity-memo-gameobject-over-ui/" rel="alternate" type="text/html" title="UI 위에 게임오브젝트 띄우기" />
    <published>2021-02-28T22:30:00+09:00</published>
  
    <updated>2021-02-28T22:30:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-memo-gameobject-over-ui/</id>
    <content src="https://rito15.github.io/posts/unity-memo-gameobject-over-ui/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Memo" />
    
  

  
    <summary>
      





      Preview





  Green : Default
  Red : Over UI




1. Standard Rendering Pipeline



   
.


  [1] 레이어 준비
  
    [Over UI] 레이어를 만든다.
  

  

  [2] Over UI 카메라 준비
  
    
      카메라를 하나 더 만들고, Audio Listener를 제거한다.
    
    
      메인 카메라와 함께 움직이려면 메인 카메라의 자식으로 둔다.
    
    Over UI 카메라의 Camera 컴포넌트 설정
      
        Clear Flags : Depth Only
        Culling Mask : Over UI
        Depth : 0
      
 ...
    </summary>
  

  </entry>

  
  <entry>
    <title>Free Look Camera</title>
    <link href="https://rito15.github.io/posts/unity-toy-free-look-camera/" rel="alternate" type="text/html" title="Free Look Camera" />
    <published>2021-02-28T17:45:00+09:00</published>
  
    <updated>2021-02-28T17:45:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-toy-free-look-camera/</id>
    <content src="https://rito15.github.io/posts/unity-toy-free-look-camera/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Toys" />
    
  

  
    <summary>
      





      Note


  자유롭게 회전, 이동이 가능한 자유 시점 카메라


How To Use


  카메라가 존재하는 게임오브젝트에 FreeLookCamera 컴포넌트를 추가한다.
  게임 시작 후, Left Alt 키를 눌러 커서가 사라지도록 한다.
  WASD 키로 카메라를 움직이며, 마우스 이동을 통해 카메라를 회전시킬 수 있다.


Preview




Download


  FreeLookCamera.zip


Source Code


  https://github.com/rito15/Unity_Toys



   
.


  using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

// ...
    </summary>
  

  </entry>

  
  <entry>
    <title>Enum 관련 메모</title>
    <link href="https://rito15.github.io/posts/csharp-enum-memo/" rel="alternate" type="text/html" title="Enum 관련 메모" />
    <published>2021-02-28T04:00:00+09:00</published>
  
    <updated>2021-02-28T04:00:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/csharp-enum-memo/</id>
    <content src="https://rito15.github.io/posts/csharp-enum-memo/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Csharp" />
    
    <category term="Csharp Memo" />
    
  

  
    <summary>
      





      enum의 모든 요소를 배열로 가져오기

enum MyEnum { A, B }

Array allValues = Enum.GetValues(typeof(MyEnum));




enum의 마지막 요소 가져오기

// System.Linq;

MyEnum last = 
    Enum.GetValues(typeof(EditorWindowType)).Cast&amp;lt;MyEnum&amp;gt;().Last();


    </summary>
  

  </entry>

  
  <entry>
    <title>유니티 에디터 관련 유용한 스크립트, 팁 모음</title>
    <link href="https://rito15.github.io/posts/unity-editor-api-memo/" rel="alternate" type="text/html" title="유니티 에디터 관련 유용한 스크립트, 팁 모음" />
    <published>2021-02-28T01:50:00+09:00</published>
  
    <updated>2021-02-28T01:50:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-editor-api-memo/</id>
    <content src="https://rito15.github.io/posts/unity-editor-api-memo/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Memo" />
    
  

  
    <summary>
      





      
   
다이얼로그 창 띄우기


  bool res1 = EditorUtility.DisplayDialog("Title", "Message", "OK");
bool res2 = EditorUtility.DisplayDialog("Title", "Message", "OK", "Cancel");
  






   
Undo 모음


  // 오브젝트 생성 이후에 호출
Undo.RegisterCreatedObjectUndo(target, "Create New");

// 오브젝트 파괴 및 Undo 등록
Undo.DestroyObjectImmediate(selected.gameObject);

// 부모 변경 및 Undo 등록
Undo.SetTransformParent(transform, parent, ...
    </summary>
  

  </entry>

</feed>


