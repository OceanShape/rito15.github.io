

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://rito15.github.io/</id>
  <title>Rito15</title>
  <subtitle>Unity Csharp Developer</subtitle>
  <updated>2021-02-19T04:00:18+09:00</updated>
  <author>
    <name>Rito15</name>
    <uri>https://rito15.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://rito15.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://rito15.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator>
  <rights> © 2021 Rito15 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>커스텀 애트리뷰트</title>
    <link href="https://rito15.github.io/posts/memo-custom-attribute/" rel="alternate" type="text/html" title="커스텀 애트리뷰트" />
    <published>2021-02-19T03:55:00+09:00</published>
  
    <updated>2021-02-19T03:55:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/memo-custom-attribute/</id>
    <content src="https://rito15.github.io/posts/memo-custom-attribute/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Csharp" />
    
    <category term="Csharp Memo" />
    
  

  
    <summary>
      





      1. 애트리뷰트 클래스 작성

[System.AttributeUsage(System.AttributeTargets.Method)]
public class CustomAttribute : System.Attribute
{
    public string Title { get; }

    public CustomAttribute(string t) =&amp;gt; Title = t;
}


2. 타겟 메소드에 애트리뷰트 장착

public class TargetClass
{
    [CustomAttribute("Title String")]
    public void TargetMethod()
    {

    }
}


3. 대상 클래스에서 MethodInfo[] 가져오기

var methodInfos =...
    </summary>
  

  </entry>

  
  <entry>
    <title>리플렉션</title>
    <link href="https://rito15.github.io/posts/memo-reflection/" rel="alternate" type="text/html" title="리플렉션" />
    <published>2021-02-19T03:50:00+09:00</published>
  
    <updated>2021-02-19T03:50:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/memo-reflection/</id>
    <content src="https://rito15.github.io/posts/memo-reflection/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Csharp" />
    
    <category term="Csharp Memo" />
    
  

  
    <summary>
      





      필요 네임스페이스
using System;
using System.Reflection;



특정 클래스 타입 가져오기
Type targetType = Type.GetType("클래스명");



네임스페이스 내에 있는 클래스 타입 가져오기
Type targetType = Type.GetType("네임스페이스명.클래스명");



다른 어셈블리(예: DLL) 내에 있는 클래스 타입 가져오기
Type targetType = Type.GetType("네임스페이스명.클래스명, 어셈블리명);



타입으로 객체 생성하기
object instance = Activator.CreateInstance(targetType);



특정 클래스의 메소드 가져오기
MethodInfo targetMethod = targe...
    </summary>
  

  </entry>

  
  <entry>
    <title>OpenGL 공부 - 22 - Light Class</title>
    <link href="https://rito15.github.io/posts/opengl-study-22/" rel="alternate" type="text/html" title="OpenGL 공부 - 22 - Light Class" />
    <published>2021-02-18T15:13:00+09:00</published>
  
    <updated>2021-02-18T15:13:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/opengl-study-22/</id>
    <content src="https://rito15.github.io/posts/opengl-study-22/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="OpenGL" />
    
    <category term="OpenGL Study" />
    
  

  
    <summary>
      





      목표


  DirectionalLight, PointLight 클래스 작성
  프래그먼트 쉐이더에서 각 라이트에 맞는 계산 수행




1. Directional Light



  위치에 관계 없이 방향으로만 작용하는 직광 만들기


DirectionalLight 클래스 작성

class DirectionalLight
{
private:
    glm::vec3 direction; // 빛의 방향과 반전된 L 벡터 방향
    glm::vec3 color;
    float intensity;

public:
    DirectionalLight(const glm::vec3&amp;amp; direction, const glm::vec3&amp;amp; color, const float&amp;amp; intensity...
    </summary>
  

  </entry>

  
  <entry>
    <title>OpenGL 공부 - 21 - Material Class</title>
    <link href="https://rito15.github.io/posts/opengl-study-21/" rel="alternate" type="text/html" title="OpenGL 공부 - 21 - Material Class" />
    <published>2021-02-17T22:43:00+09:00</published>
  
    <updated>2021-02-17T22:43:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/opengl-study-21/</id>
    <content src="https://rito15.github.io/posts/opengl-study-21/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="OpenGL" />
    
    <category term="OpenGL Study" />
    
  

  
    <summary>
      





      목표


  Material 클래스 작성




공부 내용



  오브젝트에 적용할 색상과 텍스쳐들을 Material 클래스로 래핑하여 쉐이더에 전달한다.


Fragment 쉐이더 수정

#version 440

#define saturate(x) clamp(x, 0., 1.)

struct Material
{
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;

    sampler2D diffuseMap;
};

in vec3 vs_position;
in vec3 vs_color;
in vec2 vs_texcoord;
in vec3 vs_normal;

out vec4 fs_color;

// ====================== Uniforms...
    </summary>
  

  </entry>

  
  <entry>
    <title>게임 서버 엔진</title>
    <link href="https://rito15.github.io/posts/memo-game-server-engines/" rel="alternate" type="text/html" title="게임 서버 엔진" />
    <published>2021-02-17T21:40:00+09:00</published>
  
    <updated>2021-02-17T21:40:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/memo-game-server-engines/</id>
    <content src="https://rito15.github.io/posts/memo-game-server-engines/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Memo" />
    
  

  
    <summary>
      





      게임 서버 엔진


  완성된 형태의 게임 서버 기능 제공




설치형(On-premise, Self-hosted)

  ProudNet(국내)
    
      개인 무료 라이센스 제공
      마비노기 영웅전, 세븐나이츠 등 190여개 프로젝트에 사용
      실시간 대규모 RPG, FPS에 적합
      https://www.youtube.com/watch?v=bYB1_qGMRS8&amp;amp;list=PLHmjKJAyeNIdlPra2-dRBhuvqAlun_ir-
      http://lab.gamecodi.com/board/zboard.php?id=GAMECODILAB_Proudnet_Lec
      https://yskang.tistory.com/14
    
  
  아이펀(국내)
 ...
    </summary>
  

  </entry>

</feed>


