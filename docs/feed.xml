

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://rito15.github.io/</id>
  <title>Rito15</title>
  <subtitle>Unity Csharp Developer</subtitle>
  <updated>2021-08-30T16:50:33+09:00</updated>
  <author>
    <name>Rito15</name>
    <uri>https://rito15.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://rito15.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://rito15.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator>
  <rights> © 2021 Rito15 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>유니티 에디터 - 마우스 이벤트 메모</title>
    <link href="https://rito15.github.io/posts/unity-editor-mouse-events/" rel="alternate" type="text/html" title="유니티 에디터 - 마우스 이벤트 메모" />
    <published>2021-08-30T03:03:00+09:00</published>
  
    <updated>2021-08-30T03:03:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-editor-mouse-events/</id>
    <content src="https://rito15.github.io/posts/unity-editor-mouse-events/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Editor Memo" />
    
  

  
    <summary>
      





      Note



  OnInspectorGUI() 내에서 호출


private static bool IsLeftMouseDown =&amp;gt; 
    Event.current.type == EventType.MouseDown &amp;amp;&amp;amp; Event.current.button == 0;

private static bool IsLeftMouseDrag =&amp;gt; 
    Event.current.type == EventType.MouseDrag &amp;amp;&amp;amp; Event.current.button == 0;

private static bool IsLeftMouseUp =&amp;gt; 
    Event.current.type == EventType.MouseUp &amp;amp;&amp;amp; Event.cur...
    </summary>
  

  </entry>

  
  <entry>
    <title>렌더링 파이프라인 간단 정리</title>
    <link href="https://rito15.github.io/posts/rendering-pipeline/" rel="alternate" type="text/html" title="렌더링 파이프라인 간단 정리" />
    <published>2021-08-30T01:50:00+09:00</published>
  
    <updated>2021-08-30T01:50:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/rendering-pipeline/</id>
    <content src="https://rito15.github.io/posts/rendering-pipeline/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity Shader" />
    
    <category term="Shader Study" />
    
  

  
    <summary>
      





      렌더링 파이프라인 구조 요약



  입력 조립
  정점 쉐이더
  래스터라이저
  픽셀(프래그먼트) 쉐이더
  출력 병합




1. 입력 조립(Input Assembly)



  
    렌더링 파이프라인의 첫 단계
  
  
    정점 데이터를 CPU에서 GPU로 운반하기 위한 자료 구조를 정점 버퍼라고 한다.
  
  
    정점 버퍼는 위치, 노말, 색상, UV를 담고 있는데, 
구조체로 이쁘게 담고 있는게 아니고 직렬화된 형태로 담고 있다.
  
  
    그리고 GPU에서는 이렇게 전달 받은 정점 버퍼를, 
미리 전달 받은 렌더 상태의 버텍스 명세를 통해 정점 데이터(구조체)로 조립한다.
  
  그런데 이렇게 정점 버퍼를 정점 데이터로 조립한다고 입력 조립이 아니고, 
  
   ...
    </summary>
  

  </entry>

  
  <entry>
    <title>유니티 에디터 - Built-in Icons</title>
    <link href="https://rito15.github.io/posts/unity-editor-built-in-icons/" rel="alternate" type="text/html" title="유니티 에디터 - Built-in Icons" />
    <published>2021-08-29T05:02:00+09:00</published>
  
    <updated>2021-08-29T05:02:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-editor-built-in-icons/</id>
    <content src="https://rito15.github.io/posts/unity-editor-built-in-icons/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Editor Memo" />
    
  

  
    <summary>
      





      Note



  
    유니티 에디터에 내장된 아이콘들이 존재한다.
  
  
    UnityEditor.EditorGUIUtility.IconContent("이름")을 통해 GUIContent 타입으로 로드할 수 있다.
  
  
    UnityEditor.EditorGUIUtility.FindTexture("이름")을 통해 Texture2D 타입으로 로드할 수 있다.
  




아이콘 목록 확인



  
    https://github.com/halak/unity-editor-icons
  
  
    https://blog.csdn.net/Game_jqd/article/details/103497366
  




사용 예시


[1] IconContent



[CustomEdito...
    </summary>
  

  </entry>

  
  <entry>
    <title>유니티 에디터 - 벡터 필드의 X,Y,Z,W 레이블 변경하기</title>
    <link href="https://rito15.github.io/posts/unity-editor-change-vector-field-labels/" rel="alternate" type="text/html" title="유니티 에디터 - 벡터 필드의 X,Y,Z,W 레이블 변경하기" />
    <published>2021-08-27T22:33:00+09:00</published>
  
    <updated>2021-08-27T22:33:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-editor-change-vector-field-labels/</id>
    <content src="https://rito15.github.io/posts/unity-editor-change-vector-field-labels/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Editor Memo" />
    
  

  
    <summary>
      





      Note





  
    Vector2, Vector3, Vector4 필드에는 X, Y, Z, W 레이블이 표시되며, 일반적인 방법으로는 변경할 수 없다.
  
  
    리플렉션을 이용하면 이를 변경할 수 있다.
  






// using System.Reflection;
// 커스텀 에디터 클래스 내에서 작성

private Vector2 vec2;
private Vector3 vec3;
private Vector4 vec4;

private static FieldInfo  fiVector4FieldLables;
private static GUIContent[] vector4FieldLables;

public override void OnInspectorGUI()
{
    Bind...
    </summary>
  

  </entry>

  
  <entry>
    <title>유니티 에디터 - 미리 정의된 GUIStyle 목록</title>
    <link href="https://rito15.github.io/posts/unity-editor-predefined-gui-styles/" rel="alternate" type="text/html" title="유니티 에디터 - 미리 정의된 GUIStyle 목록" />
    <published>2021-08-27T21:59:00+09:00</published>
  
    <updated>2021-08-27T21:59:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-editor-predefined-gui-styles/</id>
    <content src="https://rito15.github.io/posts/unity-editor-predefined-gui-styles/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Editor Memo" />
    
  

  
    <summary>
      





      목록


"box"
"button"
"toggle"
"label"
"window"
"textfield"
"textarea"
"horizontalslider"
"horizontalsliderthumb"
"verticalslider"
"verticalsliderthumb"
"horizontalscrollbar"
"horizontalscrollbarthumb"
"horizontalscrollbarleftbutton"
"horizontalscrollbarrightbutton"
"verticalscrollbar"
"verticalscrollbarthumb"
"verticalscrollbarupbutton"
"verticalscrollbardownbutton"
"scrollview"



  NOTE : Edit...
    </summary>
  

  </entry>

</feed>


