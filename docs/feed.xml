

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://rito15.github.io/</id>
  <title>Rito15</title>
  <subtitle>Unity Csharp Developer</subtitle>
  <updated>2021-11-17T15:19:28+09:00</updated>
  <author>
    <name>Rito15</name>
    <uri>https://rito15.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://rito15.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://rito15.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator>
  <rights> © 2021 Rito15 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>유니티 - 반드시 고쳐야 하는, 잘못된 코딩 방식들</title>
    <link href="https://rito15.github.io/posts/unity-bad-coding-practices/" rel="alternate" type="text/html" title="유니티 - 반드시 고쳐야 하는, 잘못된 코딩 방식들" />
    <published>2021-11-16T22:51:00+09:00</published>
  
    <updated>2021-11-16T22:51:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-bad-coding-practices/</id>
    <content src="https://rito15.github.io/posts/unity-bad-coding-practices/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Tips" />
    
  

  
    <summary>
      





      Intro


별 생각 없이 흔하게 작성할 수 있지만,

제대로 알고 보면 ‘절대 이렇게 작성하면 안되겠다’라고 생각할 수 있는 유니티 C# 코딩 방식들에 대해 다룹니다.

편의상 본문에서는 평어로 서술합니다.



Note



  
    본문에서의 ‘자주’는 Update(), FixedUpdate(), 코루틴 내부의 while(true) 문 등에서 자주 호출되는 경우를 의미한다.
  
  
    예를 들어 Update()는 매 프레임마다 한 번씩 호출되므로, 자주 호출된다고 할 수 있다.
  




1. 자주 호출되는 Find(), GetComponent()


예시

private void Update()
{
    GameObject managerObject  = GameObject.Fin...
    </summary>
  

  </entry>

  
  <entry>
    <title>유니티 - Transform의 공간 변환 메소드 간단 메모</title>
    <link href="https://rito15.github.io/posts/unity-transform-transformation-methods/" rel="alternate" type="text/html" title="유니티 - Transform의 공간 변환 메소드 간단 메모" />
    <published>2021-11-13T00:02:00+09:00</published>
  
    <updated>2021-11-16T00:25:12+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-transform-transformation-methods/</id>
    <content src="https://rito15.github.io/posts/unity-transform-transformation-methods/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Memo - Shorts" />
    
  

  
    <summary>
      





      1. 로컬-월드 변환


[1] TransformPoint()


  
    위치, 회전, 크기 변환을 적용한다.
  
  
    방향 벡터가 아니라, 위치 벡터를 월드 위치로 변환할 때 사용한다.
  
  
    메시의 로컬 정점 좌표로부터 월드 정점 좌표를 구할 때처럼, 
오브젝트에 완전히 종속적인 위치 벡터를 변환할 때 사용된다.
  
  
    C# 스크립트에서는 딱히 자주 쓰이지 않는다.
  




[2] TransformVector()


  
    회전, 크기 변환을 적용한다.
  
  
    메시의 노멀 벡터처럼 오브젝트에 종속적인 방향 벡터를 월드로 변환할 때 사용된다.
  
  
    이것도 C# 스크립트에서 딱히 쓸 일은 없어 보인다.
  
  
    혹시나 방향 벡...
    </summary>
  

  </entry>

  
  <entry>
    <title>게임 수학 - 세 점이 주어질 때 수선의 발 구하기</title>
    <link href="https://rito15.github.io/posts/foot-of-perpendicular-in-three-vectors/" rel="alternate" type="text/html" title="게임 수학 - 세 점이 주어질 때 수선의 발 구하기" />
    <published>2021-11-12T18:12:00+09:00</published>
  
    <updated>2021-11-12T18:12:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/foot-of-perpendicular-in-three-vectors/</id>
    <content src="https://rito15.github.io/posts/foot-of-perpendicular-in-three-vectors/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Memo" />
    
    <category term="Game Mathematics" />
    
  

  
    <summary>
      





      수선의 발 구하기




공간 상의 세 점 A, B, C가 주어져 있다.

D는 C에서 직선 AB에 내린 수선의 발이다.

D는 간단히 다음과 같이 구할 수 있다.

\[D = A + AB * \frac{AB \cdot AC}{AB \cdot AB}\]



설명

AD 벡터를 구하고, A에서 AD를 더해 D를 계산하는 방식이다.

벡터 AB와 AC를 내적하면 AB의 크기와 AC를 AB에 사영한 벡터 AD의 크기를 곱한 값, 즉 |AB| * |AD|를 얻을 수 있고,

벡터 AB를 자기 자신에 대해 내적하면 |AB| * |AB|를 얻을 수 있다.

전자를 후자로 나누면 |AD| / |AB|를 얻을 수 있고,

여기에 벡터 AB를 곱하면 AB의 방향을 유지한채 크기는 |AD|인 벡터, 즉 AD를 얻을 수...
    </summary>
  

  </entry>

  
  <entry>
    <title>유니티 - 리지드바디와 콜라이더 간단 정리</title>
    <link href="https://rito15.github.io/posts/unity-rigidbody-and-collider/" rel="alternate" type="text/html" title="유니티 - 리지드바디와 콜라이더 간단 정리" />
    <published>2021-11-09T14:50:00+09:00</published>
  
    <updated>2021-11-09T14:50:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-rigidbody-and-collider/</id>
    <content src="https://rito15.github.io/posts/unity-rigidbody-and-collider/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Memo" />
    
  

  
    <summary>
      





      리지드바디(Rigidbody)



  
Unity Docs


  
    https://docs.unity3d.com/kr/2019.4/Manual/class-Rigidbody.html
  





‘강체’로 번역할 수 있다.

유니티 엔진에서 제공하는 기본 컴포넌트이다.

리지드바디가 존재하는 게임 오브젝트는 물리 엔진의 영향을 받는다.

현실감 있는 물리 시뮬레이션이 가능해지며,

힘(Force)과 속도(Velocity)의 영향을 받는다.

3D에서는 Rigidbody, 2D에서는 Rigidbody2D 컴포넌트를 사용한다.

프로젝트 종류에 따라 잘 구분해서 사용해야 한다.



콜라이더(Collider)



  
Unity Docs


  
    https://docs.unity3d.co...
    </summary>
  

  </entry>

  
  <entry>
    <title>유니티 - 모바일 성능 최적화</title>
    <link href="https://rito15.github.io/posts/unity-mobile-optimization/" rel="alternate" type="text/html" title="유니티 - 모바일 성능 최적화" />
    <published>2021-11-06T00:02:00+09:00</published>
  
    <updated>2021-11-11T16:46:26+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-mobile-optimization/</id>
    <content src="https://rito15.github.io/posts/unity-mobile-optimization/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Optimization" />
    
  

  
    <summary>
      





      프로젝트 설정



  
…


  공통
  
    프로젝트 설정에서 불필요해 보이는 옵션들은 웬만해서 끄는 것이 성능에 좋다.
  

  물리 엔진을 사용하지 않는 경우
  
    Physics - Auto Simulation, Auto Sync Transforms 비활성화
  

  알맞은 Frame Rate 설정하기
  
    Application.targetFrameRate 설정
    액션 게임 : 60fps
    보드 게임 : 30fps
  

  Vsync 설정
  
    모바일 플랫폼에서 Vsync 설정을 끄는 것은 사실상 의미가 없을 수 있다.
    웬만해서 이미 하드웨어 레벨에서 Vsync가 설정되기 때문이다.
  

  



파일 포맷(확장자)



  
…


  이미...
    </summary>
  

  </entry>

</feed>


