

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://rito15.github.io/</id>
  <title>Rito15</title>
  <subtitle>Unity Csharp Developer</subtitle>
  <updated>2021-01-29T17:17:55+09:00</updated>
  <author>
    <name>Rito15</name>
    <uri>https://rito15.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://rito15.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://rito15.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator>
  <rights> © 2021 Rito15 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>스크립트 템플릿(Script Templates)</title>
    <link href="https://rito15.github.io/posts/script-templates/" rel="alternate" type="text/html" title="스크립트 템플릿(Script Templates)" />
    <published>2021-01-29T16:55:00+09:00</published>
  
    <updated>2021-01-29T16:55:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/script-templates/</id>
    <content src="https://rito15.github.io/posts/script-templates/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Memo" />
    
  

  
    <summary>
      





      개념


  Project - 우클릭 - Create를 통해 만드는 스크립트 또는 텍스트의 템플릿을 미리 지정하는 기능
  스크립트 템플릿의 저장 경로 :


C:\Program Files\유니티 버전\Editor\Data\Resources\ScriptTemplates



  각각의 유니티 버전마다 따로 저장된다.
  한가지 팁은, 스크립트 템플릿에 한 글자라도 애초에 한글이 작성되어 있지 않으면 나중에 한글 주석이라도 작성했을 때 인코딩이 깨져버릴 수 있으니 스크립트 템플릿 내에 아주 짧은 한글 주석을 적어 놓는게 좋다는 것




규칙


  각각의 템플릿 파일의 이름 규칙은 다음과 같다.


[인덱스]-[템플릿 이름]-[생성 시 파일명.확장자].txt



  예시 :


81-C# Script...
    </summary>
  

  </entry>

  
  <entry>
    <title>OpenGL 공부 - 02</title>
    <link href="https://rito15.github.io/posts/opengl-study-02/" rel="alternate" type="text/html" title="OpenGL 공부 - 02" />
    <published>2021-01-28T22:09:00+09:00</published>
  
    <updated>2021-01-28T22:09:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/opengl-study-02/</id>
    <content src="https://rito15.github.io/posts/opengl-study-02/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="OpenGL" />
    
    <category term="OpenGL Study" />
    
  

  
    <summary>
      





      목표


  GLEW 설치 및 적용




GLEW 설치


  GLEW : OpenGL Extension Wrangler Library
  http://glew.sourceforge.net
  
    Binary 다운로드
  
  프로젝트의 Dependency 폴더 내로 GLEW 폴더 복사
    
      glew-2.1.0 폴더를 통째로 가져와서 GLEW로 이름을 변경해준다.
    
  





  GLEW/doc/index.html - Usage 탭에 들어가면 초기 사용법이 있다.




참조 추가



  헤더
    
      프로젝트 속성 - C/C++ - 일반 - 추가 포함 디렉터리
      $(SolutionDir)OpenGL_Study\Dependencies\GLEW\inc...
    </summary>
  

  </entry>

  
  <entry>
    <title>C# 파일 입출력</title>
    <link href="https://rito15.github.io/posts/csharp-fileio/" rel="alternate" type="text/html" title="C# 파일 입출력" />
    <published>2021-01-28T21:10:00+09:00</published>
  
    <updated>2021-01-28T22:03:44+09:00</updated>
  
    <id>https://rito15.github.io/posts/csharp-fileio/</id>
    <content src="https://rito15.github.io/posts/csharp-fileio/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Csharp" />
    
    <category term="Memo" />
    
  

  
    <summary>
      





      간단 정리

파일에 쓰려면

  대상이 string, string[], byte[] 타입 중 하나여야 한다.
  파일의 전체 경로("폴더경로\파일명.확장자")가 필요하다.


한 파일에 대한 연속 입출력 횟수에 따라

  한번에 읽거나 쓰려면 File.Read(), File.Write() 메소드를 사용한다.
  여러 번에 걸쳐 읽거나 쓰려면 스트림 객체를 사용한다.




Namespace
using System.IO;




Path

// \ 대신 /를 써도 \로 자동 변환
string   filePath = @"C:\folder\fileName.txt"; 
FileInfo fi = new FileInfo(filePath);

fi.FullName;      // C:\folder\fileName....
    </summary>
  

  </entry>

  
  <entry>
    <title>OpenGL 공부 - 01</title>
    <link href="https://rito15.github.io/posts/opengl-study-01/" rel="alternate" type="text/html" title="OpenGL 공부 - 01" />
    <published>2021-01-28T00:10:00+09:00</published>
  
    <updated>2021-01-29T01:36:05+09:00</updated>
  
    <id>https://rito15.github.io/posts/opengl-study-01/</id>
    <content src="https://rito15.github.io/posts/opengl-study-01/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="OpenGL" />
    
    <category term="OpenGL Study" />
    
  

  
    <summary>
      





      동기


  그동안 유니티를 공부하면서 필요에 따라 쉐이더나 렌더링 파이프라인에 대한 단편적인 지식들을 익혀왔지만, DirectX나 OpenGL같은 그래픽스 라이브러리를 한 번쯤은 제대로 공부하는 게 나을 것이라는 생각이 들었다.




목표


  OpenGL의 완전 기초부터 쉐이더 적용까지 모든 과정 공부
  그래픽스에 대한 전반적인 지식 습득




OpenGL?


  
    OpenGL 자체는 API가 아닌, 각종 OpenGL 라이브러리를 개발하기 위해 Khronos Group이 개발 및 유지 관리하는 설명서이다.
  
  
    OpenGL은 각 함수의 출력과 수행 방법을 정의한다.
  
  
    실제로 OpenGL 라이브러리를 개발하는 사람들은 일반적으로 그래픽카드 제조업체이다.
 ...
    </summary>
  

  </entry>

  
  <entry>
    <title>Unlit 쉐이더그래프로 만드는 Stylized Lit 쉐이더</title>
    <link href="https://rito15.github.io/posts/unlit-stylized-lit-shadergraph/" rel="alternate" type="text/html" title="Unlit 쉐이더그래프로 만드는 Stylized Lit 쉐이더" />
    <published>2021-01-27T22:00:00+09:00</published>
  
    <updated>2021-01-28T07:20:41+09:00</updated>
  
    <id>https://rito15.github.io/posts/unlit-stylized-lit-shadergraph/</id>
    <content src="https://rito15.github.io/posts/unlit-stylized-lit-shadergraph/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity Shader" />
    
    <category term="Shader Graph Study" />
    
  

  
    <summary>
      





      동기





  유나이트 서울 2020의 위 세션을 보고, 쉐이더그래프만을 이용해 비슷하게 만들어 봐야겠다고 생각했다.


목표


  URP 쉐이더그래프 중 Unlit 그래프를 이용해 직접 Stylized Lit 쉐이더 만들기




1. 서브그래프 준비


  영상에서 보면, SmoothStep과 비슷한 연산을 더 저렴하게 할 수 있게 해주는 LinearStep을 다룬다.





  LinearStep을 함수화하여 자주 사용하는 코드가 나오기에, 서브그래프로 만들어주었다.





  그런데 실제로 이 세션의 코드를 보면 LinearStep 내에 threshold, smooth 값들을 동일한 형태로 사용하는 코드가 반복된다.





  따라서 이것을 Smoother라고 명명하고 통째로 서브그래...
    </summary>
  

  </entry>

</feed>


