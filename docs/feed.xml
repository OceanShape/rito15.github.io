

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://rito15.github.io/</id>
  <title>Rito15</title>
  <subtitle>Unity Csharp Developer</subtitle>
  <updated>2021-07-07T22:45:19+09:00</updated>
  <author>
    <name>Rito15</name>
    <uri>https://rito15.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://rito15.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://rito15.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator>
  <rights> © 2021 Rito15 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>C# Parallel</title>
    <link href="https://rito15.github.io/posts/cs-parallel/" rel="alternate" type="text/html" title="C# Parallel" />
    <published>2021-07-07T19:07:00+09:00</published>
  
    <updated>2021-07-07T19:07:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/cs-parallel/</id>
    <content src="https://rito15.github.io/posts/cs-parallel/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="C#" />
    
    <category term="C# Threading" />
    
  

  
    <summary>
      





      Parallel 클래스



  
    반복적인 병렬 처리를 손쉽게 작성할 수 있는 API를 제공한다.
  
  
    ThreadPool 기반으로 작성되어, ThreadPool의 현재 스레드 개수를 차지하며 최소/최대 스레드 개수에 영향을 받는다.
  
  
    ThreadPool의 스레드 뿐만 아니라 호출 스레드도 병렬 처리에 포함된다.
  
  
    동기적으로 수행된다. (호출 스레드가 병렬 처리의 종료를 자동적으로 대기한다.)
  




Parallel.For()



  for문의 형태와 유사하게 병렬처리를 수행할 수 있다.




[1] 기초

Parallel.For(0, 100, i =&amp;gt;
{
    Console.WriteLine($"[{i}] {Thread.Current...
    </summary>
  

  </entry>

  
  <entry>
    <title>비동기 씬 로드</title>
    <link href="https://rito15.github.io/posts/unity-load-scene-async/" rel="alternate" type="text/html" title="비동기 씬 로드" />
    <published>2021-07-06T16:32:00+09:00</published>
  
    <updated>2021-07-06T16:32:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-load-scene-async/</id>
    <content src="https://rito15.github.io/posts/unity-load-scene-async/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Memo - Shorts" />
    
  

  
    <summary>
      





      GIF




Source Code



   
Source Code


  using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.SceneManagement;

// 날짜 : 2021-07-06 PM 3:02:23
// 작성자 : Rito

/// &amp;lt;summary&amp;gt; 
/// 비동기 씬 로드
/// &amp;lt;/summary&amp;gt;
public class AsyncSceneLoader : MonoBehaviour
{
    /**************************************************...
    </summary>
  

  </entry>

  
  <entry>
    <title>C# async Task</title>
    <link href="https://rito15.github.io/posts/cs-async-task/" rel="alternate" type="text/html" title="C# async Task" />
    <published>2021-07-06T03:34:00+09:00</published>
  
    <updated>2021-07-06T03:34:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/cs-async-task/</id>
    <content src="https://rito15.github.io/posts/cs-async-task/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="C#" />
    
    <category term="C# Threading" />
    
  

  
    <summary>
      





      비동기 작업 : async-await



  
    Task를 Thread처럼 사용하는 대신, 비동기 작업을 위해 사용할 수 있다.
  
  
    async, await 키워드를 이용해 이루어지는 비동기 작업은 기존의 멀티 스레딩과는 다른 방식으로 이루어진다.
  




특징


  
    메소드 내부에서 await로 대기하려면, 해당 메소드의 리턴 타입 앞에 async 키워드를 작성한다.
  
  
    await Task.Delay(n)와 같이 await를 이용한 대기는 해당 스레드를 블록시키지 않는다.
  
  
    비동기 작업을 기다리고, 끝날 경우 값을 리턴받을 수 있다.
  
  
    async-await로 실행 시킨 작업 역시 ThreadPool에 의해 관리된다.
  
...
    </summary>
  

  </entry>

  
  <entry>
    <title>C# Task</title>
    <link href="https://rito15.github.io/posts/cs-task/" rel="alternate" type="text/html" title="C# Task" />
    <published>2021-07-06T03:33:00+09:00</published>
  
    <updated>2021-07-06T03:33:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/cs-task/</id>
    <content src="https://rito15.github.io/posts/cs-task/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="C#" />
    
    <category term="C# Threading" />
    
  

  
    <summary>
      





      Task



  
    Task는 ThreadPool을 기반으로 작성된 라이브러리이다.
  
  
    내부적으로 ThreadPool의 스레드 개수를 차지하며, ThreadPool의 스레드 개수 제한에 영향을 받는다.
  
  
    가벼운 비동기 작업에 특화되어 있다.
  
  
    Thread.Abort()처럼 간단히 종료할 수 없다.
  
  
    작업이 완료된 Task 객체는 다시 수행될 수 없다.
  




1. 생성, 실행, 대기


[1] 개별 객체 정의


  
    스레드 바디로 사용될 메소드를 미리 정의한다.
  
  
    정의한 메소드 또는 람다식을 이용해 Task 객체를 만들고, 시작시킨다.
  
  
    이렇게 시작되는 Task는 새로운 스레드에서 실행된...
    </summary>
  

  </entry>

  
  <entry>
    <title>(Amplify) Shield Shader</title>
    <link href="https://rito15.github.io/posts/unity-amplify-shield-shader/" rel="alternate" type="text/html" title="(Amplify) Shield Shader" />
    <published>2021-07-05T03:33:00+09:00</published>
  
    <updated>2021-07-05T03:33:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-amplify-shield-shader/</id>
    <content src="https://rito15.github.io/posts/unity-amplify-shield-shader/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity Shader" />
    
    <category term="Amplify Shader" />
    
  

  
    <summary>
      





      Summary



  Sphere 메시에 사용하는 쉴드 쉐이더




Preview






Properties






Settings


Blend Mode

  Transparent




Nodes






Download



  2021_0704_Shield.zip



    </summary>
  

  </entry>

</feed>


