

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://rito15.github.io/</id>
  <title>Rito15</title>
  <subtitle>Unity Csharp Developer</subtitle>
  <updated>2021-06-01T19:41:03+09:00</updated>
  <author>
    <name>Rito15</name>
    <uri>https://rito15.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://rito15.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://rito15.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator>
  <rights> © 2021 Rito15 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Method Chaining &amp; Generic</title>
    <link href="https://rito15.github.io/posts/method-chaning-pattern/" rel="alternate" type="text/html" title="Method Chaining &amp; Generic" />
    <published>2021-05-28T22:02:00+09:00</published>
  
    <updated>2021-05-30T18:51:30+09:00</updated>
  
    <id>https://rito15.github.io/posts/method-chaning-pattern/</id>
    <content src="https://rito15.github.io/posts/method-chaning-pattern/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Algorithm" />
    
    <category term="Design Pattern" />
    
  

  
    <summary>
      





      메소드 체이닝 패턴


특징

  메소드가 객체를 반환하는 형태로 작성한다.
  문장을 마치지 않고 메소드 호출을 이어나갈 수 있다.
  가독성을 향상시킬 수 있다.




주의사항

  한 문장에 여러번의 메소드 호출이 존재할 수 있으므로, 에러가 발생할 경우 정확한 지점을 한 번에 찾기 힘들다.
  C# 구조체의 메소드를 체이닝으로 구현할 경우, 매 번 구조체 전체의 복제가 발생하므로 바람직하지 않다.




예시

class Box
{
    private float width;
    private float height;

    public Box SetWidth(float width)
    {
        this.width = width;
        return this;
    ...
    </summary>
  

  </entry>

  
  <entry>
    <title>FBX Exporter</title>
    <link href="https://rito15.github.io/posts/unity-fbx-exporter/" rel="alternate" type="text/html" title="FBX Exporter" />
    <published>2021-05-27T17:02:00+09:00</published>
  
    <updated>2021-05-27T17:02:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-fbx-exporter/</id>
    <content src="https://rito15.github.io/posts/unity-fbx-exporter/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Memo" />
    
  

  
    <summary>
      





      Summary


  유니티 내에 존재하는 메시를 .fbx 파일로 추출해주는 애셋




Import



  
    [Window] - [Package Manager]
  
  
    좌측 상단 [Unity Registry] 설정
  
  
    FBX Exporter 검색 및 Install
  






How to Use



  
    하이라키에서 내보낼 게임오브젝트에 우클릭 후 Export To FBX 클릭
  
  
    Export Name, Export Path 설정 후 Export
  






Old Version



  https://github.com/unity3d-jp/FbxExporter
  FbxExporter.zip



    </summary>
  

  </entry>

  
  <entry>
    <title>에디터 GUI 이벤트 모음</title>
    <link href="https://rito15.github.io/posts/unity-editor-gui-events/" rel="alternate" type="text/html" title="에디터 GUI 이벤트 모음" />
    <published>2021-05-25T02:22:00+09:00</published>
  
    <updated>2021-05-25T02:22:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-editor-gui-events/</id>
    <content src="https://rito15.github.io/posts/unity-editor-gui-events/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Editor" />
    
  

  
    <summary>
      





      Mouse Over Control



  특정 컨트롤에 마우스가 위치해 있는지 확인


[1] Layout 요소가 아닌 경우

Rect rect = /* Set Rect */;

EditorGUI.LabelField(rect, "Label"); // Draw Field Control

bool mouseOver = rect.Contains(Event.current.mousePosition);


[2] Layout 요소인 경우

EditorGUILayout.TextField("Text");

bool mouseOver = GUILayoutUtility.GetLastRect()
                .Contains(Event.current.mousePosition);




Mouse Down...
    </summary>
  

  </entry>

  
  <entry>
    <title>Material Property Block을 통해 프로퍼티 값 변경하기</title>
    <link href="https://rito15.github.io/posts/unity-material-property-block/" rel="alternate" type="text/html" title="Material Property Block을 통해 프로퍼티 값 변경하기" />
    <published>2021-05-22T18:00:00+09:00</published>
  
    <updated>2021-05-22T18:00:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-material-property-block/</id>
    <content src="https://rito15.github.io/posts/unity-material-property-block/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Optimization" />
    
  

  
    <summary>
      





      드로우 콜과 배칭의 개념


Draw Call

  
    CPU가 GPU에게 오브젝트를 그리라고 요청하는 것
  
  
    주요 CPU 병목 요소 중 하나
  


SetPass Call

  
    쉐이더 렌더링 패스 수
  
  
    쉐이더 요소(예 : 프로퍼티)변경 시 SetPass Call 증가
  
  
    간단히, 쉐이더와 마테리얼에 관련된 Batch라고 할 수 있다.
  


Batch

  
    드로우 콜을 포함하는 상위 개념
  
  
    각각의 드로우 콜 사이에서 GPU에 의해 접근되는 리소스들을 변경하는 일련의 모든 작업
  
  
    Batch = Draw Call + Set Pass Call + Set Transform + …
  


Batching
...
    </summary>
  

  </entry>

  
  <entry>
    <title>Pivot Editor(메시의 피벗 위치 수정)</title>
    <link href="https://rito15.github.io/posts/unity-pivot-editor/" rel="alternate" type="text/html" title="Pivot Editor(메시의 피벗 위치 수정)" />
    <published>2021-05-20T15:00:00+09:00</published>
  
    <updated>2021-05-20T15:00:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-pivot-editor/</id>
    <content src="https://rito15.github.io/posts/unity-pivot-editor/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Editor Utilities" />
    
  

  
    <summary>
      





      Summary


  메시의 피벗 위치를 직접 수정할 수 있는 기능을 제공합니다.
  메시의 위치, 회전, 크기를 직접 변경할 수 있습니다.




Preview


Inspector


Scene





Preview(GIF)








How To Use


Pivot Editor 컴포넌트 추가


  
    Mesh Filter 컴포넌트를 우클릭하고 Edit Pivot을 클릭합니다.
  
  
    게임오브젝트에 Mesh Filter, Mesh Renderer 컴포넌트가 모두 존재해야 합니다.
  






Edit/Cancel 버튼


  피벗 수정 기능을 활성화/비활성화합니다.




Options


  
    
      이름
      설명
    
  
  
    
   ...
    </summary>
  

  </entry>

</feed>


