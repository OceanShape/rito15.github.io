

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://rito15.github.io/</id>
  <title>Rito15</title>
  <subtitle>Game Programmer</subtitle>
  <updated>2021-12-16T23:03:57+09:00</updated>
  <author>
    <name>Rito15</name>
    <uri>https://rito15.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://rito15.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://rito15.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator>
  <rights> © 2021 Rito15 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Docker - 4. Docker Compose 기초</title>
    <link href="https://rito15.github.io/posts/docker-compose/" rel="alternate" type="text/html" title="Docker - 4. Docker Compose 기초" />
    <published>2021-12-11T14:11:00+09:00</published>
  
    <updated>2021-12-11T14:11:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/docker-compose/</id>
    <content src="https://rito15.github.io/posts/docker-compose/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Memo" />
    
    <category term="Docker" />
    
  

  
    <summary>
      





      참고 : Docker Network 명령어



  
…


  [1] 네트워크 목록 표시

  docker network ls
  

  

  [2] 새로운 네트워크 생성

  docker network create {이름}
  

  

  [3] 기존 네트워크 제거

  docker network rm {이름}
  





Docker-compose 명령어


설명


  
…


  작업 환경을 구성하기 위해 매번 컨테이너 생성, 환경 설정, 디펜던시 설정 등을 커맨드라인을 통해 직접 입력하게 되면 굉장히 번거로운 일이 아닐 수 없다.

  따라서 docker-compose.yml 파일에 이런 내용들을 미리 작성해놓고,

  docker-compose 명령어들을 통해 아주 간편히 실행하도록 ...
    </summary>
  

  </entry>

  
  <entry>
    <title>Docker - 3. 도커의 기초와 주요 명령어</title>
    <link href="https://rito15.github.io/posts/docker-basics/" rel="alternate" type="text/html" title="Docker - 3. 도커의 기초와 주요 명령어" />
    <published>2021-12-10T22:48:00+09:00</published>
  
    <updated>2021-12-10T22:48:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/docker-basics/</id>
    <content src="https://rito15.github.io/posts/docker-basics/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Memo" />
    
    <category term="Docker" />
    
  

  
    <summary>
      





      Note


  명령어에서 {}는 반드시 작성해야 하는 파라미터, []는 작성하지 않아도 되는 선택적 파라미터를 의미한다.






1. 이미지


[1] 허브에서 이미지 찾기


  
…


  도커 허브(https://hub.docker.com/)에서 원하는 이미지를 찾을 수 있다.

  

  Containers 카테고리에서 이미지 탐색할 수 있고,

  official image는 도커에서 관리하는 공식 이미지라는 것을 의미한다.

  각 이미지를 클릭하면 세부 정보를 확인할 수 있다.

  

  

  세부 정보에서 이미지 다운로드 명령어와 사용법을 확인할 수 있다.

  





[2] 이미지 다운로드


  
…


  
    
      https://docs.docker.com/...
    </summary>
  

  </entry>

  
  <entry>
    <title>Docker - 2. Windows 10 환경에서 도커 설치하기</title>
    <link href="https://rito15.github.io/posts/install-docker-on-windows-10/" rel="alternate" type="text/html" title="Docker - 2. Windows 10 환경에서 도커 설치하기" />
    <published>2021-12-09T19:43:00+09:00</published>
  
    <updated>2021-12-09T19:43:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/install-docker-on-windows-10/</id>
    <content src="https://rito15.github.io/posts/install-docker-on-windows-10/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Memo" />
    
    <category term="Docker" />
    
  

  
    <summary>
      





      가상화(Virtualization) 지원 확인



  
…


  작업 관리자 - 성능 탭에서 가상화 : 사용이라고 표시되어 있어야 도커를 사용할 수 있다.

  

  위와 같이 표시되지 않을 경우, BIOS 설정에서 가상화 옵션을 확인하여 켜주어야 한다.





윈도우 에디션에 따른 차이



  
…


  Windows Home을 사용할 경우, WSL2를 설치하여 도커 엔진을 구동할 수 있다.

  Windows Pro를 사용할 경우, WSL2 또는 Hyper-V 기반으로 도커 엔진을 구동할 수 있다.

  Hyper-V를 사용할 수 있더라도 WSL2가 권장된다고 하니, WSL2를 설치하는 것을 추천한다.





WSL2



  
…


  Links
  
    https://docs....
    </summary>
  

  </entry>

  
  <entry>
    <title>Docker - 1. 도커 소개</title>
    <link href="https://rito15.github.io/posts/introduction-to-docker/" rel="alternate" type="text/html" title="Docker - 1. 도커 소개" />
    <published>2021-12-08T15:58:00+09:00</published>
  
    <updated>2021-12-08T15:58:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/introduction-to-docker/</id>
    <content src="https://rito15.github.io/posts/introduction-to-docker/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Memo" />
    
    <category term="Docker" />
    
  

  
    <summary>
      





      도커(Docker)란?


컨테이너(Container) 기반의 오픈소스 가상화 플랫폼.

운영체제(OS)가 아닌 컨테이너 단위로 실행 환경의 가상화를 제공한다.

이를 통해 프로그램을 컨테이너로 추상화하여 배포 및 관리를 단순하고 효율적으로 할 수 있게 한다.

도커는 리눅스(Linux) 운영체제 위에서 동작할 수 있다.

현재 사용하는 운영체제가 리눅스가 아니더라도, 가상 머신 또는 WSL 등으로 리눅스를 구동할 수 있다면 도커를 사용할 수 있다.



1. 도커의 장점


  
    애플리케이션이 실제로 동작하는 환경을 가상화 및 격리할 수 있다.
  
  
    즉, 하나의 컴퓨터(운영체제) 위에서 서로 간섭하지 않는 여러 개의 환경을 구성할 수 있다.
  
  
    프로젝트마다 운영체제 ...
    </summary>
  

  </entry>

  
  <entry>
    <title>Fisher-Yates Shuffle 간단 정리</title>
    <link href="https://rito15.github.io/posts/fisher-yates-shuffle/" rel="alternate" type="text/html" title="Fisher-Yates Shuffle 간단 정리" />
    <published>2021-12-06T18:00:00+09:00</published>
  
    <updated>2021-12-06T18:00:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/fisher-yates-shuffle/</id>
    <content src="https://rito15.github.io/posts/fisher-yates-shuffle/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Algorithm" />
    
    <category term="Algorithms" />
    
  

  
    <summary>
      





      1. Original Fisher-Yates Shuffle


알고리즘


  
…


  

  길이 n인 배열이 있다.

  

  

  [0, n-1] 범위에서 무작위 인덱스를 뽑아, 그 위치의 원소를 새로운 배열의 인덱스 0 위치에 넣는다.

  

  

  기존 배열에서 n-1 인덱스에 있는 원소를 구멍 뚫린 위치에 채워 넣는다.

  뒤에서 한 칸씩 밀어서 빈 칸을 채우는 방법도 있겠으나, 그러면 O(n)에 해당하므로 정말 굉장히 비효율적이다.

  끝에서 꺼내어 채워 넣으면 O(1)이므로 쓸만하다.

  

  

  이번에는 [0, n-2] 범위에서 무작위 인덱스를 뽑아 새로운 배열의 인덱스 1에 넣고,

  마찬가지로 n-2 인덱스의 원소를 구멍 뚫린 위치에 채워 넣는다.

  

...
    </summary>
  

  </entry>

</feed>


