

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://rito15.github.io/</id>
  <title>Rito15</title>
  <subtitle>Unity Csharp Developer</subtitle>
  <updated>2021-09-26T21:36:44+09:00</updated>
  <author>
    <name>Rito15</name>
    <uri>https://rito15.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://rito15.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://rito15.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator>
  <rights> © 2021 Rito15 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>유니티 쉐이더 - 랜덤 함수들</title>
    <link href="https://rito15.github.io/posts/unity-shader-random-functions/" rel="alternate" type="text/html" title="유니티 쉐이더 - 랜덤 함수들" />
    <published>2021-09-26T21:19:00+09:00</published>
  
    <updated>2021-09-26T21:19:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-shader-random-functions/</id>
    <content src="https://rito15.github.io/posts/unity-shader-random-functions/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity Shader" />
    
    <category term="Shader Memo" />
    
  

  
    <summary>
      





      Memo


float Random(float2 seed)
{
    return frac(sin(dot(seed, float2(73.867, 25.241))) * 39482.17593);
}

float RandomRange(float2 seed, float min, float max)
{
    float t = frac(sin(dot(seed, float2(73.867, 25.241))) * 39482.17593);
    return lerp(min, max, t);
}

float3 RandomRGB(float2 seed)
{
    float r = frac(sin(dot(seed, float2(12.586, 25.241))) * 39482.17593);
    float g = frac(c...
    </summary>
  

  </entry>

  
  <entry>
    <title>자료구조 - 힙(Heap), 우선순위 큐(Priority Queue)</title>
    <link href="https://rito15.github.io/posts/heap-priority-queue/" rel="alternate" type="text/html" title="자료구조 - 힙(Heap), 우선순위 큐(Priority Queue)" />
    <published>2021-09-24T21:03:00+09:00</published>
  
    <updated>2021-09-24T21:03:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/heap-priority-queue/</id>
    <content src="https://rito15.github.io/posts/heap-priority-queue/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Algorithm" />
    
    <category term="Data Structure" />
    
  

  
    <summary>
      





      트리 자료 구조




트리(Tree)


  재귀적 계층 구조
  노드로 이루어져 있다.
  최초의 루트 노드에서부터 시작하며, 하나의 부모 노드는 여러 개의 자식 노드를 가진다.






이진 트리(Binary Tree)


  각 노드가 최대 두 개의 자식만 가질 수 있는 트리 구조






포화 이진 트리(Perfect Binary Tree)


  모든 잎 노드(Leaf Node : 자식이 없는 노드)가 같은 계층에 위치한 노드
  완전한 삼각형 꼴을 이룬 이진 트리 구조를 의미한다.






완전 이진 트리(Complete Binary Tree)


  마지막 계층 이전까지의 계층이 포화 이진 트리를 이룬 구조
  마지막 계층은 왼쪽에서부터 채워지는 구조
  일차원 배열을 통해 표현될 ...
    </summary>
  

  </entry>

  
  <entry>
    <title>C# XmlReader</title>
    <link href="https://rito15.github.io/posts/cs-xml-reader/" rel="alternate" type="text/html" title="C# XmlReader" />
    <published>2021-09-21T21:52:00+09:00</published>
  
    <updated>2021-09-21T21:52:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/cs-xml-reader/</id>
    <content src="https://rito15.github.io/posts/cs-xml-reader/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="C#" />
    
    <category term="C# Memo" />
    
  

  
    <summary>
      





      XML


eXTensible Markup Language의 약자로, W3C에서 개발된 마크업 언어.

XML의 대표적인 파생 언어로 HTML이 있다.

기본적인 XML 파일의 확장자는 .xml이다.



XML 문법



   
…


  예시
  
    패킷 데이터 목록 정의
  

  &amp;lt;?xml version="1.0" encoding="utf-8" ?&amp;gt;

&amp;lt;!-- Packet Data List --&amp;gt;
&amp;lt;packets&amp;gt; &amp;lt;!-- 루트 태그 --&amp;gt;
    &amp;lt;packet name="Echo"&amp;gt;
    &amp;lt;/packet&amp;gt;
    
    &amp;lt;packet name="Number"&amp;gt;
        &amp;lt;int name="number...
    </summary>
  

  </entry>

  
  <entry>
    <title>(Amplify) Spawn Effect Shader</title>
    <link href="https://rito15.github.io/posts/unity-amplify-spawn-effect-shader/" rel="alternate" type="text/html" title="(Amplify) Spawn Effect Shader" />
    <published>2021-09-18T00:01:00+09:00</published>
  
    <updated>2021-09-18T06:09:10+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-amplify-spawn-effect-shader/</id>
    <content src="https://rito15.github.io/posts/unity-amplify-spawn-effect-shader/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity Shader" />
    
    <category term="Amplify Shader" />
    
  

  
    <summary>
      





      Summary



  
    월드 좌표의 한 점에서부터 스폰되는 효과
  
  
    월드 공간의 버텍스 이동, 그리드 패턴의 디졸브 효과로 이루어져 있다.
  




Preview








Properties





  
    
      프로퍼티명
      설명
      기본 값
      범위
    
  
  
    
      Main Texture
      메인 텍스쳐(Albedo)
       
       
    
    
      Grid Color
      그리드 패턴 색상(HDR)
       
       
    
    
      Grid Tiling X
      그리드 X축 타일링
      48
      2 ~ 48
    
    
   ...
    </summary>
  

  </entry>

  
  <entry>
    <title>유니티 - 모델 트랜스폼 구조 최적화하기</title>
    <link href="https://rito15.github.io/posts/unity-optimize-model-transform/" rel="alternate" type="text/html" title="유니티 - 모델 트랜스폼 구조 최적화하기" />
    <published>2021-09-16T00:02:00+09:00</published>
  
    <updated>2021-09-17T04:13:36+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-optimize-model-transform/</id>
    <content src="https://rito15.github.io/posts/unity-optimize-model-transform/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Optimization" />
    
  

  
    <summary>
      





      문제점


Skinned Mesh가 적용되는 게임 오브젝트의 경우,

하이라키에서 트랜스폼 구조를 확인해보면



이렇게 Bone 별로 각각 존재하여, 굉장히 많은 게임오브젝트들로 이루어져 있다.

그런데 유니티 엔진에서는 부모 게임 오브젝트의 트랜스폼에 변경사항이 생기면

모든 자식 트랜스폼에 변경이 발생한다.

한마디로, 위와 같이 무수히 많은 자식 오브젝트가 존재하면 성능에 좋지 않다는 의미이다.



해결책


Project 윈도우에서 해당 모델 파일을 선택한다.

인스펙터 창에서 Rig 탭을 클릭한다.



여기서 만약 Optimize Game Objects 옵션이 나타나지 않는다면

Animation Type을 Generic 또는 Humanoid로 바꾸고,

Avatar Definition을...
    </summary>
  

  </entry>

</feed>


