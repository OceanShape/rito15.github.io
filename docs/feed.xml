

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://rito15.github.io/</id>
  <title>Rito15</title>
  <subtitle>Unity Csharp Developer</subtitle>
  <updated>2021-02-02T03:35:49+09:00</updated>
  <author>
    <name>Rito15</name>
    <uri>https://rito15.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://rito15.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://rito15.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator>
  <rights> © 2021 Rito15 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Vertex/Fragment Shader Bible</title>
    <link href="https://rito15.github.io/posts/unity-vertex-fragment-shader-bible/" rel="alternate" type="text/html" title="Vertex/Fragment Shader Bible" />
    <published>2021-02-02T01:00:00+09:00</published>
  
    <updated>2021-02-02T01:00:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-vertex-fragment-shader-bible/</id>
    <content src="https://rito15.github.io/posts/unity-vertex-fragment-shader-bible/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity Shader" />
    
    <category term="Shader Study" />
    
  

  
    <summary>
      





      Vertex/Fragment Shader 구성


  


TODO


  




References


  


    </summary>
  

  </entry>

  
  <entry>
    <title>Surface Shader Bible</title>
    <link href="https://rito15.github.io/posts/unity-surface-shader-bible/" rel="alternate" type="text/html" title="Surface Shader Bible" />
    <published>2021-02-02T01:00:00+09:00</published>
  
    <updated>2021-02-02T01:00:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-surface-shader-bible/</id>
    <content src="https://rito15.github.io/posts/unity-surface-shader-bible/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity Shader" />
    
    <category term="Shader Study" />
    
  

  
    <summary>
      





      Surface Shader 기본 구성

Shader "Custom/SurfaceShader01"
{
    Properties
    {
        _Color ("Color", Color) = (1,1,1,1)
        _MainTex ("Albedo (RGB)", 2D) = "white" {}
    }
    SubShader
    {
        Tags { "RenderType"="Opaque" }
        LOD 200

        CGPROGRAM

        #pragma surface surf Standard fullforwardshadows
        #pragma target 3.0

        sampler2D _MainTex;

        st...
    </summary>
  

  </entry>

  
  <entry>
    <title>멀티패스 쉐이더 코드 깔끔하게 작성하기</title>
    <link href="https://rito15.github.io/posts/unity-smart-multipass-code/" rel="alternate" type="text/html" title="멀티패스 쉐이더 코드 깔끔하게 작성하기" />
    <published>2021-02-02T00:00:00+09:00</published>
  
    <updated>2021-02-02T00:00:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-smart-multipass-code/</id>
    <content src="https://rito15.github.io/posts/unity-smart-multipass-code/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity Shader" />
    
    <category term="Shader Study" />
    
  

  
    <summary>
      





      Shader "A/B"
{
	Properties
	{
		_MainTex ("Texture", 2D) = "black" {}
	}

	CGINCLUDE
	#include "UnityCG.cginc"

        struct appdata
	{
		float4 vertex : POSITION;
		float2 uv : TEXCOORD0;
	};
	struct v2f
	{
		float4 vertex:SV_POSITION;
		float2 uv:TEXCOORD0;
	};

	sampler2D _MainTex;

	v2f vert1 (appdata_img v)
	{
		v2f o;
                // ...
		return o;
	}

	fixed4 frag1 (v2f i) : SV_Tar...
    </summary>
  

  </entry>

  
  <entry>
    <title>C++ 스택 메모리 동적 할당</title>
    <link href="https://rito15.github.io/posts/cpp-stack-memory-allocation/" rel="alternate" type="text/html" title="C++ 스택 메모리 동적 할당" />
    <published>2021-02-01T18:45:00+09:00</published>
  
    <updated>2021-02-01T18:45:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/cpp-stack-memory-allocation/</id>
    <content src="https://rito15.github.io/posts/cpp-stack-memory-allocation/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="C++" />
    
    <category term="C++ Memo" />
    
  

  
    <summary>
      





      Memo


  
    _alloca
    
      스택에 메모리를 동적으로 할당해준다.
      함수의 리턴으로 전달하면 안된다.
      블록이 종료되면 자동으로 할당 해제된다.
      공간 할당 불가능한 경우 Stack Overflow 에러가 발생할 수 있으니 주의
      예외가 발생한 경우 구조적 예외처리(SEH)로 받아야 함
    
  



  
    
      size_t size
      할당할 배열 크기(길이 * sizeof(타입))
    
    
      return void*
      할당된 배열의 주소(타입 캐스팅 필요)
    
  


int length = 10;

// 원했던 것 : char message[length]
// 하지만 배열의 크...
    </summary>
  

  </entry>

  
  <entry>
    <title>OpenGL 공부 - 05</title>
    <link href="https://rito15.github.io/posts/opengl-study-05/" rel="alternate" type="text/html" title="OpenGL 공부 - 05" />
    <published>2021-02-01T17:42:00+09:00</published>
  
    <updated>2021-02-01T17:42:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/opengl-study-05/</id>
    <content src="https://rito15.github.io/posts/opengl-study-05/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="OpenGL" />
    
    <category term="OpenGL Study" />
    
  

  
    <summary>
      





      목표


  OpenGL의 쉐이더에 대한 이해
  간단한 vertex, fragment 쉐이더 작성, 컴파일 및 실행




OpenGL의 쉐이더



  
    Vertex&amp;amp;Fragment Shader
    
      OpenGL에서 거의 90%의 비중을 차지
    
  
  
    Vertex Shader
    
      하나의 정점 당 한 번씩 실행된다.
      layout을 통해 정점 속성의 위치를 입력받는다.
      입력 : 정점 데이터
      출력 : 클립 스페이스의 정점 데이터
    
  
  
    Fragment Shader
    
      하나의 픽셀 당 한 번씩 실행된다.
      입력 : 프래그먼트 데이터(래스터라이저가 만들어줌)
      ...
    </summary>
  

  </entry>

</feed>


