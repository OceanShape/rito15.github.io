

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://rito15.github.io/</id>
  <title>Rito15</title>
  <subtitle>Unity Csharp Developer</subtitle>
  <updated>2021-02-15T18:09:46+09:00</updated>
  <author>
    <name>Rito15</name>
    <uri>https://rito15.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://rito15.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://rito15.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator>
  <rights> © 2021 Rito15 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>OpenGL 공부 - 19 - Shader, Transform Class</title>
    <link href="https://rito15.github.io/posts/opengl-study-19/" rel="alternate" type="text/html" title="OpenGL 공부 - 19 - Shader, Transform Class" />
    <published>2021-02-15T15:30:00+09:00</published>
  
    <updated>2021-02-15T15:30:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/opengl-study-19/</id>
    <content src="https://rito15.github.io/posts/opengl-study-19/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="OpenGL" />
    
    <category term="OpenGL Study" />
    
  

  
    <summary>
      





      목표


  쉐이더, 트랜스폼 클래스화하기




1. 쉐이더의 클래스화


shader.hpp 작성

shader.hpp 파일에 Shader 클래스를 작성한다.

기존에 functions.hpp와 main.cpp에서 사용하던 쉐이더 부분을 모두 Shader 클래스로 옮겨준다.

// shader.hpp

class Shader
{
private:
    GLuint id;

    GLuint CompileShader(const GLenum&amp;amp; shaderType, const char* fileDir);
    void LinkProgram(const GLuint&amp;amp; vertexShader, const GLuint&amp;amp; fragmentShader, const GLuint&amp;amp; geo...
    </summary>
  

  </entry>

  
  <entry>
    <title>OpenGL 공부 - 18 - Specular, Rim Light</title>
    <link href="https://rito15.github.io/posts/opengl-study-18/" rel="alternate" type="text/html" title="OpenGL 공부 - 18 - Specular, Rim Light" />
    <published>2021-02-14T15:38:00+09:00</published>
  
    <updated>2021-02-14T15:38:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/opengl-study-18/</id>
    <content src="https://rito15.github.io/posts/opengl-study-18/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="OpenGL" />
    
    <category term="OpenGL Study" />
    
  

  
    <summary>
      





      목표


  Specular Lighting, Rim Lighting 적용




공부 내용


필요한 유니폼 변수 전달

World View 벡터가 필요하므로, 이를 구하기 위한 카메라 위치를 전달해준다.

// main.cpp

glUniform3fv(glGetUniformLocation(shaderProgram, "cameraPos"), 1, glm::value_ptr(camPos));



프래그먼트 쉐이더

우선 라이팅 계산을 위한 벡터들을 만들어준다.

uniform vec3 lightPos0; // Main Light World Position
uniform vec3 cameraPos; // Camera World Position

void main()
{
    vec3 worldNorm...
    </summary>
  

  </entry>

  
  <entry>
    <title>Custom Plane Mesh Generator</title>
    <link href="https://rito15.github.io/posts/custom-plane-mesh-generator/" rel="alternate" type="text/html" title="Custom Plane Mesh Generator" />
    <published>2021-02-14T03:06:00+09:00</published>
  
    <updated>2021-02-14T03:06:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/custom-plane-mesh-generator/</id>
    <content src="https://rito15.github.io/posts/custom-plane-mesh-generator/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Toys" />
    
  

  
    <summary>
      





      Note


  Plane을 원하는 너비, 해상도로 만들 수 있게 해주는 컴포넌트


Preview






How to Use


  빈 게임오브젝트를 생성합니다.
  PlaneMeshGenerator 컴포넌트를 추가합니다.
  옵션을 설정하고 마테리얼을 인스펙터의 Material에 넣습니다.
  Generate 버튼을 누릅니다.


Download


  PlaneMeshGenerator.zip


    </summary>
  

  </entry>

  
  <entry>
    <title>물 쉐이더 만들기</title>
    <link href="https://rito15.github.io/posts/water-shader/" rel="alternate" type="text/html" title="물 쉐이더 만들기" />
    <published>2021-02-13T19:24:00+09:00</published>
  
    <updated>2021-02-14T18:31:57+09:00</updated>
  
    <id>https://rito15.github.io/posts/water-shader/</id>
    <content src="https://rito15.github.io/posts/water-shader/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity Shader" />
    
    <category term="Shader Study" />
    
  

  
    <summary>
      





      목표


  서피스 쉐이더로 물 쉐이더 만들기




목차


  1. 물 쉐이더 기초
  2. 프레넬 공식 적용
  3. 물 흐르게 하기
  4. 스페큘러 적용
  5. 파도 만들기
  6. 투과율 제어하기
  7. 최종 결과




준비물


  큐브맵 텍스쳐 기반 스카이박스
  물 노멀맵 텍스쳐
  물에 빠질 로봇




물 쉐이더 기초


메시는 유니티의 기본적인 Plane을 이용한다.

노멀은 노멀맵을 넣어 적용하고, 간단히 float로 타일링이 가능하도록 _Tiling 프로퍼티를 추가한다.

그리고 _Strength 프로퍼티를 통해 노멀의 강도를 조절할 수 있게 한다.



Shader "Rito/Water"
{
    Properties
    {
        _BumpMap("Norma...
    </summary>
  

  </entry>

  
  <entry>
    <title>OpenGL 공부 - 17 - Ambient, Diffuse Lighting</title>
    <link href="https://rito15.github.io/posts/opengl-study-17/" rel="alternate" type="text/html" title="OpenGL 공부 - 17 - Ambient, Diffuse Lighting" />
    <published>2021-02-13T15:32:00+09:00</published>
  
    <updated>2021-02-13T15:32:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/opengl-study-17/</id>
    <content src="https://rito15.github.io/posts/opengl-study-17/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="OpenGL" />
    
    <category term="OpenGL Study" />
    
  

  
    <summary>
      





      목표


  Ambient, Diffuse 라이팅 구현




공부 내용


버텍스에 노멀 정보 추가

struct Vertex
{
    glm::vec3 position;
    glm::vec3 color;
    glm::vec2 texcoord;
    glm::vec3 normal;
};

Vertex vertices[] =
{
    // Position                    // Color                     // TexCoord            // Normal                                                
    glm::vec3(-0.5f,  0.5f, 0.0f), glm::vec3(1.0f, 0.0f, 0.0f...
    </summary>
  

  </entry>

</feed>


