

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://rito15.github.io/</id>
  <title>Rito15</title>
  <subtitle>Unity Csharp Developer</subtitle>
  <updated>2021-05-10T03:42:07+09:00</updated>
  <author>
    <name>Rito15</name>
    <uri>https://rito15.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://rito15.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://rito15.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator>
  <rights> © 2021 Rito15 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>스트링 포맷 정리</title>
    <link href="https://rito15.github.io/posts/cs-string-format/" rel="alternate" type="text/html" title="스트링 포맷 정리" />
    <published>2021-05-09T21:00:00+09:00</published>
  
    <updated>2021-05-09T21:00:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/cs-string-format/</id>
    <content src="https://rito15.github.io/posts/cs-string-format/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="C#" />
    
    <category term="C# Memo" />
    
  

  
    <summary>
      





      NOTE



  , : 스트링의 범위(공간) 설정
  : : 출력 포맷 설정




좌우 정렬


$"{value, 10}"



  10칸 범위 내에서 우측 정렬




$"{value, -10}"



  10칸 범위 내에서 좌측 정렬




숫자 왼쪽에 공백 삽입하기


$"{value :   0}"



  :, 0 사이의 공백 크기만큼 고정된 공백을 삽입
  값의 왼쪽에 공백 3칸을 항상 삽입
  오른쪽은 설정 불가




자리수 설정


$"{value :000}"



  세 번째 자리까지 채워서 표현(빈 칸은 0으로 채움)
  실수일 경우, 소수점 첫째자리에서 반올림하여 정수로 표현




$"{value :0.00}"



  정수부는 첫째 자리까지 반드시 표현(빈칸 0으로 채움)
 ...
    </summary>
  

  </entry>

  
  <entry>
    <title>마우스 이벤트를 통과시킬 수 있는 컨트롤 만들기</title>
    <link href="https://rito15.github.io/posts/cs-winform-pass-through-mouse-events/" rel="alternate" type="text/html" title="마우스 이벤트를 통과시킬 수 있는 컨트롤 만들기" />
    <published>2021-05-09T01:30:00+09:00</published>
  
    <updated>2021-05-09T01:30:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/cs-winform-pass-through-mouse-events/</id>
    <content src="https://rito15.github.io/posts/cs-winform-pass-through-mouse-events/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="C#" />
    
    <category term="C# Winform" />
    
  

  
    <summary>
      





      목표



  마우스 이벤트를 모두 무시할 수 있는 컨트롤(버튼, 레이블 등) 만들기




방법



  
    특정 컨트롤 클래스(Button, Label, …)를 상속받는 클래스를 작성한다.
  
  
    아래와 같이 프로퍼티와 메소드를 작성한다.
  


public bool Ignored { get; set; } = false;

protected override void WndProc(ref Message m)
{
    const int WM_NCHITTEST = 0x0084;
    const int HTTRANSPARENT = (-1);

    if (Ignored &amp;amp;&amp;amp; m.Msg == WM_NCHITTEST)
    {
        m.Result = (IntP...
    </summary>
  

  </entry>

  
  <entry>
    <title>윈폼 중복 실행 방지</title>
    <link href="https://rito15.github.io/posts/cs-winform-prevent-duplication/" rel="alternate" type="text/html" title="윈폼 중복 실행 방지" />
    <published>2021-05-06T02:02:00+09:00</published>
  
    <updated>2021-05-06T02:02:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/cs-winform-prevent-duplication/</id>
    <content src="https://rito15.github.io/posts/cs-winform-prevent-duplication/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="C#" />
    
    <category term="C# Winform" />
    
  

  
    <summary>
      





      Memo



  Program.cs에서 Main() 메소드 지우고 아래 내용 복붙하기


/// &amp;lt;summary&amp;gt;
/// 해당 응용 프로그램의 주 진입점입니다.
/// &amp;lt;/summary&amp;gt;
[STAThread]
static void Main()
{
    if (!IsDuplicated())
        RunApplication();
}

// 이미 실행 중인 프로세스(중복 프로세스)가 있는지 확인
private static bool IsDuplicated()
{
    try
    {
        int processCount = 0;

        System.Diagnostics.Process[] processes = System.Diagnostics.Process....
    </summary>
  

  </entry>

  
  <entry>
    <title>Notify Icon 사용하기</title>
    <link href="https://rito15.github.io/posts/cs-winform-notifyicon/" rel="alternate" type="text/html" title="Notify Icon 사용하기" />
    <published>2021-05-06T02:02:00+09:00</published>
  
    <updated>2021-05-06T02:02:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/cs-winform-notifyicon/</id>
    <content src="https://rito15.github.io/posts/cs-winform-notifyicon/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="C#" />
    
    <category term="C# Winform" />
    
  

  
    <summary>
      





      Memo


1. 도구

  NotifyIcon 추가
  ContextMenuStrip 추가




2. 속성

  Form - Icon에 .ico 아이콘 파일 등록
  NotifyIcon - Icon에 아이콘 등록(안하면 컨텍스트 안생김)
  NotifyIcon - ContextMenuStrip 연결




3. 필드, 메소드 추가

//FormClosing 이벤트로 종료 가능 여부
private bool closeAllowed = false;

private void ShowForm()
{
    // 폼 등장
    this.Show();

    //창의 속성을 최소화-&amp;gt;보통으로 바꿔줌
    this.WindowState = FormWindowState.Normal;

    // 폼에 ...
    </summary>
  

  </entry>

  
  <entry>
    <title>깃 관련 메모 모음</title>
    <link href="https://rito15.github.io/posts/memo-git/" rel="alternate" type="text/html" title="깃 관련 메모 모음" />
    <published>2021-05-03T17:00:00+09:00</published>
  
    <updated>2021-05-07T02:00:05+09:00</updated>
  
    <id>https://rito15.github.io/posts/memo-git/</id>
    <content src="https://rito15.github.io/posts/memo-git/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Memo" />
    
  

  
    <summary>
      





      

Git 구성


[1] Local

[1-1] Working Directory

  작업 디렉토리 : 윈도우 내 폴더
  git add 명령어를 통해 변경된 파일들을 Staging Area로 옮길 수 있다.


[1-2] Staging Area

  커밋할 대상들을 저장하는 임시 저장소
  파일 변경사항 스냅샷을 안전하게 보관하지는 않는다.
  git commit 명령어를 통해 스테이징 영역 내의 파일들을 .git Directory로 옮길 수 있다.


[1-3] .git Directory (History)

  커밋 히스토리를 저장한다.
  커밋 버전별로 내용을 관리할 수 있다.
  원격 리포지토리에 push하기 전까지, 로컬 .git 폴더 내부에서 변경된 파일들의 스냅샷을 보관한다.




[2...
    </summary>
  

  </entry>

</feed>


