

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://rito15.github.io/</id>
  <title>Rito15</title>
  <subtitle>Unity Csharp Developer</subtitle>
  <updated>2021-06-30T22:39:15+09:00</updated>
  <author>
    <name>Rito15</name>
    <uri>https://rito15.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://rito15.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://rito15.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator>
  <rights> © 2021 Rito15 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>에디터 모드에서 게임 뷰 자동으로 갱신하기</title>
    <link href="https://rito15.github.io/posts/unity-auto-update-game-view/" rel="alternate" type="text/html" title="에디터 모드에서 게임 뷰 자동으로 갱신하기" />
    <published>2021-06-30T22:00:00+09:00</published>
  
    <updated>2021-06-30T22:00:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-auto-update-game-view/</id>
    <content src="https://rito15.github.io/posts/unity-auto-update-game-view/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Editor Utilities" />
    
  

  
    <summary>
      





      Summary


플레이 모드에 진입하지 않으면 게임 뷰는 GUI에 변화가 있을 때만 갱신됩니다.

따라서 쉐이더를 통해 각종 애니메이션이나 효과를 만들고 마테리얼을 통해 적용해도

에디터 모드에서는 이를 정상적으로 확인할 수 없습니다.

이 애셋은 에디터 모드에서도 마테리얼 효과를 정상적으로 확인할 수 있게 합니다.



How To Use


  
    첨부된 Game View Auto Updater 폴더를 통째로 유니티 프로젝트에 넣습니다.
  
  
    에디터 상단의 플레이 버튼 좌측에 위치한 Auto Update Game View 버튼을 활성화/비활성화합니다.
  






Download


  Game-View-Auto-Updater.zip



    </summary>
  

  </entry>

  
  <entry>
    <title>게임 뷰를 강제로 업데이트하기</title>
    <link href="https://rito15.github.io/posts/unity-update-game-view/" rel="alternate" type="text/html" title="게임 뷰를 강제로 업데이트하기" />
    <published>2021-06-30T21:00:00+09:00</published>
  
    <updated>2021-06-30T21:00:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-update-game-view/</id>
    <content src="https://rito15.github.io/posts/unity-update-game-view/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Editor Memo" />
    
  

  
    <summary>
      





      Memo


  
    플레이 모드에 진입하지 않고 게임 뷰에서 쉐이더 애니메이션을 확인하고 싶을 때 사용한다.
  
  
    아무 게임오브젝트나 붙잡고 Dirty로 만들어주면 게임 뷰가 업데이트 된다.
  


EditorUtility.SetDirty(GameObject.FindObjectOfType&amp;lt;Transform&amp;gt;());





  다음과 같은 Repaint 메소드들은 통하지 않는다.


EditorWindow focused = EditorWindow.focusedWindow;
focused.Repaint();
UnityEditorInternal.InternalEditorUtility.RepaintAllViews();
SceneView.RepaintAll();
if (GUI.c...
    </summary>
  

  </entry>

  
  <entry>
    <title>Main Thread Dispatcher</title>
    <link href="https://rito15.github.io/posts/unity-main-thread-dispatcher/" rel="alternate" type="text/html" title="Main Thread Dispatcher" />
    <published>2021-06-30T04:04:00+09:00</published>
  
    <updated>2021-06-30T04:04:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-main-thread-dispatcher/</id>
    <content src="https://rito15.github.io/posts/unity-main-thread-dispatcher/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Toys" />
    
  

  
    <summary>
      





      Summary


  
    워커 스레드에서 유니티 메인 스레드에 작업을 위임할 수 있게 하는 싱글톤 클래스
  
  
    https://github.com/PimDeWitte/UnityMainThreadDispatcher의 코드를 조금 더 사용하기 편리하게 살짝 수정
  


Usage Example


private MainThreadDispatcher mtd;

private void Start()
{
    mtd = MainThreadDispatcher.Instance;
    Task.Run(() =&amp;gt; TestBody());
}

private async void TestBody()
{
    int res1 = -1, res2 = -1;

    await Task.Delay(5...
    </summary>
  

  </entry>

  
  <entry>
    <title>워커 스레드에서 메인 스레드에 작업 요청하기</title>
    <link href="https://rito15.github.io/posts/unity-request-job-from-worker-to-main-thread/" rel="alternate" type="text/html" title="워커 스레드에서 메인 스레드에 작업 요청하기" />
    <published>2021-06-30T01:11:00+09:00</published>
  
    <updated>2021-06-30T01:11:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-request-job-from-worker-to-main-thread/</id>
    <content src="https://rito15.github.io/posts/unity-request-job-from-worker-to-main-thread/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Study" />
    
  

  
    <summary>
      





      삽질


  문득 떠오른 순수한 호기심에 삽질해보는 포스팅입니다.
  의식의 흐름에 따라 작성합니다.




목표


  워커 스레드에서 메인 스레드에 작업 요청하고, 결과를 기다렸다가 받아서 처리하기




배경지식



  
    메인 스레드가 아닌, 다른 스레드들을 워커 스레드(Worker Thread, 작업자 스레드)라고 부른다.
  
  
    유니티 API(트랜스폼, 컴포넌트, 게임오브젝트, …)의 호출은 메인 스레드에서만 가능하다.
  
  
    워커 스레드에서 유니티 API를 호출하면 UnityException이 호출되면서 해당 작업이 거부된다.
  
  
    멀티 스레드 작업에서는 읽고 쓰는 작업에 대해 반드시 동기화를 수행해야 한다.
  
  
    동기화를 하지 않으면 ...
    </summary>
  

  </entry>

  
  <entry>
    <title>간단한 앰플리파이 쉐이더 예제 모음</title>
    <link href="https://rito15.github.io/posts/simple-amplify-shader-examples/" rel="alternate" type="text/html" title="간단한 앰플리파이 쉐이더 예제 모음" />
    <published>2021-06-27T04:24:00+09:00</published>
  
    <updated>2021-06-30T05:02:29+09:00</updated>
  
    <id>https://rito15.github.io/posts/simple-amplify-shader-examples/</id>
    <content src="https://rito15.github.io/posts/simple-amplify-shader-examples/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity Shader" />
    
    <category term="Amplify Shader" />
    
  

  
    <summary>
      





      1. Vertex


Scale Up and Down





Heartbeat



( max( sin(T * F), 1-S ) - (1-S) ) * A

T : Time
F : Frequency
S : Sensitivity
A : Amplitude




World Position Offset





World Position Offset (Keep Scale)





Vertex Displacement






  Noise Generator 노드에 UV 입력이 있다고 해서 진짜로 UV를 넣으면 안되고, 대신 Vertex Position을 넣어야 한다.




2. Color


UV Mask




  Step의 A, B 입력을 서로 바꿀 경우, 마스크 색상 반전




Smooth UV ...
    </summary>
  

  </entry>

</feed>


