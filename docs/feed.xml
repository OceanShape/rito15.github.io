

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://rito15.github.io/</id>
  <title>Rito15</title>
  <subtitle>Unity Csharp Developer</subtitle>
  <updated>2021-08-28T23:30:27+09:00</updated>
  <author>
    <name>Rito15</name>
    <uri>https://rito15.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://rito15.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://rito15.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator>
  <rights> © 2021 Rito15 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>유니티 에디터 - 벡터 필드의 X,Y,Z,W 레이블 변경하기</title>
    <link href="https://rito15.github.io/posts/unity-editor-change-vector-field-labels/" rel="alternate" type="text/html" title="유니티 에디터 - 벡터 필드의 X,Y,Z,W 레이블 변경하기" />
    <published>2021-08-27T22:33:00+09:00</published>
  
    <updated>2021-08-27T22:33:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-editor-change-vector-field-labels/</id>
    <content src="https://rito15.github.io/posts/unity-editor-change-vector-field-labels/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Editor Memo" />
    
  

  
    <summary>
      





      Note





  
    Vector2, Vector3, Vector4 필드에는 X, Y, Z, W 레이블이 표시되며, 일반적인 방법으로는 변경할 수 없다.
  
  
    리플렉션을 이용하면 이를 변경할 수 있다.
  






// using System.Reflection;
// 커스텀 에디터 클래스 내에서 작성

private Vector2 vec2;
private Vector3 vec3;
private Vector4 vec4;

private static FieldInfo  fiVector4FieldLables;
private static GUIContent[] vector4FieldLables;

public override void OnInspectorGUI()
{
    Bind...
    </summary>
  

  </entry>

  
  <entry>
    <title>유니티 에디터 - 미리 정의된 GUIStyle 목록</title>
    <link href="https://rito15.github.io/posts/unity-editor-predefined-gui-styles/" rel="alternate" type="text/html" title="유니티 에디터 - 미리 정의된 GUIStyle 목록" />
    <published>2021-08-27T21:59:00+09:00</published>
  
    <updated>2021-08-27T21:59:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-editor-predefined-gui-styles/</id>
    <content src="https://rito15.github.io/posts/unity-editor-predefined-gui-styles/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Editor Memo" />
    
  

  
    <summary>
      





      목록


"box"
"button"
"toggle"
"label"
"window"
"textfield"
"textarea"
"horizontalslider"
"horizontalsliderthumb"
"verticalslider"
"verticalsliderthumb"
"horizontalscrollbar"
"horizontalscrollbarthumb"
"horizontalscrollbarleftbutton"
"horizontalscrollbarrightbutton"
"verticalscrollbar"
"verticalscrollbarthumb"
"verticalscrollbarupbutton"
"verticalscrollbardownbutton"
"scrollview"



  NOTE : Edit...
    </summary>
  

  </entry>

  
  <entry>
    <title>유니티 에디터 하이라키 윈도우 관련 코드 모음</title>
    <link href="https://rito15.github.io/posts/unity-editor-hierarchy-window/" rel="alternate" type="text/html" title="유니티 에디터 하이라키 윈도우 관련 코드 모음" />
    <published>2021-08-27T18:00:00+09:00</published>
  
    <updated>2021-08-27T18:00:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-editor-hierarchy-window/</id>
    <content src="https://rito15.github.io/posts/unity-editor-hierarchy-window/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Editor Memo" />
    
  

  
    <summary>
      





      Memo

// 1. 하이라키 윈도우 타입
public static Type HierarchyWindowType
{
    get
    {
        if (_hierarchyWindowType == null)
            _hierarchyWindowType = 
                typeof(EditorWindow).Assembly.GetTypes()
                .Where(t =&amp;gt; t.Name == "SceneHierarchyWindow")
                .First();

        return _hierarchyWindowType;
    }
}
private static Type _hierarchyWindowType;


//...
    </summary>
  

  </entry>

  
  <entry>
    <title>유니티 에디터 GUI - 미끄러지는 On-Off 버튼</title>
    <link href="https://rito15.github.io/posts/unity-editor-sliding-onoff-button/" rel="alternate" type="text/html" title="유니티 에디터 GUI - 미끄러지는 On-Off 버튼" />
    <published>2021-08-26T03:45:00+09:00</published>
  
    <updated>2021-08-26T03:45:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-editor-sliding-onoff-button/</id>
    <content src="https://rito15.github.io/posts/unity-editor-sliding-onoff-button/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Editor Memo" />
    
  

  
    <summary>
      





      Memo




bool onOff = true;
bool onOffMoving = false;
float onOffPos = 0f;
string onOffStr = "On";

private void DrawMovingOnOffButton()
{
    const float LEFT = 15f;
    const float RIGHT = 52f;
    const float WIDTH = 40f;
    const float HEIGHT = 20f;
    const float MOVE_SPEED = 1f;

    Rect rect = GUILayoutUtility.GetRect(1f, HEIGHT);

    Rect bgRect = new Rect(rect);
    bgRect.x = LEFT...
    </summary>
  

  </entry>

  
  <entry>
    <title>유니티 에디터 GUI의 특정 컨트롤 포커스 여부 확인하기</title>
    <link href="https://rito15.github.io/posts/unity-editor-check-focused/" rel="alternate" type="text/html" title="유니티 에디터 GUI의 특정 컨트롤 포커스 여부 확인하기" />
    <published>2021-08-26T03:45:00+09:00</published>
  
    <updated>2021-08-26T03:45:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-editor-check-focused/</id>
    <content src="https://rito15.github.io/posts/unity-editor-check-focused/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Editor Memo" />
    
  

  
    <summary>
      





      Memo


// 다음에 나올 GUI 컨트롤에 이름 부여
GUI.SetNextControlName("Foooooooocus");

// GUI 그리기
EditorGUI.TextArea(rect, value, inputStyle);

// 포커스 여부 확인
if(GUI.GetNameOfFocusedControl() == "Foooooooocus")
{
    // Do Something..
}


    </summary>
  

  </entry>

</feed>


