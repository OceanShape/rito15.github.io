

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://rito15.github.io/</id>
  <title>Rito15</title>
  <subtitle>Unity Csharp Developer</subtitle>
  <updated>2021-01-31T00:14:01+09:00</updated>
  <author>
    <name>Rito15</name>
    <uri>https://rito15.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://rito15.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://rito15.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator>
  <rights> © 2021 Rito15 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Input Binding System</title>
    <link href="https://rito15.github.io/posts/input-binding-system/" rel="alternate" type="text/html" title="Input Binding System" />
    <published>2021-01-30T16:18:00+09:00</published>
  
    <updated>2021-01-31T00:12:14+09:00</updated>
  
    <id>https://rito15.github.io/posts/input-binding-system/</id>
    <content src="https://rito15.github.io/posts/input-binding-system/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Study" />
    
  

  
    <summary>
      





      목표


  에디터 및 인게임에서 언제든 기능에 연결된 사용자 마우스, 키보드 바인딩을 변경할 수 있는 기능 구현
  전체 입력 바인딩을 직렬화하여 저장하고 불러올 수 있는 기능 구현




유니티의 입력 시스템


  유니티에는 2가지 Input System이 있다.
  첫 번째는 Input.Get~ 꼴의 메소드를 이용해 이번 프레임에 해당 입력이 있었는지 검사하는 레거시 시스템
  
    두 번째는 2019년 소개된 New Input System.

  
  New Input System을 사용하려면
    
      패키지 매니저에서 Input System을 설치하고,
      프로젝트 세팅에서 Active Input Handling을 지정하고,
      입력 시스템을 위한 스크립터블 오브...
    </summary>
  

  </entry>

  
  <entry>
    <title>OpenGL 공부 - 03</title>
    <link href="https://rito15.github.io/posts/opengl-study-03/" rel="alternate" type="text/html" title="OpenGL 공부 - 03" />
    <published>2021-01-29T22:07:00+09:00</published>
  
    <updated>2021-01-29T22:07:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/opengl-study-03/</id>
    <content src="https://rito15.github.io/posts/opengl-study-03/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="OpenGL" />
    
    <category term="OpenGL Study" />
    
  

  
    <summary>
      





      목표


  버텍스, 버텍스 버퍼에 대한 이해




렌더링 파이프라인 요약



Vertex Shader

  입력 : 정점 목록
  정점들을 오브젝트 스페이스에서 MVP 변환을 통해 클립 스페이스까지 변환한다.


Shape Assembly

  정점을 조립하여 렌더링을 할 수 있는 최소 단위(Primitive : 점, 선, 삼각형 등)로 만든다.


Geometry Shader

  입력 : 프리미티브 목록
  프리미티브 당 한 번씩 수행한다.
  프리미티브를 없앨 수도, 더 만들 수도 있고 완전히 다른 프리미티브로 변환할 수도 있다.


Rasterization

  입력 : 프리미티브 목록
  프리미티브를 최종 화면의 적절한 픽셀과 매핑하여, 프래그먼트 쉐이더에서 사용할 Fragment를 만든...
    </summary>
  

  </entry>

  
  <entry>
    <title>스크립트 템플릿(Script Templates)</title>
    <link href="https://rito15.github.io/posts/script-templates/" rel="alternate" type="text/html" title="스크립트 템플릿(Script Templates)" />
    <published>2021-01-29T16:55:00+09:00</published>
  
    <updated>2021-01-30T02:47:44+09:00</updated>
  
    <id>https://rito15.github.io/posts/script-templates/</id>
    <content src="https://rito15.github.io/posts/script-templates/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Memo" />
    
  

  
    <summary>
      





      개념


  Project - 우클릭 - Create를 통해 만드는 스크립트 또는 텍스트의 템플릿을 미리 지정하는 기능
  스크립트 템플릿의 저장 경로 :


C:\Program Files\유니티 버전\Editor\Data\Resources\ScriptTemplates



  각각의 유니티 버전마다 따로 저장된다.
  한가지 팁은, 스크립트 템플릿에 한 글자라도 애초에 한글이 작성되어 있지 않으면 나중에 한글 주석이라도 작성했을 때 인코딩이 깨져버릴 수 있으니 스크립트 템플릿 내에 아주 짧은 한글 주석을 적어 놓는게 좋다는 것




규칙


  각각의 템플릿 파일의 이름 규칙은 다음과 같다.


[인덱스]-[템플릿 이름]-[생성 시 파일명.확장자].txt



  예시 :


81-C# Script...
    </summary>
  

  </entry>

  
  <entry>
    <title>OpenGL 공부 - 02</title>
    <link href="https://rito15.github.io/posts/opengl-study-02/" rel="alternate" type="text/html" title="OpenGL 공부 - 02" />
    <published>2021-01-28T22:09:00+09:00</published>
  
    <updated>2021-01-28T22:09:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/opengl-study-02/</id>
    <content src="https://rito15.github.io/posts/opengl-study-02/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="OpenGL" />
    
    <category term="OpenGL Study" />
    
  

  
    <summary>
      





      목표


  GLEW 설치 및 적용




GLEW 설치


  GLEW : OpenGL Extension Wrangler Library
  http://glew.sourceforge.net
  
    Binary 다운로드
  
  프로젝트의 Dependency 폴더 내로 GLEW 폴더 복사
    
      glew-2.1.0 폴더를 통째로 가져와서 GLEW로 이름을 변경해준다.
    
  





  GLEW/doc/index.html - Usage 탭에 들어가면 초기 사용법이 있다.




참조 추가



  헤더
    
      프로젝트 속성 - C/C++ - 일반 - 추가 포함 디렉터리
      $(SolutionDir)OpenGL_Study\Dependencies\GLEW\inc...
    </summary>
  

  </entry>

  
  <entry>
    <title>C# 파일 입출력</title>
    <link href="https://rito15.github.io/posts/csharp-fileio/" rel="alternate" type="text/html" title="C# 파일 입출력" />
    <published>2021-01-28T21:10:00+09:00</published>
  
    <updated>2021-01-30T02:47:44+09:00</updated>
  
    <id>https://rito15.github.io/posts/csharp-fileio/</id>
    <content src="https://rito15.github.io/posts/csharp-fileio/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Csharp" />
    
    <category term="Csharp Memo" />
    
  

  
    <summary>
      





      간단 정리

파일에 쓰려면

  대상이 string, string[], byte[] 타입 중 하나여야 한다.
  파일의 전체 경로("폴더경로\파일명.확장자")가 필요하다.


한 파일에 대한 연속 입출력 횟수에 따라

  한번에 읽거나 쓰려면 File.Read(), File.Write() 메소드를 사용한다.
  여러 번에 걸쳐 읽거나 쓰려면 스트림 객체를 사용한다.




Namespace
using System.IO;




Path

// \ 대신 /를 써도 \로 자동 변환
string   filePath = @"C:\folder\fileName.txt"; 
FileInfo fi = new FileInfo(filePath);

fi.FullName;      // C:\folder\fileName....
    </summary>
  

  </entry>

</feed>


