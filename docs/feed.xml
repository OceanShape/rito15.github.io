

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://rito15.github.io/</id>
  <title>Rito15</title>
  <subtitle>Unity Csharp Developer</subtitle>
  <updated>2021-07-26T03:48:57+09:00</updated>
  <author>
    <name>Rito15</name>
    <uri>https://rito15.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://rito15.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://rito15.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator>
  <rights> © 2021 Rito15 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>(Amplify) Tree Growth Shader</title>
    <link href="https://rito15.github.io/posts/unity-amplify-tree-growth/" rel="alternate" type="text/html" title="(Amplify) Tree Growth Shader" />
    <published>2021-07-24T17:21:00+09:00</published>
  
    <updated>2021-07-24T17:21:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-amplify-tree-growth/</id>
    <content src="https://rito15.github.io/posts/unity-amplify-tree-growth/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity Shader" />
    
    <category term="Amplify Shader" />
    
  

  
    <summary>
      





      Summary



  나무가 성장하는 효과 표현하기




Preview






1. Tree - Body


프로퍼티 목록





쉐이더 에디터 설정




  
    우측 상단을 클릭하여 Blend Mode를 Masked로 변경한다.
  
  
    Mask Clip Value 값을 쉐이더 에디터에서 직접 설정해도 되지만
마테리얼에서 프로퍼티를 통해 조정하려면 우측의 점을 누르고 드롭다운에서 프로퍼티를 선택한다.
  




쉐이더 노드





설명

식물 성장을 표현하기 위해 사용되는 메시는 특별한 조건이 필요하다.

식물이 아래에서 위로 성장하는 것을 표현하기 위해

메시의 UV.Y 값은 가장 하단 정점에서 0을 갖고

+Y축 방향으로 상단에 위치한 정점일수록 점점 커지는 형태를 가...
    </summary>
  

  </entry>

  
  <entry>
    <title>(Amplify) Sea Urchin Shader</title>
    <link href="https://rito15.github.io/posts/unity-amplify-sea-urchin/" rel="alternate" type="text/html" title="(Amplify) Sea Urchin Shader" />
    <published>2021-07-23T15:15:00+09:00</published>
  
    <updated>2021-07-23T15:15:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-amplify-sea-urchin/</id>
    <content src="https://rito15.github.io/posts/unity-amplify-sea-urchin/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity Shader" />
    
    <category term="Amplify Shader" />
    
  

  
    <summary>
      





      Summary



  가시 삐쭉삐쭉한 성게 쉐이더




1. 기본


Preview







Properties




  
    
      프로퍼티
      설명
    
  
  
    
      Edge length
      테셀레이션 간격(작을수록 촘촘해진다)
    
    
      Tiling
      가시 개수 비율
    
    
      Sharpness
      가시의 뾰족한 정도
    
    
      Height
      가시의 길이
    
    
      Body Color
      구체 색상
    
    
      Thron
      가시 색상
    
    
      Color Mix Threshold
      두 색상의...
    </summary>
  

  </entry>

  
  <entry>
    <title>Hash Table(해시 테이블)</title>
    <link href="https://rito15.github.io/posts/hash-table/" rel="alternate" type="text/html" title="Hash Table(해시 테이블)" />
    <published>2021-07-20T17:14:00+09:00</published>
  
    <updated>2021-07-20T17:14:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/hash-table/</id>
    <content src="https://rito15.github.io/posts/hash-table/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Algorithm" />
    
    <category term="Data Structure" />
    
  

  
    <summary>
      





      특징



  
    데이터의 삽입, 제거, 탐색이 모두 O(1)로 매우 빠르다.
  
  
    내부적으로 정렬되지는 않는다.
  
  
    저장할 데이터의 수보다 더 많은 공간이 필요하다.
  




구현 원리



  
    Key와 Value를 함께 저장하는 Pair 타입(클래스 또는 구조체)을 준비한다.
  
  
    Pair[] 타입의 Bucket을 생성한다.
  
  
    Key의 값을 해시 함수에 넣어서 배열의 Index를 계산한다.
  
  
    Bucket의 Index 위치에 Pair를 삽입, 삭제, 탐색한다.
  
  
    Key에 대한 해시 계산으로 인덱스를 얻을 수 있기 때문에 데이터 삽입, 삭제, 탐색의 시간복잡도는 모두 O(1)이 된다.
  
  
 ...
    </summary>
  

  </entry>

  
  <entry>
    <title>C# 구조체가 IEquatable&amp;lt;T&amp;gt;를 상속해야 하는 이유</title>
    <link href="https://rito15.github.io/posts/cs-why-should-inherit-iequatable/" rel="alternate" type="text/html" title="C# 구조체가 IEquatable&amp;lt;T&amp;gt;를 상속해야 하는 이유" />
    <published>2021-07-19T20:00:00+09:00</published>
  
    <updated>2021-07-21T20:16:41+09:00</updated>
  
    <id>https://rito15.github.io/posts/cs-why-should-inherit-iequatable/</id>
    <content src="https://rito15.github.io/posts/cs-why-should-inherit-iequatable/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="C#" />
    
    <category term="C# Memo" />
    
  

  
    <summary>
      





      System.Object.Equals(object)


C#의 모든 타입의 최상위 클래스인 Object에는 .Equals(object) 메소드가 존재한다.

그리고 이를 통해 다른 값과의 동일 비교를 수행할 수 있다.



구조체나 클래스를 직접 정의하고, 해당 객체로 .Equals(object)를 호출하면

object.Equals(object)가 호출된다.

우선, 이것이 핵심이다.



박싱

int a = 1;
object oa = a;


Value Type을 object 타입으로 캐스팅하면 박싱이 일어난다.

IL_0001:  ldc.i4.1
IL_0002:  stloc.0
IL_0003:  ldloc.0
IL_0004:  box        [mscorlib]System.Int32
IL_0...
    </summary>
  

  </entry>

  
  <entry>
    <title>Animator Event Controller(애니메이터 이벤트 관리 컴포넌트)</title>
    <link href="https://rito15.github.io/posts/unity-animator-event-controller/" rel="alternate" type="text/html" title="Animator Event Controller(애니메이터 이벤트 관리 컴포넌트)" />
    <published>2021-07-17T15:15:00+09:00</published>
  
    <updated>2021-07-17T21:34:35+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-animator-event-controller/</id>
    <content src="https://rito15.github.io/posts/unity-animator-event-controller/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Editor Utilities" />
    
  

  
    <summary>
      





      Summary


  
    애니메이터 내의 각 애니메이션에 대한 이벤트를 생성, 관리할 수 있는 컴포넌트
  
  
    애니메이션의 프레임마다 이벤트를 추가할 수 있습니다.
  
  
    플레이모드의 변경 사항은 플레이모드가 종료되어도 유지됩니다.
  
  
    테스트 버전 : 2018.3.14f1, 2019.4.9f1, 2020.3.14f1
  




Usage Example



  
    캐릭터가 칼을 휘두르는 순간에 검기 이펙트 생성하기
  
  
    캐릭터가 걸을 때, 발이 땅에 닿는 순간마다 발소리 재생하기
  




Preview










0. Download &amp;amp; Import


  
    Animator Event Controller.unitypa...
    </summary>
  

  </entry>

</feed>


