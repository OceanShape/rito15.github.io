

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://rito15.github.io/</id>
  <title>Rito15</title>
  <subtitle>Unity Csharp Developer</subtitle>
  <updated>2021-06-30T04:59:43+09:00</updated>
  <author>
    <name>Rito15</name>
    <uri>https://rito15.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://rito15.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://rito15.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator>
  <rights> © 2021 Rito15 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Main Thread Dispatcher</title>
    <link href="https://rito15.github.io/posts/unity-main-thread-dispatcher/" rel="alternate" type="text/html" title="Main Thread Dispatcher" />
    <published>2021-06-30T04:04:00+09:00</published>
  
    <updated>2021-06-30T04:04:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-main-thread-dispatcher/</id>
    <content src="https://rito15.github.io/posts/unity-main-thread-dispatcher/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Toys" />
    
  

  
    <summary>
      





      Summary


  
    워커 스레드에서 유니티 메인 스레드에 작업을 위임할 수 있게 하는 싱글톤 클래스
  
  
    https://github.com/PimDeWitte/UnityMainThreadDispatcher의 코드를 조금 더 사용하기 편리하게 살짝 수정
  


Usage Example


private MainThreadDispatcher mtd;

private void Start()
{
    mtd = MainThreadDispatcher.Instance;
    Task.Run(() =&amp;gt; TestBody());
}

private async void TestBody()
{
    int res1 = -1, res2 = -1;

    await Task.Delay(5...
    </summary>
  

  </entry>

  
  <entry>
    <title>워커 스레드에서 메인 스레드에 작업 요청하기</title>
    <link href="https://rito15.github.io/posts/unity-request-job-from-worker-to-main-thread/" rel="alternate" type="text/html" title="워커 스레드에서 메인 스레드에 작업 요청하기" />
    <published>2021-06-30T01:11:00+09:00</published>
  
    <updated>2021-06-30T01:11:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-request-job-from-worker-to-main-thread/</id>
    <content src="https://rito15.github.io/posts/unity-request-job-from-worker-to-main-thread/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Study" />
    
  

  
    <summary>
      





      삽질


  문득 떠오른 순수한 호기심에 삽질해보는 포스팅입니다.
  의식의 흐름에 따라 작성합니다.




목표


  워커 스레드에서 메인 스레드에 작업 요청하고, 결과를 기다렸다가 받아서 처리하기




배경지식



  
    메인 스레드가 아닌, 다른 스레드들을 워커 스레드(Worker Thread, 작업자 스레드)라고 부른다.
  
  
    유니티 API(트랜스폼, 컴포넌트, 게임오브젝트, …)의 호출은 메인 스레드에서만 가능하다.
  
  
    워커 스레드에서 유니티 API를 호출하면 UnityException이 호출되면서 해당 작업이 거부된다.
  
  
    멀티 스레드 작업에서는 읽고 쓰는 작업에 대해 반드시 동기화를 수행해야 한다.
  
  
    동기화를 하지 않으면 ...
    </summary>
  

  </entry>

  
  <entry>
    <title>간단한 앰플리파이 쉐이더 예제 모음</title>
    <link href="https://rito15.github.io/posts/simple-amplify-shader-examples/" rel="alternate" type="text/html" title="간단한 앰플리파이 쉐이더 예제 모음" />
    <published>2021-06-27T04:24:00+09:00</published>
  
    <updated>2021-06-28T03:22:13+09:00</updated>
  
    <id>https://rito15.github.io/posts/simple-amplify-shader-examples/</id>
    <content src="https://rito15.github.io/posts/simple-amplify-shader-examples/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity Shader" />
    
    <category term="Amplify Shader" />
    
  

  
    <summary>
      





      1. Vertex


Scale Up and Down





Heartbeat



( max( sin(T * F), 1-S ) - (1-S) ) * A

T : Time
F : Frequency
S : Sensitivity
A : Amplitude




World Position Offset





World Position Offset (Keep Scale)





Vertex Displacement


   
TODO


  https://rito15.github.io/posts/unity-urp-sg-magical-orb/





2. Color


UV Mask




  Step의 A, B 입력을 서로 바꿀 경우, 마스크 색상 반전




Smooth UV Mask




  Smo...
    </summary>
  

  </entry>

  
  <entry>
    <title>Process, Thread, ThreadPool, Task 개념 간단 정리</title>
    <link href="https://rito15.github.io/posts/cs-process-thread-threadpool-task/" rel="alternate" type="text/html" title="Process, Thread, ThreadPool, Task 개념 간단 정리" />
    <published>2021-06-25T21:21:00+09:00</published>
  
    <updated>2021-06-25T21:21:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/cs-process-thread-threadpool-task/</id>
    <content src="https://rito15.github.io/posts/cs-process-thread-threadpool-task/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="C#" />
    
    <category term="C# Threading" />
    
  

  
    <summary>
      





      Process



  
    메모리에 적재되어 실행되는 프로그램
  
  
    운영체제로부터 자원을 할당받아 수행되는 작업의 단위
  
  
    Code, Data, Heap, Stack 메모리 공간을 독립적으로 갖는다.
  




Thread



  
    프로세스의 자원을 사용하는 실행 흐름의 단위
  
  
    프로세스의 Code, Data, Heap 영역을 공유한다.
  
  
    각 스레드마다 Stack 영역만 독립적으로 갖는다.
  
  
    컨텍스트 스위칭이 발생할 때 Stack 정보를 비롯해 간단한 정보만 저장하기 때문에, 프로세스의 컨텍스트 스위칭보다 빠르다.
  
  
    C#에는 Thread 클래스가 있다.
  
  
    기본적으로 Foregroun...
    </summary>
  

  </entry>

  
  <entry>
    <title>Camera Depth, Sorting Layer, Sorting Group</title>
    <link href="https://rito15.github.io/posts/unity-depth-sorting-layer-sorting-group/" rel="alternate" type="text/html" title="Camera Depth, Sorting Layer, Sorting Group" />
    <published>2021-06-25T20:40:00+09:00</published>
  
    <updated>2021-06-25T20:40:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-depth-sorting-layer-sorting-group/</id>
    <content src="https://rito15.github.io/posts/unity-depth-sorting-layer-sorting-group/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Memo - Shorts" />
    
  

  
    <summary>
      





      Camera Depth(Z)



  
    카메라로부터의 거리
  
  
    가까울수록 먼저 보인다.
  




Sorting Layer vs. Camera Depth



  
    Sorting Layer가 Camera Depth보다 우선적으로 깊이를 결정한다.
  
  
    Sorting Layer 설정이 같은 경우, Camera Depth가 깊이를 결정한다.
  




Sorting Layer



  
    서로 다른 Sorting Layer의 경우, 인덱스의 값이 클수록(0 &amp;lt; 1 &amp;lt; 2 &amp;lt; …) 먼저 보인다.
  
  
    같은 Sorting Layer 내에서는 Order In layer 값이 클수록 먼저 보인다.
  




Sorting Group
...
    </summary>
  

  </entry>

</feed>


