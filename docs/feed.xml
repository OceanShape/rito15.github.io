

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://rito15.github.io/</id>
  <title>Rito15</title>
  <subtitle>Unity Csharp Developer</subtitle>
  <updated>2021-05-08T17:59:25+09:00</updated>
  <author>
    <name>Rito15</name>
    <uri>https://rito15.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://rito15.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://rito15.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator>
  <rights> © 2021 Rito15 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>윈폼 중복 실행 방지</title>
    <link href="https://rito15.github.io/posts/memo-cs-winform-prevent-duplication/" rel="alternate" type="text/html" title="윈폼 중복 실행 방지" />
    <published>2021-05-06T02:02:00+09:00</published>
  
    <updated>2021-05-06T02:02:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/memo-cs-winform-prevent-duplication/</id>
    <content src="https://rito15.github.io/posts/memo-cs-winform-prevent-duplication/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Memo" />
    
    <category term="Csharp Winform Memo" />
    
  

  
    <summary>
      





      Memo



  Program.cs에서 Main() 메소드 지우고 아래 내용 복붙하기


/// &amp;lt;summary&amp;gt;
/// 해당 응용 프로그램의 주 진입점입니다.
/// &amp;lt;/summary&amp;gt;
[STAThread]
static void Main()
{
    if (!IsDuplicated())
        RunApplication();
}

// 이미 실행 중인 프로세스(중복 프로세스)가 있는지 확인
private static bool IsDuplicated()
{
    try
    {
        int processCount = 0;

        System.Diagnostics.Process[] processes = System.Diagnostics.Process....
    </summary>
  

  </entry>

  
  <entry>
    <title>Notify Icon 사용하기</title>
    <link href="https://rito15.github.io/posts/memo-cs-winform-notifyicon/" rel="alternate" type="text/html" title="Notify Icon 사용하기" />
    <published>2021-05-06T02:02:00+09:00</published>
  
    <updated>2021-05-06T02:02:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/memo-cs-winform-notifyicon/</id>
    <content src="https://rito15.github.io/posts/memo-cs-winform-notifyicon/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Memo" />
    
    <category term="Csharp Winform Memo" />
    
  

  
    <summary>
      





      Memo


1. 도구

  NotifyIcon 추가
  ContextMenuStrip 추가




2. 속성

  Form - Icon에 .ico 아이콘 파일 등록
  NotifyIcon - Icon에 아이콘 등록(안하면 컨텍스트 안생김)
  NotifyIcon - ContextMenuStrip 연결




3. 필드, 메소드 추가

//FormClosing 이벤트로 종료 가능 여부
private bool closeAllowed = false;

private void ShowForm()
{
    // 폼 등장
    this.Show();

    //창의 속성을 최소화-&amp;gt;보통으로 바꿔줌
    this.WindowState = FormWindowState.Normal;

    // 폼에 ...
    </summary>
  

  </entry>

  
  <entry>
    <title>깃 관련 메모 모음</title>
    <link href="https://rito15.github.io/posts/memo-git/" rel="alternate" type="text/html" title="깃 관련 메모 모음" />
    <published>2021-05-03T17:00:00+09:00</published>
  
    <updated>2021-05-07T02:00:05+09:00</updated>
  
    <id>https://rito15.github.io/posts/memo-git/</id>
    <content src="https://rito15.github.io/posts/memo-git/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Memo" />
    
  

  
    <summary>
      





      

Git 구성


[1] Local

[1-1] Working Directory

  작업 디렉토리 : 윈도우 내 폴더
  git add 명령어를 통해 변경된 파일들을 Staging Area로 옮길 수 있다.


[1-2] Staging Area

  커밋할 대상들을 저장하는 임시 저장소
  파일 변경사항 스냅샷을 안전하게 보관하지는 않는다.
  git commit 명령어를 통해 스테이징 영역 내의 파일들을 .git Directory로 옮길 수 있다.


[1-3] .git Directory (History)

  커밋 히스토리를 저장한다.
  커밋 버전별로 내용을 관리할 수 있다.
  원격 리포지토리에 push하기 전까지, 로컬 .git 폴더 내부에서 변경된 파일들의 스냅샷을 보관한다.




[2...
    </summary>
  

  </entry>

  
  <entry>
    <title>커스텀 에디터로 인스펙터에 Private 필드 나타내기</title>
    <link href="https://rito15.github.io/posts/unity-editor-show-private-fields/" rel="alternate" type="text/html" title="커스텀 에디터로 인스펙터에 Private 필드 나타내기" />
    <published>2021-04-29T20:30:00+09:00</published>
  
    <updated>2021-04-29T20:30:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-editor-show-private-fields/</id>
    <content src="https://rito15.github.io/posts/unity-editor-show-private-fields/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Editor" />
    
  

  
    <summary>
      





      Memo


커스텀 에디터를 통해서 private 필드를 인스펙터에 표시하려면 일단 두 가지 방법이 있다.



1. 내부 클래스로 작성

커스텀 에디터 클래스를 대상 모노비헤이비어 클래스의 내부에 작성하면 private 필드에도 접근할 수 있다.

public partial class RadialMenu : MonoBehaviour
{
    [CustomEditor(typeof(RadialMenu))]
    public class RadialMenuEditor : UnityEditor.Editor
    {
        private RadialMenu rm;

        private void OnEnable()
        {
            rm = target as Radial...
    </summary>
  

  </entry>

  
  <entry>
    <title>Radial Menu 만들기</title>
    <link href="https://rito15.github.io/posts/unity-study-radial-menu/" rel="alternate" type="text/html" title="Radial Menu 만들기" />
    <published>2021-04-26T18:00:00+09:00</published>
  
    <updated>2021-05-03T17:25:13+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-study-radial-menu/</id>
    <content src="https://rito15.github.io/posts/unity-study-radial-menu/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Study" />
    
  

  
    <summary>
      





      목표


  극좌표계를 이용하여 원형 분포 형태의 메뉴 UI 만들기




Preview






직교 좌표계



  Cartesian Coordinate System


유니티2D에서 사용하는 좌표계는 x, y 축으로 이루어진 직교 좌표계이다.

데카르트 좌표계라고도 하며, x, y 값을 통해 좌표를 표현한다.





극좌표계



  Polar Coordinate System


직교 좌표계와는 달리, 거리(radius)와 각도(angle)를 통해 특정 좌표를 표현한다.

이 때 거리는 중심으로부터의 거리, 각도는 직교 좌표계의 +X 축으로부터의 각도를 의미한다.

좌표가 중심을 기준으로 반시계방향으로 이동할수록 각도가 커진다.







극좌표계가 필요한 이유

Radial Menu를 만들...
    </summary>
  

  </entry>

</feed>


