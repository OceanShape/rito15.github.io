

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://rito15.github.io/</id>
  <title>Rito15</title>
  <subtitle>Unity Csharp Developer</subtitle>
  <updated>2021-08-17T20:49:09+09:00</updated>
  <author>
    <name>Rito15</name>
    <uri>https://rito15.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://rito15.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://rito15.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator>
  <rights> © 2021 Rito15 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>초보자를 위한 쉐이더 개념 간단 요약</title>
    <link href="https://rito15.github.io/posts/unity-shader-concept/" rel="alternate" type="text/html" title="초보자를 위한 쉐이더 개념 간단 요약" />
    <published>2021-08-17T20:40:00+09:00</published>
  
    <updated>2021-08-17T20:40:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-shader-concept/</id>
    <content src="https://rito15.github.io/posts/unity-shader-concept/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity Shader" />
    
    <category term="Shader Study" />
    
  

  
    <summary>
      





      선요약


  쉐이더 : 3D 모델링 데이터로부터 화면에 출력하기 위한 픽셀의 위치와 색상을 계산하는 함수
  정점 쉐이더 : 모델링의 3D 정점 위치를 2D 화면 위치로 변환하는 함수
  픽셀 쉐이더 : 화면에 출력될 픽셀의 최종 색상을 계산하는 함수



출처 : https://kblog.popekim.com/2011/11/01-part-1.html



쉐이더(Shader)


  함수의 일종
  함수 = (입력 -&amp;gt; 처리 -&amp;gt; 출력)
  
    쉐이더의 주요 구성으로는 정점 쉐이더와 픽셀 쉐이더가 있다(더 많은 것이 있지만 생략).
  
  입력 : 3D 모델링(.obj, .fbx)의 메시(Mesh) 데이터
  처리 : 3D 공간의 모델링을 2D 스크린 픽셀로 변환하여 화면에 출력한...
    </summary>
  

  </entry>

  
  <entry>
    <title>Unity Play Mode Save - Sample</title>
    <link href="https://rito15.github.io/posts/unity-play-mode-save-sample/" rel="alternate" type="text/html" title="Unity Play Mode Save - Sample" />
    <published>2021-08-17T04:32:00+09:00</published>
  
    <updated>2021-08-17T04:32:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-play-mode-save-sample/</id>
    <content src="https://rito15.github.io/posts/unity-play-mode-save-sample/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Editor Memo" />
    
  

  
    <summary>
      





      Memo



  플레이모드 -&amp;gt; 에디터모드 진입 시 플레이모드의 변경사항 유지


public class Sample_PlayModeSave : MonoBehaviour
{
    /***********************************************************************
    *                           Save Play Mode Changes
    ***********************************************************************/
    #region .
#if UNITY_EDITOR
    private class Inner_PlayModeSave
    {
        priva...
    </summary>
  

  </entry>

  
  <entry>
    <title>(Amplify) Time Easing Functions</title>
    <link href="https://rito15.github.io/posts/unity-amplify-time-easing-functions/" rel="alternate" type="text/html" title="(Amplify) Time Easing Functions" />
    <published>2021-08-16T22:22:00+09:00</published>
  
    <updated>2021-08-16T22:22:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-amplify-time-easing-functions/</id>
    <content src="https://rito15.github.io/posts/unity-amplify-time-easing-functions/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity Shader" />
    
    <category term="Amplify Shader" />
    
  

  
    <summary>
      





      Note



  Time 노드 기반의, 시간 진행에 따른 변화 함수 예제 모음




[1]







  0 ~ 1 값을 단순 선형으로 왕복할 수 있다.




[2]







  
    Power 값은 [2, 8] 범위에서 2의 배수로 넣어 주는 것이 안전하다.
  
  
    사용 예시 : 심장 박동 표현
  






References


  https://easings.net/ko


    </summary>
  

  </entry>

  
  <entry>
    <title>문자 인코딩 방식들 간단 메모</title>
    <link href="https://rito15.github.io/posts/cs-character-encodings/" rel="alternate" type="text/html" title="문자 인코딩 방식들 간단 메모" />
    <published>2021-08-15T21:42:00+09:00</published>
  
    <updated>2021-08-15T21:42:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/cs-character-encodings/</id>
    <content src="https://rito15.github.io/posts/cs-character-encodings/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="C#" />
    
    <category term="C# Memo" />
    
  

  
    <summary>
      





      Encoding



  
    문자(char)를 코드(byte[])로 표현하는 것
  
  
    반의어 : Decoding
  




ASCII



  
    American Standard Code for Information Interchange, 미국 정보 교환 표준 부호
  
  
    영미 문화권의 기본적인 문자들을 코드값에 대응시키기 위해 고안되었다.
  
  
    영어, 숫자, 일반적인 특수 문자들을 0 ~ 127 값으로 표현한다.
  




Unicode



  
    전 세계의 문자를 코드값으로 표현할 수 있도록 고안된 산업 표준
  
  
    최대 21비트에 전 세계의 문자를 표현한다.
  
  
    대부분의 언어들은 2바이트 이내에 표현된다.(영어, 숫...
    </summary>
  

  </entry>

  
  <entry>
    <title>(Amplify) Electricity Shader</title>
    <link href="https://rito15.github.io/posts/unity-amplify-electricity-shader/" rel="alternate" type="text/html" title="(Amplify) Electricity Shader" />
    <published>2021-08-14T09:09:00+09:00</published>
  
    <updated>2021-08-15T02:57:49+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-amplify-electricity-shader/</id>
    <content src="https://rito15.github.io/posts/unity-amplify-electricity-shader/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity Shader" />
    
    <category term="Amplify Shader" />
    
  

  
    <summary>
      





      Summary



  표면에 전기가 맴도는 효과




Note



  
    포스트프로세싱 Bloom을 넣어 주는 것이 좋다.
  
  
    최적화를 위해서는 Noise Generator 노드 대신 노이즈 텍스쳐를 사용해야 한다.
  




Preview








Properties






Settings


General

  Light Model : Unlit
  Cast Shadows, Receive Shadows 체크 해제


Blend Mode

  Masked




Nodes






Download



  2021_0814_Electricity.zip



    </summary>
  

  </entry>

</feed>


