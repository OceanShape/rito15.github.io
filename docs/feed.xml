

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://rito15.github.io/</id>
  <title>Rito15</title>
  <subtitle>Unity Csharp Developer</subtitle>
  <updated>2021-02-28T05:14:50+09:00</updated>
  <author>
    <name>Rito15</name>
    <uri>https://rito15.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://rito15.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://rito15.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator>
  <rights> © 2021 Rito15 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Enum 관련 메모</title>
    <link href="https://rito15.github.io/posts/csharp-enum-memo/" rel="alternate" type="text/html" title="Enum 관련 메모" />
    <published>2021-02-28T04:00:00+09:00</published>
  
    <updated>2021-02-28T04:00:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/csharp-enum-memo/</id>
    <content src="https://rito15.github.io/posts/csharp-enum-memo/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Csharp" />
    
    <category term="Csharp Memo" />
    
  

  
    <summary>
      





      enum의 모든 요소를 배열로 가져오기

enum MyEnum { A, B }

Array allValues = Enum.GetValues(typeof(MyEnum));




enum의 마지막 요소 가져오기

// System.Linq;

MyEnum last = 
    Enum.GetValues(typeof(EditorWindowType)).Cast&amp;lt;MyEnum&amp;gt;().Last();


    </summary>
  

  </entry>

  
  <entry>
    <title>유니티 에디터 관련 유용한 스크립트, 팁 모음</title>
    <link href="https://rito15.github.io/posts/unity-editor-api-memo/" rel="alternate" type="text/html" title="유니티 에디터 관련 유용한 스크립트, 팁 모음" />
    <published>2021-02-28T01:50:00+09:00</published>
  
    <updated>2021-02-28T01:50:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-editor-api-memo/</id>
    <content src="https://rito15.github.io/posts/unity-editor-api-memo/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Memo" />
    
  

  
    <summary>
      





      
   
다이얼로그 창 띄우기


  bool res1 = EditorUtility.DisplayDialog("Title", "Message", "OK");
bool res2 = EditorUtility.DisplayDialog("Title", "Message", "OK", "Cancel");
  






   
Undo 모음


  // 오브젝트 생성 이후에 호출
Undo.RegisterCreatedObjectUndo(target, "Create New");

// 오브젝트 파괴 및 Undo 등록
Undo.DestroyObjectImmediate(selected.gameObject);

// 부모 변경 및 Undo 등록
Undo.SetTransformParent(transform, parent, ...
    </summary>
  

  </entry>

  
  <entry>
    <title>물리 기반 캐릭터 이동 구현하기</title>
    <link href="https://rito15.github.io/posts/unity-physics-based-movement/" rel="alternate" type="text/html" title="물리 기반 캐릭터 이동 구현하기" />
    <published>2021-02-25T04:11:00+09:00</published>
  
    <updated>2021-02-27T04:44:27+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-physics-based-movement/</id>
    <content src="https://rito15.github.io/posts/unity-physics-based-movement/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Study" />
    
  

  
    <summary>
      





      목차


  1. 서론
  2. 이동 스크립트 분리
  3. 요구사항 정리
  4. 필드, 프로퍼티 정의
  5. 상태 검사 구현
  6. 중력 적용
  7. 이동 구현
  8. 물리 상호작용
  9. 구현 결과
  10. 소스 코드




서론


유니티에서 캐릭터 이동을 구현하기 위한 방법들은 다양하다.


  Transform
  Rigidbody
  Character Controller
  NavMeshAgent
  …


트랜스폼, 내비메시 에이전트를 통해 이동을 구현하면 물리 상호작용을 할 수 없고,

캐릭터 컨트롤러를 통해 구현해도 다른 콜라이더에 상호작용을 하려면 콜라이더가 따로 필요하고,

다른 강체로부터 상호작용을 받으려면 역시 리지드바디가 따로 필요한데다가 캐릭터 콜라이더는 비활성화...
    </summary>
  

  </entry>

  
  <entry>
    <title>파티클 시스템 예제 - 01</title>
    <link href="https://rito15.github.io/posts/unity-particle-system-example-01/" rel="alternate" type="text/html" title="파티클 시스템 예제 - 01" />
    <published>2021-02-23T21:15:00+09:00</published>
  
    <updated>2021-02-23T21:15:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-particle-system-example-01/</id>
    <content src="https://rito15.github.io/posts/unity-particle-system-example-01/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Particle System" />
    
  

  
    <summary>
      





      Preview


1. Twinkles



2. Falling Snowflakes



3. Rising Hearts





목차



  1. Twinkles
  2. Falling Snowflakes
  3. Rising Hearts




Twinkles



  
    우선 반짝이는 모양의 텍스쳐와 Additive 마테리얼을 준비한다.

    (텍스쳐 및 마테리얼 준비는 설명을 생략하며, 파티클 시스템 게임오브젝트를 생성한 상태라고 가정한다.)
  




Transform


  
    파티클 시스템 게임오브젝트를 최초로 생성하면 Rotation X 값이 -90으로 설정되어 있다.
  
  
    의도와 다르게 동작할 수 있으므로, 0으로 지정해주고 시작하는 것이 좋다.
  



...
    </summary>
  

  </entry>

  
  <entry>
    <title>파티클 시스템 기초 - 05 - 주요 모듈</title>
    <link href="https://rito15.github.io/posts/unity-particle-system-tutorial-05/" rel="alternate" type="text/html" title="파티클 시스템 기초 - 05 - 주요 모듈" />
    <published>2021-02-22T22:00:00+09:00</published>
  
    <updated>2021-02-23T22:57:41+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-particle-system-tutorial-05/</id>
    <content src="https://rito15.github.io/posts/unity-particle-system-tutorial-05/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Particle System" />
    
  

  
    <summary>
      





      목차



  1. Emission
  2. Shape
  3. Velocity over Lifetime
  4. Color over Lifetime
  5. Size over Lifetime
  6. Rotation over Lifetime
  7. Texture Sheet Animation
  References




개요



  메인 모듈 외의 모듈 중에서 주로 사용되는 모듈들에 대해 소개한다.




Emission





  파티클의 생성 타이밍과 개수에 관여한다.




Rate over Time


  
    초당 생성할 개수를 지정한다.
  
  
    예시 : [1] vs [4]
  






Rate over Distance


  
    게임오브젝트의 이동거리 당 생성할...
    </summary>
  

  </entry>

</feed>


