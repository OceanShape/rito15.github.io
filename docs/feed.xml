

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://rito15.github.io/</id>
  <title>Rito15</title>
  <subtitle>Game Programmer</subtitle>
  <updated>2022-03-23T22:27:22+09:00</updated>
  <author>
    <name>Rito15</name>
    <uri>https://rito15.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://rito15.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://rito15.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator>
  <rights> © 2022 Rito15 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Git - 명령어 - 7. Restore</title>
    <link href="https://rito15.github.io/posts/memo-git-command-7-restore/" rel="alternate" type="text/html" title="Git - 명령어 - 7. Restore" />
    <published>2022-03-23T22:00:00+09:00</published>
  
    <updated>2022-03-23T22:00:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/memo-git-command-7-restore/</id>
    <content src="https://rito15.github.io/posts/memo-git-command-7-restore/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Memo" />
    
    <category term="Git" />
    
  

  
    <summary>
      





      Restore


[1] 작업 중인 파일 상태 되돌리기

git restore abc.txt



  modified 상태인 파일의 변경사항을 마지막 커밋 상태로 되돌린다.




[2] 스테이징 취소하기

git restore --staged abc.txt



  Staging Area에 있는 특정 파일을 modified 상태로 되돌린다.
  파일 내용에 영향을 주지 않는다.




    </summary>
  

  </entry>

  
  <entry>
    <title>Git - 명령어 - 6. Commit, Push, Pull</title>
    <link href="https://rito15.github.io/posts/memo-git-command-6-commit-push-pull/" rel="alternate" type="text/html" title="Git - 명령어 - 6. Commit, Push, Pull" />
    <published>2022-03-23T22:00:00+09:00</published>
  
    <updated>2022-03-23T22:00:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/memo-git-command-6-commit-push-pull/</id>
    <content src="https://rito15.github.io/posts/memo-git-command-6-commit-push-pull/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Memo" />
    
    <category term="Git" />
    
  

  
    <summary>
      





      Commit



  Staging Area -&amp;gt; .git Directory
  스테이징 된 데이터를 깃 히스토리 영역으로 이동시킨다.




[1] 코멘트와 함께 커밋하기

git commit -m "comment"




[2] 워킹 디렉토리의 수정사항도 한번에 커밋하기

git commit -am "comment"



  git add ., git commit을 동시에 하는 효과




Push


[1] 원격 리포지토리에 푸시하기


  로컬과 원격의 브랜치 이름이 같아야 한다.


git push {원격 리포지토리 이름} {브랜치 이름}




[2] 다음부터 간단히 푸시하도록 설정하기


  
    다음 푸시부터는 git push로 간단히 할 수 있도록,
현재의 로컬 브랜치와 대상 ...
    </summary>
  

  </entry>

  
  <entry>
    <title>Git - 명령어 - 5. 브랜치</title>
    <link href="https://rito15.github.io/posts/memo-git-command-5-branch/" rel="alternate" type="text/html" title="Git - 명령어 - 5. 브랜치" />
    <published>2022-03-23T22:00:00+09:00</published>
  
    <updated>2022-03-23T22:00:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/memo-git-command-5-branch/</id>
    <content src="https://rito15.github.io/posts/memo-git-command-5-branch/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Memo" />
    
    <category term="Git" />
    
  

  
    <summary>
      





      Branch


[1] 현재 브랜치 확인

git branch




[2] 브랜치 전체(원격 포함) 목록 확인

git branch -a




[3] 브랜치 이동

git checkout {이동할 브랜치 이름}




[4] 새로운 브랜치 생성


  생성 후 해당 브랜치로 이동된다.


git checkout -b {새로운 브랜치 이름}




[5] 새로운 원격 브랜치 생성


  로컬에서 새로운 브랜치를 생성한 상태


# 로컬의 현재 브랜치와 {새로운 원격 브랜치 이름}은 일치해야 한다.
git push {원격 리포지토리 이름} {새로운 원격 브랜치 이름}


# 예시
git push origin dev-batch




[6] 브랜치 제거하기


  제거 대상이 아닌 브랜치로 이동한 상태
...
    </summary>
  

  </entry>

  
  <entry>
    <title>Git - 명령어 - 4. 클론</title>
    <link href="https://rito15.github.io/posts/memo-git-command-4-clone/" rel="alternate" type="text/html" title="Git - 명령어 - 4. 클론" />
    <published>2022-03-23T22:00:00+09:00</published>
  
    <updated>2022-03-23T22:00:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/memo-git-command-4-clone/</id>
    <content src="https://rito15.github.io/posts/memo-git-command-4-clone/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Memo" />
    
    <category term="Git" />
    
  

  
    <summary>
      





      Clone


[1] 기본 클론

git clone https://github.com/{사용자명}/{프로젝트명}.git




[2] 특정 브랜치만 클론

git clone -b {브랜치명} https://github.com/{사용자명}/{프로젝트명}.git





    </summary>
  

  </entry>

  
  <entry>
    <title>Git - 명령어 - 3. 상태, 기록</title>
    <link href="https://rito15.github.io/posts/memo-git-command-3-status-logs/" rel="alternate" type="text/html" title="Git - 명령어 - 3. 상태, 기록" />
    <published>2022-03-23T22:00:00+09:00</published>
  
    <updated>2022-03-23T22:00:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/memo-git-command-3-status-logs/</id>
    <content src="https://rito15.github.io/posts/memo-git-command-3-status-logs/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Memo" />
    
    <category term="Git" />
    
  

  
    <summary>
      





      Status


변경된 파일들 상태 확인하기

git status





  Changes to be committed:
    
      git add를 통해 Staging Area로 이동된 파일들 목록
    
  
  Changes not staged for commit:
    
      변경되었지만 아직 스테이징 되지 않은 파일들 목록
    
  




Diff


파일 변경 내용 확인하기

git diff [파일명]



  
    스테이징 되지 않은, 변경된 파일들의 내용 변경사항을 보여준다.
  
  
    git diff 파일명으로 특정 파일만 변경사항을 확인할 수 있다.
  




git diff --cached [파일명]



  스테이징 된 파일들의 변경사항을 최근 ...
    </summary>
  

  </entry>

</feed>


