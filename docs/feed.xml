

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://rito15.github.io/</id>
  <title>Rito15</title>
  <subtitle>Unity Csharp Developer</subtitle>
  <updated>2021-02-18T03:21:04+09:00</updated>
  <author>
    <name>Rito15</name>
    <uri>https://rito15.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://rito15.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://rito15.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator>
  <rights> © 2021 Rito15 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>OpenGL 공부 - 21 - Material Class</title>
    <link href="https://rito15.github.io/posts/opengl-study-21/" rel="alternate" type="text/html" title="OpenGL 공부 - 21 - Material Class" />
    <published>2021-02-17T22:43:00+09:00</published>
  
    <updated>2021-02-17T22:43:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/opengl-study-21/</id>
    <content src="https://rito15.github.io/posts/opengl-study-21/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="OpenGL" />
    
    <category term="OpenGL Study" />
    
  

  
    <summary>
      





      목표


  Material 클래스 작성




공부 내용



  오브젝트에 적용할 색상과 텍스쳐들을 Material 클래스로 래핑하여 쉐이더에 전달한다.


Fragment 쉐이더 수정

#version 440

#define saturate(x) clamp(x, 0., 1.)

struct Material
{
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;

    sampler2D diffuseMap;
};

in vec3 vs_position;
in vec3 vs_color;
in vec2 vs_texcoord;
in vec3 vs_normal;

out vec4 fs_color;

// ====================== Uniforms...
    </summary>
  

  </entry>

  
  <entry>
    <title>게임 서버 엔진</title>
    <link href="https://rito15.github.io/posts/memo-game-server-engines/" rel="alternate" type="text/html" title="게임 서버 엔진" />
    <published>2021-02-17T21:40:00+09:00</published>
  
    <updated>2021-02-17T21:40:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/memo-game-server-engines/</id>
    <content src="https://rito15.github.io/posts/memo-game-server-engines/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Memo" />
    
  

  
    <summary>
      





      게임 서버 엔진


  완성된 형태의 게임 서버 기능 제공




설치형(On-premise, Self-hosted)

  ProudNet(국내)
    
      개인 무료 라이센스 제공
      마비노기 영웅전, 세븐나이츠 등 190여개 프로젝트에 사용
      실시간 대규모 RPG, FPS에 적합
      https://www.youtube.com/watch?v=bYB1_qGMRS8&amp;amp;list=PLHmjKJAyeNIdlPra2-dRBhuvqAlun_ir-
      http://lab.gamecodi.com/board/zboard.php?id=GAMECODILAB_Proudnet_Lec
      https://yskang.tistory.com/14
    
  
  아이펀(국내)
 ...
    </summary>
  

  </entry>

  
  <entry>
    <title>Serverless, BaaS, FaaS</title>
    <link href="https://rito15.github.io/posts/memo-serverless-baas-faas/" rel="alternate" type="text/html" title="Serverless, BaaS, FaaS" />
    <published>2021-02-17T20:40:00+09:00</published>
  
    <updated>2021-02-17T20:40:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/memo-serverless-baas-faas/</id>
    <content src="https://rito15.github.io/posts/memo-serverless-baas-faas/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Memo" />
    
  

  
    <summary>
      





      애플리케이션 개발 패러다임 변화




모놀리스(Monolith)

  소프트웨어의 모든 구성요소가 한 프로젝트에 통합된 형태
  중앙 집중적 구조
  변경이 발생할 경우 전체 애플리케이션을 재배포, 재시작해야 한다.
  부분의 장애가 전체 서비스의 장애로 이어지는 경우가 발생한다.
  서비스가 커지면 커질수록 전체 시스템 구조 파악이 어려워진다.


마이크로 서비스(Micro Service Architecture, MSA)

  모놀리스의 단점을 보완하기 위한 구조
  애플리케이션을 서비스들의 결합으로 구성한다.
  각 서비스는 크기가 작을 뿐, 하나의 모놀리스와 유사한 구조를 가진다.
  각 서비스는 독립적으로 배포가 가능해야 한다.
  
    각 서비스는 다른 서비스에 대한 의존성이 최소화 되어...
    </summary>
  

  </entry>

  
  <entry>
    <title>클라우드 컴퓨팅 3대 서비스</title>
    <link href="https://rito15.github.io/posts/memo-cloud-computing-services/" rel="alternate" type="text/html" title="클라우드 컴퓨팅 3대 서비스" />
    <published>2021-02-17T20:40:00+09:00</published>
  
    <updated>2021-02-17T20:40:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/memo-cloud-computing-services/</id>
    <content src="https://rito15.github.io/posts/memo-cloud-computing-services/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Memo" />
    
  

  
    <summary>
      





      IaaS, PaaS, SaaS


구분

  기업과 클라우드 서비스 제공자간의 관리 영역 분할 정도에 따라 구분할 수 있다.






선택 예시

  IaaS : 인력이 충분하고 자원 및 인프라만 대여하고 싶은 경우
  PaaS : 이미 만들어진 런타임, DB 등의 API를 사용하여 본 개발에만 집중하고 싶은 경우
  SaaS : 특수목적의 소프트웨어들을 바로 사용하고 싶은 경우




IaaS(Infrastructure-as-a-Service)


특징

  
    서버 자원, 네트워크, 전력, 스토리지 등의 인프라를 가상화하여 제공한다.
  
  
    사용한 만큼 지불하는 종량제 형식으로 운영된다.
  
  
    보통 운영체제 기반으로 서비스를 제공한다.
  



장점

  
    데...
    </summary>
  

  </entry>

  
  <entry>
    <title>매개변수 한정자 ref, in의 성능</title>
    <link href="https://rito15.github.io/posts/ref-in-performance/" rel="alternate" type="text/html" title="매개변수 한정자 ref, in의 성능" />
    <published>2021-02-16T23:20:00+09:00</published>
  
    <updated>2021-02-16T23:20:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/ref-in-performance/</id>
    <content src="https://rito15.github.io/posts/ref-in-performance/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Csharp" />
    
    <category term="Csharp Memo" />
    
  

  
    <summary>
      





      목표


  값타입을 매개변수로 전달할 때 매개변수 한정자 사용에 따른 성능 알아보기


(string은 참조타입이지만 매개변수로 전달하면 복제되므로 함께 테스트)



비교군


public struct StructA
{
    public long a,b,c,d,e,f,g;

    public StructA(long value)
    {
        a = b = c = d = e = f = g = value;
    }
}

public readonly struct StructB
{
    public readonly long a,b,c,d,e,f,g;

    public StructB(long value)
    {
        a = b = c = d = e = f = g = valu...
    </summary>
  

  </entry>

</feed>


