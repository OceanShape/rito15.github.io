

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://rito15.github.io/</id>
  <title>Rito15</title>
  <subtitle>Unity Csharp Developer</subtitle>
  <updated>2021-10-23T20:25:29+09:00</updated>
  <author>
    <name>Rito15</name>
    <uri>https://rito15.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://rito15.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://rito15.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator>
  <rights> © 2021 Rito15 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>게임 수학 - 회전(2차원, 3차원, 4원수)</title>
    <link href="https://rito15.github.io/posts/game-math-rotation/" rel="alternate" type="text/html" title="게임 수학 - 회전(2차원, 3차원, 4원수)" />
    <published>2021-10-23T17:14:00+09:00</published>
  
    <updated>2021-10-23T17:14:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/game-math-rotation/</id>
    <content src="https://rito15.github.io/posts/game-math-rotation/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Memo" />
    
    <category term="Game Mathematics" />
    
  

  
    <summary>
      





      기초 개념


기저 벡터(Basis Vector)


  n차원 공간에서 임의의 벡터를 표현할 수 있는, 선형 독립 관계의 벡터
  n차원 공간을 구성하려면 n개의 기저 벡터가 필요하다.




표준 기저 벡터(Standard Basis Vector)


  기저 벡터 중에서도 원소 중 하나의 값이 1이고, 나머지 원소가 0인 벡터
  예를 들어 2차원 평면에서의 표준 기저 벡터는 (1, 0), (0, 1)이다.




공간 변환(Space Transformation)




  공간 변환이란 기존의 공간을 이루고 있던 표준기저벡터를 변경하여 새로운 공간을 만드는 작업이다.
  이동, 회전, 크기 변환이 있다.




2차원 평면의 회전


2차원 회전 변환의 특징




  평면 내에서 반지름이 1인...
    </summary>
  

  </entry>

  
  <entry>
    <title>유니티 - FixedUpdate()와 Physics Loop에 대한 이해</title>
    <link href="https://rito15.github.io/posts/unity-fixed-update-and-physics-loop/" rel="alternate" type="text/html" title="유니티 - FixedUpdate()와 Physics Loop에 대한 이해" />
    <published>2021-10-23T03:45:00+09:00</published>
  
    <updated>2021-10-23T15:58:34+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-fixed-update-and-physics-loop/</id>
    <content src="https://rito15.github.io/posts/unity-fixed-update-and-physics-loop/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Memo" />
    
  

  
    <summary>
      





      Update()와 Game Loop


유니티 엔진의 Update()는 매 프레임 호출되며,

이동, 회전, 입력, 실시간 계산 등 수많은 기능을 여기에 작성한다.

그렇다면 Update()의 정체는 무엇일까?



그래픽스 라이브러리를 통해 구현되는 게임은 기본적으로 Game Loop(게임 루프) 를 통해 프레임 기반 동작이 수행된다.

DirectX, OpenGL, Vulkan, … 등 어떤 그래픽스 라이브러리를 사용하더라도

/* Main Function */

// Game Loop
while(...)
{
    // User Inputs..
    // Game Logics..
    // Draw Calls..
    // ...
}


이렇게 메인 스레드에 무한 반복문을 통해 게임 루프를 ...
    </summary>
  

  </entry>

  
  <entry>
    <title>게임 수학 - 벡터의 내적과 외적</title>
    <link href="https://rito15.github.io/posts/game-math-dot-cross/" rel="alternate" type="text/html" title="게임 수학 - 벡터의 내적과 외적" />
    <published>2021-10-21T16:00:00+09:00</published>
  
    <updated>2021-10-22T23:00:26+09:00</updated>
  
    <id>https://rito15.github.io/posts/game-math-dot-cross/</id>
    <content src="https://rito15.github.io/posts/game-math-dot-cross/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Memo" />
    
    <category term="Game Mathematics" />
    
  

  
    <summary>
      





      내적



   
…


  특징

  
    내적은 벡터의 차원에 관계 없이, 동일한 차원의 벡터끼리 가능하다.
    내적의 결과는 스칼라 값이다.
    벡터 A, B의 내적은 A를 B에(또는 B를 A에) 투영시킨 후 두 벡터의 길이를 곱한 것과 같다.
    내적은 교환 법칙, 결합 법칙이 성립한다.
  

  

  주어진 벡터

\[\begin{flalign*}
\quad A = (a_{x} \, , \,\, a_{y} \, , \,\, a_{z}) &amp;amp;&amp;amp;
\end{flalign*}\]

\[\begin{flalign*}
\quad B = (b_{x} \, , \,\, b_{y} \, , \,\, b_{z}) &amp;amp;&amp;amp;
\end{flalign*}\]

  

  내적 ...
    </summary>
  

  </entry>

  
  <entry>
    <title>게임 수학 - 선과 평면, 정점 보간</title>
    <link href="https://rito15.github.io/posts/game-math-line-plane-vertex/" rel="alternate" type="text/html" title="게임 수학 - 선과 평면, 정점 보간" />
    <published>2021-10-20T21:00:00+09:00</published>
  
    <updated>2021-10-20T21:00:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/game-math-line-plane-vertex/</id>
    <content src="https://rito15.github.io/posts/game-math-line-plane-vertex/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Memo" />
    
    <category term="Game Mathematics" />
    
  

  
    <summary>
      





      3D 게임 공간의 확장


  벡터 공간 : 이동 벡터를 표현(w가 항상 0)
  아핀 공간 : 위치 벡터를 표현(w가 항상 1)




특징

  벡터와 벡터는 더할 수 있다.
  벡터와 점을 더하면 w = 1이므로 점이 된다.
  점과 점을 더하면 w = 2가 되어 아핀 공간을 벗어나므로, 더할 수 없다.




아핀 조합(Affine Combination)


\[a + b = 1\]

\[P = aP_{1} + bP_{2}\]

\[P = aP_{1} + (1 - a)P_{2}\]


  점 P는 (x, y, z, 1)인 아핀 공간의 위치 벡터
  아핀 조합 : 아핀 공간의 두 점을 더했을 때의 결과가 아핀 공간의 점(w = 1)이 됨을 보장하는 공식




두 개의 점을 이용해 선 표현하기

...
    </summary>
  

  </entry>

  
  <entry>
    <title>Raycast to AABB</title>
    <link href="https://rito15.github.io/posts/raycast-to-aabb/" rel="alternate" type="text/html" title="Raycast to AABB" />
    <published>2021-10-19T03:00:00+09:00</published>
  
    <updated>2021-10-22T04:52:46+09:00</updated>
  
    <id>https://rito15.github.io/posts/raycast-to-aabb/</id>
    <content src="https://rito15.github.io/posts/raycast-to-aabb/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Algorithm" />
    
    <category term="Algorithms" />
    
  

  
    <summary>
      





      레이캐스트(Raycast)



  공간 상의 한 점에서부터 목표 지점까지 가상의 광선을 발사하여, 광선에 닿는 물체의 표면을 검출한다.




AABB



  
    Axis-Aligned Bounding Box
  
  
    여섯 면이 모두 각각 X, Y, Z 축에 정렬된 형태의 육면체
  
  
    중심 좌표(Vector3)와 각 축의 크기(Vector3) 또는
최소 좌표(Vector3)와 최대 좌표(Vector3)를 통해 정의할 수 있다.
  




Raycast to AAP



  AAP : Axis-Aligned Plane




육면체는 6개의 평면으로 이루어져 있다.

AABB 역시 6개의 평면으로 이루어져 있는데,

Axis-Aligned라는 특성 덕분에 각 평면에 대한 ...
    </summary>
  

  </entry>

</feed>


