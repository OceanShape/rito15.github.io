

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://rito15.github.io/</id>
  <title>Rito15</title>
  <subtitle>Unity Csharp Developer</subtitle>
  <updated>2021-05-04T19:42:56+09:00</updated>
  <author>
    <name>Rito15</name>
    <uri>https://rito15.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://rito15.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://rito15.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator>
  <rights> © 2021 Rito15 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>깃 관련 메모 모음</title>
    <link href="https://rito15.github.io/posts/memo-git/" rel="alternate" type="text/html" title="깃 관련 메모 모음" />
    <published>2021-05-03T17:00:00+09:00</published>
  
    <updated>2021-05-04T03:31:47+09:00</updated>
  
    <id>https://rito15.github.io/posts/memo-git/</id>
    <content src="https://rito15.github.io/posts/memo-git/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Memo" />
    
  

  
    <summary>
      





      

Git 구성


[1] Local

[1-1] Working Directory

  작업 디렉토리 : 윈도우 내 폴더
  git add 명령어를 통해 변경된 파일들을 Staging Area로 옮길 수 있다.


[1-2] Staging Area

  커밋할 대상들을 저장하는 임시 저장소
  파일 변경사항 스냅샷을 안전하게 보관하지는 않는다.
  git commit 명령어를 통해 스테이징 영역 내의 파일들을 .git Directory로 옮길 수 있다.


[1-3] .git Directory

  커밋 히스토리를 저장한다.
  원격 리포지토리에 push하기 전까지, 로컬 .git 폴더 내부에서 변경된 파일들의 스냅샷을 보관한다.




[2] Remote

  Git 원격 리포지토리
  git pus...
    </summary>
  

  </entry>

  
  <entry>
    <title>커스텀 에디터로 인스펙터에 Private 필드 나타내기</title>
    <link href="https://rito15.github.io/posts/unity-editor-show-private-fields/" rel="alternate" type="text/html" title="커스텀 에디터로 인스펙터에 Private 필드 나타내기" />
    <published>2021-04-29T20:30:00+09:00</published>
  
    <updated>2021-04-29T20:30:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-editor-show-private-fields/</id>
    <content src="https://rito15.github.io/posts/unity-editor-show-private-fields/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Editor" />
    
  

  
    <summary>
      





      Memo


커스텀 에디터를 통해서 private 필드를 인스펙터에 표시하려면 일단 두 가지 방법이 있다.



1. 내부 클래스로 작성

커스텀 에디터 클래스를 대상 모노비헤이비어 클래스의 내부에 작성하면 private 필드에도 접근할 수 있다.

public partial class RadialMenu : MonoBehaviour
{
    [CustomEditor(typeof(RadialMenu))]
    public class RadialMenuEditor : UnityEditor.Editor
    {
        private RadialMenu rm;

        private void OnEnable()
        {
            rm = target as Radial...
    </summary>
  

  </entry>

  
  <entry>
    <title>Radial Menu 만들기</title>
    <link href="https://rito15.github.io/posts/unity-study-radial-menu/" rel="alternate" type="text/html" title="Radial Menu 만들기" />
    <published>2021-04-26T18:00:00+09:00</published>
  
    <updated>2021-05-03T17:25:13+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-study-radial-menu/</id>
    <content src="https://rito15.github.io/posts/unity-study-radial-menu/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Study" />
    
  

  
    <summary>
      





      목표


  극좌표계를 이용하여 원형 분포 형태의 메뉴 UI 만들기




Preview






직교 좌표계



  Cartesian Coordinate System


유니티2D에서 사용하는 좌표계는 x, y 축으로 이루어진 직교 좌표계이다.

데카르트 좌표계라고도 하며, x, y 값을 통해 좌표를 표현한다.





극좌표계



  Polar Coordinate System


직교 좌표계와는 달리, 거리(radius)와 각도(angle)를 통해 특정 좌표를 표현한다.

이 때 거리는 중심으로부터의 거리, 각도는 직교 좌표계의 +X 축으로부터의 각도를 의미한다.

좌표가 중심을 기준으로 반시계방향으로 이동할수록 각도가 커진다.







극좌표계가 필요한 이유

Radial Menu를 만들...
    </summary>
  

  </entry>

  
  <entry>
    <title>브레즌햄(픽셀에 직선 그리기) 알고리즘</title>
    <link href="https://rito15.github.io/posts/bresenham-algorithm/" rel="alternate" type="text/html" title="브레즌햄(픽셀에 직선 그리기) 알고리즘" />
    <published>2021-04-25T17:32:00+09:00</published>
  
    <updated>2021-04-25T17:32:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/bresenham-algorithm/</id>
    <content src="https://rito15.github.io/posts/bresenham-algorithm/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Algorithm" />
    
  

  
    <summary>
      





      Summary


직선을 그릴 때 직선 위의 점들은 실수 값을 가질 수밖에 없다.

그래서 불연속 정수 값만을 갖는 픽셀에 직선을 그릴 때는

실수 값의 소수점을 버리거나 반올림하여 정수로 변환해야 하는데,

브레즌햄 알고리즘은 실수 연산 없이 정수 연산만으로 직선을 그릴 수 있게 해준다.



Details


2가지 경우로 나눈다.




  기울기 절댓값이 1 미만인 경우
  기울기 절댓값이 1 이상인 경우




1번의 경우에는 x 좌표를 1씩 증가 또는 감소시키며 해당하는 y 좌표를 구하고,

2번의 경우에는 y 좌표를 1씩 증가 또는 감소시키며 해당하는 x 좌표를 구한다.



1번을 예시로 했을 때

x 좌표를 1씩 증가 또는 감소시켰을 때 y좌표 역시 1 증가 또는 감소시킬지 여부를 결정...
    </summary>
  

  </entry>

  
  <entry>
    <title>Debug.Log에 색상 넣기</title>
    <link href="https://rito15.github.io/posts/unity-memo-color-debug-log/" rel="alternate" type="text/html" title="Debug.Log에 색상 넣기" />
    <published>2021-04-25T17:10:00+09:00</published>
  
    <updated>2021-04-25T17:10:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-memo-color-debug-log/</id>
    <content src="https://rito15.github.io/posts/unity-memo-color-debug-log/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Memo" />
    
  

  
    <summary>
      





      Memo


  &amp;lt;color=&amp;gt;&amp;lt;/color&amp;gt; 태그를 사용하여 로그 메시지에 색상을 넣을 수 있다.
  color= 뒤에는 색상 이름 또는 HTML 색상코드를 입력한다.




Debug.Log("Default");
Debug.Log("&amp;lt;color=white&amp;gt;White&amp;lt;/color&amp;gt;");
Debug.Log("&amp;lt;color=grey&amp;gt;Grey&amp;lt;/color&amp;gt;");
Debug.Log("&amp;lt;color=black&amp;gt;Black&amp;lt;/color&amp;gt;");
Debug.Log("&amp;lt;color=red&amp;gt;Red&amp;lt;/color&amp;gt;");
Debug.Log("&amp;lt;color=green&amp;gt;Green&amp;lt;/color&amp;gt;");
Debug...
    </summary>
  

  </entry>

</feed>


