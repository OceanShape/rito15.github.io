

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://rito15.github.io/</id>
  <title>Rito15</title>
  <subtitle>Unity Csharp Developer</subtitle>
  <updated>2021-11-11T20:43:09+09:00</updated>
  <author>
    <name>Rito15</name>
    <uri>https://rito15.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://rito15.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://rito15.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator>
  <rights> © 2021 Rito15 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>유니티 - 리지드바디와 콜라이더 간단 정리</title>
    <link href="https://rito15.github.io/posts/unity-rigidbody-and-collider/" rel="alternate" type="text/html" title="유니티 - 리지드바디와 콜라이더 간단 정리" />
    <published>2021-11-09T14:50:00+09:00</published>
  
    <updated>2021-11-09T14:50:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-rigidbody-and-collider/</id>
    <content src="https://rito15.github.io/posts/unity-rigidbody-and-collider/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Memo" />
    
  

  
    <summary>
      





      리지드바디(Rigidbody)



  
Unity Docs


  
    https://docs.unity3d.com/kr/2019.4/Manual/class-Rigidbody.html
  





‘강체’로 번역할 수 있다.

유니티 엔진에서 제공하는 기본 컴포넌트이다.

리지드바디가 존재하는 게임 오브젝트는 물리 엔진의 영향을 받는다.

현실감 있는 물리 시뮬레이션이 가능해지며,

힘(Force)과 속도(Velocity)의 영향을 받는다.

3D에서는 Rigidbody, 2D에서는 Rigidbody2D 컴포넌트를 사용한다.

프로젝트 종류에 따라 잘 구분해서 사용해야 한다.



콜라이더(Collider)



  
Unity Docs


  
    https://docs.unity3d.co...
    </summary>
  

  </entry>

  
  <entry>
    <title>유니티 - 모바일 성능 최적화</title>
    <link href="https://rito15.github.io/posts/unity-mobile-optimization/" rel="alternate" type="text/html" title="유니티 - 모바일 성능 최적화" />
    <published>2021-11-06T00:02:00+09:00</published>
  
    <updated>2021-11-11T16:46:26+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-mobile-optimization/</id>
    <content src="https://rito15.github.io/posts/unity-mobile-optimization/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Optimization" />
    
  

  
    <summary>
      





      프로젝트 설정



  
…


  공통
  
    프로젝트 설정에서 불필요해 보이는 옵션들은 웬만해서 끄는 것이 성능에 좋다.
  

  물리 엔진을 사용하지 않는 경우
  
    Physics - Auto Simulation, Auto Sync Transforms 비활성화
  

  알맞은 Frame Rate 설정하기
  
    Application.targetFrameRate 설정
    액션 게임 : 60fps
    보드 게임 : 30fps
  

  Vsync 설정
  
    모바일 플랫폼에서 Vsync 설정을 끄는 것은 사실상 의미가 없을 수 있다.
    웬만해서 이미 하드웨어 레벨에서 Vsync가 설정되기 때문이다.
  

  



파일 포맷(확장자)



  
…


  이미...
    </summary>
  

  </entry>

  
  <entry>
    <title>유니티 에디터 - 게임 뷰 객체 찾는 코드</title>
    <link href="https://rito15.github.io/posts/unity-editor-find-game-view/" rel="alternate" type="text/html" title="유니티 에디터 - 게임 뷰 객체 찾는 코드" />
    <published>2021-11-05T02:10:00+09:00</published>
  
    <updated>2021-11-05T05:41:44+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-editor-find-game-view/</id>
    <content src="https://rito15.github.io/posts/unity-editor-find-game-view/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Editor Memo" />
    
  

  
    <summary>
      





      Note


  흔히 게임 뷰라고 알려져 있는 에디터 윈도우는 UnityEditor.PlayModeView 타입이다.
  리플렉션을 통해 접근할 수 있다.




Source Code





  


private static Type GameViewType
{
    get
    {
        if (gameViewType == null)
        {
            gameViewType =
                AppDomain.CurrentDomain.GetAssemblies()
                .SelectMany(ass =&amp;gt; ass.GetTypes())
                .Where(t =&amp;gt; t.Namespace == "UnityEd...
    </summary>
  

  </entry>

  
  <entry>
    <title>유니티 - 키보드 입력을 통한 리지드바디 이동, 회전, 점프 기본 코드</title>
    <link href="https://rito15.github.io/posts/unity-rigidbody-move-and-jump/" rel="alternate" type="text/html" title="유니티 - 키보드 입력을 통한 리지드바디 이동, 회전, 점프 기본 코드" />
    <published>2021-11-04T20:30:00+09:00</published>
  
    <updated>2021-11-07T16:00:43+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-rigidbody-move-and-jump/</id>
    <content src="https://rito15.github.io/posts/unity-rigidbody-move-and-jump/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Memo - Shorts" />
    
  

  
    <summary>
      





      Note


  
    입력은 Update(), 물리 처리는 FixedUpdate()로 철저히 구분하는 것이 핵심
  
  
    다음과 같은 증상들이 발생한다면 Update()에서 리지드바디를 조작하고 있는지 의심할 필요가 있다.
    
      왠지 모르게 캐릭터가 벽을 너무 잘 뚫고 지나간다.
      콜라이더에 자주 끼인다.
      지터링(덜덜 떨림)이 빈번하게 발생한다.
      점프할 때마다 점프하는 높이가 달라진다.
    
  




Source Code 1


기능

  WASD 키 : 리지드바디 이동
  Space 키 : 리지드바디 점프




소스 코드


  
Source Code


  

  
    
  

  using System.Collections;
u...
    </summary>
  

  </entry>

  
  <entry>
    <title>Intel Assembly 기초 간단 정리</title>
    <link href="https://rito15.github.io/posts/intel-assembly-memo/" rel="alternate" type="text/html" title="Intel Assembly 기초 간단 정리" />
    <published>2021-11-02T03:54:00+09:00</published>
  
    <updated>2021-11-02T03:54:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/intel-assembly-memo/</id>
    <content src="https://rito15.github.io/posts/intel-assembly-memo/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Memo" />
    
    <category term="Assembly Memo" />
    
  

  
    <summary>
      





      목표


  비주얼 스튜디오에서 디스어셈블러로 어셈블리 코드를 읽었을 때, 대충이라도 흐름과 동작 이해하기




어셈블리 문법 종류



  
    Intel, AT&amp;amp;T 문법이 있다.
  
  eax, [eax] 꼴의 문법은 Intel이며,
  
    %eax, (%eax) 꼴의 문법은 AT&amp;amp;T이다.
  
  Intel 문법을 따르는 대표적인 예시로 MASM(Microsoft Macro Assembler), NASM(Netwide Assembler) 등이 있다.




알아두기



  
…


  어셈블리 연산의 특징

  메모리 주소 간의 연산을 수행할 때,

  특정 주소에서 주소로 직접 연산할 수 없고, 반드시 레지스터를 거쳐간다.

  예를 들어 메모리 0x24 위치의 값을...
    </summary>
  

  </entry>

</feed>


