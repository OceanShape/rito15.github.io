

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://rito15.github.io/</id>
  <title>Rito15</title>
  <subtitle>Unity Csharp Developer</subtitle>
  <updated>2021-09-10T18:32:13+09:00</updated>
  <author>
    <name>Rito15</name>
    <uri>https://rito15.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://rito15.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://rito15.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator>
  <rights> © 2021 Rito15 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>C# Span 사용하여 문자열의 첫 문자만 대소문자 변경하기</title>
    <link href="https://rito15.github.io/posts/cs-string-first-char-to-lower-or-upper/" rel="alternate" type="text/html" title="C# Span 사용하여 문자열의 첫 문자만 대소문자 변경하기" />
    <published>2021-09-10T17:51:00+09:00</published>
  
    <updated>2021-09-10T17:51:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/cs-string-first-char-to-lower-or-upper/</id>
    <content src="https://rito15.github.io/posts/cs-string-first-char-to-lower-or-upper/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="C#" />
    
    <category term="C# Memo" />
    
  

  
    <summary>
      





      첫 문자만 간단히 대소문자 변경하기


string의 API만 사용하면 아주 간단히 첫 문자만 대소문자를 변경할 수 있다.

private static string FirstCharToLower(string str)
{
    return str[0].ToString().ToLower() + str.Substring(1);
}


하지만 이렇게 되면 여기서 힙 할당이 너무 많이 발생한다.

str[0].ToString()에서 한 번,

.ToLower()에서 한 번,

str.Substring(1)에서 한 번,

_ + _에서 한 번.

총 네 번의 힙 할당이 이루어진다.



힙 할당 최소화하여 변환하기


힙 할당을 최소화하려면 역시 Span, ReadOnlySpan을 사용해야 한다.

Span이 ...
    </summary>
  

  </entry>

  
  <entry>
    <title>유니티 - 컴퓨트 쉐이더(Compute Shader)</title>
    <link href="https://rito15.github.io/posts/unity-compute-shader/" rel="alternate" type="text/html" title="유니티 - 컴퓨트 쉐이더(Compute Shader)" />
    <published>2021-09-10T02:01:00+09:00</published>
  
    <updated>2021-09-10T15:39:28+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-compute-shader/</id>
    <content src="https://rito15.github.io/posts/unity-compute-shader/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Memo" />
    
  

  
    <summary>
      





      Compute Shader


개념

  GPU를 CPU의 영역인 응용 프로그램 계산에 사용하는 GPGPU(General-Purpose computing on GPU)와는 개념이 유사하지만 다르다.
  GPGPU를 사용하는 CUDA, OpenCL은 독립 API이고 OpenGL의 Compute Shader, DirectX의 DirectCompute는 그래픽스API에 종속되어 동작한다.
  동시에 수많은 대상(수십만, 수백만 단위 가능)에 대해 동일한 연산(함수)을 처리해야 할 때 사용한다.
  VFX Graph도 컴퓨트 쉐이더를 연산에 사용한다고 한다.
  확장자는 .compute이다.


커널(Kernal)

  GPU에서 동작하는 함수를 의미한다.
  함수의 이름이 곧 커널의 이름이며, #pragma...
    </summary>
  

  </entry>

  
  <entry>
    <title>유니티 에디터 - 버전별 자동 레이아웃 컨트롤 기본 높이</title>
    <link href="https://rito15.github.io/posts/unity-editor-layout-control-heights/" rel="alternate" type="text/html" title="유니티 에디터 - 버전별 자동 레이아웃 컨트롤 기본 높이" />
    <published>2021-09-08T23:00:00+09:00</published>
  
    <updated>2021-09-08T23:00:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-editor-layout-control-heights/</id>
    <content src="https://rito15.github.io/posts/unity-editor-layout-control-heights/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Editor Memo" />
    
  

  
    <summary>
      





      Memo



  버전별로 대응할 때 편하도록 메모




GUILayout.Button()


  
    
      버전
      Rect 높이
      하단 여백 포함 높이
    
  
  
    
      2018.3.14f1
      18
      21
    
    
      2019.2.21f1
      18
      21
    
    
      2019.3.0f6 *
      19
      21
    
    
      2019.4.9f1
      19
      21
    
    
      2019.4.17f1
      19
      21
    
    
      2020.1.0f1
      19
      21
    
    
   ...
    </summary>
  

  </entry>

  
  <entry>
    <title>유니티 스크린샷 찍고 저장하기(Windows, Android)</title>
    <link href="https://rito15.github.io/posts/unity-save-screen-shot/" rel="alternate" type="text/html" title="유니티 스크린샷 찍고 저장하기(Windows, Android)" />
    <published>2021-09-08T05:10:00+09:00</published>
  
    <updated>2021-09-08T05:10:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-save-screen-shot/</id>
    <content src="https://rito15.github.io/posts/unity-save-screen-shot/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Memo" />
    
  

  
    <summary>
      





      1. Unity Editor


저장할 경로

  $"{Application.dataPath}/ScreenShots/"


실제 경로

  "[프로젝트 디렉토리]/Assets/ScreenShots/"





2. Standalone App


저장할 경로

  $"{Application.dataPath}/ScreenShots/"


실제 경로

  "[실행파일명]/[실행파일명_Data]/ScreenShots/"





3. Android


저장할 경로

  $"{Application.persistentDataPath}/ScreenShots/"


실제 경로

  "/storage/emulated/0/Android/data/[패키지명]/files/ScreenShots/"




권한 요청하기


 ...
    </summary>
  

  </entry>

  
  <entry>
    <title>유니티 안드로이드 토스트 메시지 표시하기</title>
    <link href="https://rito15.github.io/posts/unity-android-toast-message/" rel="alternate" type="text/html" title="유니티 안드로이드 토스트 메시지 표시하기" />
    <published>2021-09-07T21:42:00+09:00</published>
  
    <updated>2021-09-08T05:34:08+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-android-toast-message/</id>
    <content src="https://rito15.github.io/posts/unity-android-toast-message/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Android Memo" />
    
  

  
    <summary>
      





      AndroidToast Singleton


Usage

AndroidToast.I.ShowToastMessage(string message, ToastLength length);




Option


  ToastLength.Short : 약 2.5초 동안 메시지 표시
  ToastLength.Long : 약 4초 동안 메시지 표시




Source Code


   
AndroidToast.cs


  using System.Collections;
using System.Collections.Generic;
using UnityEngine;

/// &amp;lt;summary&amp;gt; 안드로이드 토스트 메시지 표시 싱글톤 &amp;lt;/summary&amp;gt;
public class AndroidToast : ...
    </summary>
  

  </entry>

</feed>


