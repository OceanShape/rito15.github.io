

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://rito15.github.io/</id>
  <title>Rito15</title>
  <subtitle>Unity Csharp Developer</subtitle>
  <updated>2021-01-24T08:40:26+09:00</updated>
  <author>
    <name>Rito15</name>
    <uri>https://rito15.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://rito15.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://rito15.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator>
  <rights> © 2021 Rito15 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Fog of War</title>
    <link href="https://rito15.github.io/posts/fog-of-war/" rel="alternate" type="text/html" title="Fog of War" />
    <published>2021-01-19T23:15:00+09:00</published>
  
    <updated>2021-01-24T01:51:17+09:00</updated>
  
    <id>https://rito15.github.io/posts/fog-of-war/</id>
    <content src="https://rito15.github.io/posts/fog-of-war/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Study" />
    
  

  
    <summary>
      





      개념


  맵 전체에 걸쳐 RGBA(0, 0, 0, a)의 텍스쳐를 씌워 시야를 표현한다.
  지정한 유닛이 현재 위치한 영역들은 a = 0,
  지정한 유닛이 한 번이라도 위치했던 영역들은 a = 0.5~0.8,
  지정한 유닛이 한 번도 방문하지 않은 영역은 a = 1로 표현한다.




구현 방법

[1] 카메라와 지상 사이에 안개 플레인 사용


  
    시야의 역할을 해줄 검정색 플레인을 카메라와 지상 사이에 위치시킨다.
  
  
    맵 전체를 좌표 형태의 2차원배열로 관리하여, 유닛들이 현재 위치한 영역, 방문했던 영역, 한 번도 방문하지 않은 영역의 정보를 실시간으로 저장한다.
  
  
    카메라와 해당 유닛들 사이에서 시야를 적용할 안개 플레인의 로컬좌표를 구하고 정점 색...
    </summary>
  

  </entry>

  
  <entry>
    <title>Ray Marching</title>
    <link href="https://rito15.github.io/posts/ray-marching/" rel="alternate" type="text/html" title="Ray Marching" />
    <published>2021-01-19T23:15:00+09:00</published>
  
    <updated>2021-01-24T01:51:17+09:00</updated>
  
    <id>https://rito15.github.io/posts/ray-marching/</id>
    <content src="https://rito15.github.io/posts/ray-marching/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Study" />
    
  

  
    <summary>
      





      레이 마칭이란?



  
    폴리곤의 정점 정보를 이용하는 기존의 3D 렌더링 방식과는 달리, 레이를 전진시켜(Ray Marching) 표면의 정보를 얻어 오브젝트를 그려내는 기법
  
  
    레이 마칭의 모든 모델링들은 폴리곤이 아닌 거리 함수(SDF : Signed Distance Function)로 표면의 정보가 계산된다.
  







  한 점(RO : Ray Origin, 위의 그림에서 Camera)에서 스크린의 각각의 픽셀을 향한 방향(RD : Ray Direction, 위의 그림에서 Image)들을 향해
레이 캐스팅을 하여, 각 레이마다 여러 스텝(Step)으로 나누어 레이를 전진시키게 된다.




  


  
    한 번의 스텝마다 존재하는 모든 SDF를 각각 계산하...
    </summary>
  

  </entry>

  
  <entry>
    <title>Custom Attributes</title>
    <link href="https://rito15.github.io/posts/custom-attributes/" rel="alternate" type="text/html" title="Custom Attributes" />
    <published>2021-01-17T22:18:00+09:00</published>
  
    <updated>2021-01-24T01:35:32+09:00</updated>
  
    <id>https://rito15.github.io/posts/custom-attributes/</id>
    <content src="https://rito15.github.io/posts/custom-attributes/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Toys" />
    
  

  
    <summary>
      





      Download


  https://github.com/rito15/Unity_Custom_Attributes




MemoBox


  필드의 상단에 상자 및 메모를 표시합니다.



  
    
      매개변수
      설명
    
  
  
    
      Contents
      메모에 적을 내용을 기록합니다. 스트링을 콤마로 구분할 경우 각각 개행됩니다.
    
    
      FontSize
      글자 크기 (기본 : 12)
    
    
      LineSpacing
      줄 간격 (기본 : 2)
    
    
      TextColor
      글자 색상 (기본 : White)
    
    
      BoxColor
      상자 색상...
    </summary>
  

  </entry>

  
  <entry>
    <title>Behavior Tree</title>
    <link href="https://rito15.github.io/posts/behavior-tree/" rel="alternate" type="text/html" title="Behavior Tree" />
    <published>2021-01-05T00:26:00+09:00</published>
  
    <updated>2021-01-24T01:51:17+09:00</updated>
  
    <id>https://rito15.github.io/posts/behavior-tree/</id>
    <content src="https://rito15.github.io/posts/behavior-tree/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Study" />
    
  

  
    <summary>
      





      개념


  FSM (Finite State Machine)의 단점을 보완하기 위해 만들어진 기법
  FSM에서는 상태 전이 조건을 모두 각각의 상태에서 검사하지만, BT에서는 상태 동작 뿐만 아니라 전이 조건도 노드로 관리한다.
  노드 그래프를 통해 시각화하거나 params, 빌더 패턴 등을 활용하여 스크립트 내에서도 가독성 좋게 구성할 수 있다.
  기본적으로 Leaf, Decorator, Composite 노드를 기반으로 하며, 구현은 많이 다를 수 있다.
    
      Leaf : 동작을 수행하는 노드. 대표적으로 Action 또는 Task 노드가 있다.
      Decorator : 다른 노드에 조건을 붙여 수식하는 노드
      Composite : 자식 노드들을 가지며, 자식들을...
    </summary>
  

  </entry>

  
  <entry>
    <title>Getcomponent Attributes</title>
    <link href="https://rito15.github.io/posts/getcomponent-attributes/" rel="alternate" type="text/html" title="Getcomponent Attributes" />
    <published>2020-04-12T23:30:00+09:00</published>
  
    <updated>2021-01-24T01:51:17+09:00</updated>
  
    <id>https://rito15.github.io/posts/getcomponent-attributes/</id>
    <content src="https://rito15.github.io/posts/getcomponent-attributes/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Toys" />
    
  

  
    <summary>
      





      Note

  GetComponent(), Find() 종류의 메소드들을 필드/프로퍼티 애트리뷰트로 제공합니다.
  https://github.com/rito15/Unity_GetComponent-Attributes


Catalog
/* ******************************************************************************** *
 *                                    참고사항                                       *
 * ******************************************************************************** */

/* 공통 파라미...
    </summary>
  

  </entry>

</feed>


