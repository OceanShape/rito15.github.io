

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://rito15.github.io/</id>
  <title>Rito15</title>
  <subtitle>Unity Csharp Developer</subtitle>
  <updated>2021-07-06T03:50:27+09:00</updated>
  <author>
    <name>Rito15</name>
    <uri>https://rito15.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://rito15.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://rito15.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator>
  <rights> © 2021 Rito15 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>C# async Task</title>
    <link href="https://rito15.github.io/posts/cs-async-task/" rel="alternate" type="text/html" title="C# async Task" />
    <published>2021-07-06T03:34:00+09:00</published>
  
    <updated>2021-07-06T03:34:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/cs-async-task/</id>
    <content src="https://rito15.github.io/posts/cs-async-task/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="C#" />
    
    <category term="C# Threading" />
    
  

  
    <summary>
      





      비동기 작업 : async-await



  
    Task를 Thread처럼 사용하는 대신, 비동기 작업을 위해 사용할 수 있다.
  
  
    async, await 키워드를 이용해 이루어지는 비동기 작업은 기존의 멀티 스레딩과는 다른 방식으로 이루어진다.
  




특징


  
    메소드 내부에서 await로 대기하려면, 해당 메소드의 리턴 타입 앞에 async 키워드를 작성한다.
  
  
    await Task.Delay(n)와 같이 await를 이용한 대기는 해당 스레드를 블록시키지 않는다.
  
  
    비동기 작업을 기다리고, 끝날 경우 값을 리턴받을 수 있다.
  
  
    async-await로 실행 시킨 작업 역시 ThreadPool에 의해 관리된다.
  
...
    </summary>
  

  </entry>

  
  <entry>
    <title>C# Task</title>
    <link href="https://rito15.github.io/posts/cs-task/" rel="alternate" type="text/html" title="C# Task" />
    <published>2021-07-06T03:33:00+09:00</published>
  
    <updated>2021-07-06T03:33:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/cs-task/</id>
    <content src="https://rito15.github.io/posts/cs-task/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="C#" />
    
    <category term="C# Threading" />
    
  

  
    <summary>
      





      Task



  
    Task는 ThreadPool을 기반으로 작성된 라이브러리이다.
  
  
    내부적으로 ThreadPool의 스레드 개수를 차지하며, ThreadPool의 스레드 개수 제한에 영향을 받는다.
  
  
    가벼운 비동기 작업에 특화되어 있다.
  
  
    Thread.Abort()처럼 간단히 종료할 수 없다.
  
  
    작업이 완료된 Task 객체는 다시 수행될 수 없다.
  




1. 생성, 실행, 대기


[1] 개별 객체 정의


  
    스레드 바디로 사용될 메소드를 미리 정의한다.
  
  
    정의한 메소드 또는 람다식을 이용해 Task 객체를 만들고, 시작시킨다.
  
  
    이렇게 시작되는 Task는 새로운 스레드에서 실행된...
    </summary>
  

  </entry>

  
  <entry>
    <title>(Amplify) Shield Shader</title>
    <link href="https://rito15.github.io/posts/unity-amplify-shield-shader/" rel="alternate" type="text/html" title="(Amplify) Shield Shader" />
    <published>2021-07-05T03:33:00+09:00</published>
  
    <updated>2021-07-05T03:33:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-amplify-shield-shader/</id>
    <content src="https://rito15.github.io/posts/unity-amplify-shield-shader/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity Shader" />
    
    <category term="Amplify Shader" />
    
  

  
    <summary>
      





      Summary



  Sphere 메시에 사용하는 쉴드 쉐이더




Preview






Properties






Settings


Blend Mode

  Transparent




Nodes






Download



  2021_0704_Shield.zip



    </summary>
  

  </entry>

  
  <entry>
    <title>(Amplify) World Position Offset(Black Hole) Shaders</title>
    <link href="https://rito15.github.io/posts/unity-amplify-world-position-offset-shaders/" rel="alternate" type="text/html" title="(Amplify) World Position Offset(Black Hole) Shaders" />
    <published>2021-07-04T17:00:00+09:00</published>
  
    <updated>2021-07-04T22:00:26+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-amplify-world-position-offset-shaders/</id>
    <content src="https://rito15.github.io/posts/unity-amplify-world-position-offset-shaders/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity Shader" />
    
    <category term="Amplify Shader" />
    
  

  
    <summary>
      





      Summary



  특정 월드 좌표로 빨려 들어가는 효과




1. Simple Move



  현재 좌표로부터 타겟 위치까지 T(0 ~ 1) 값에 따라 선형 보간하여 단순 이동








2. Procedural Move



  
    현재 좌표로부터 타겟 위치까지 T(0 ~ 1) 값에 따라 선형 보간하여 빨려 들어가는 효과
  
  
    (버텍스 -&amp;gt; 타겟 위치) 방향 벡터와 노멀 벡터의 내적 결과값을 마스크로 사용한다.
  








3. Dramatic Move



  
    현재 좌표로부터 타겟 위치까지 T(0 ~ 1) 값에 따라 선형 보간하여 빨려 들어가는 효과
  
  
    (버텍스 -&amp;gt; 타겟 위치) 방향 벡터와 노멀 벡터의 내적 결과값을 마스크로 ...
    </summary>
  

  </entry>

  
  <entry>
    <title>(Amplify) Directional 2 Color Dissolve Shader</title>
    <link href="https://rito15.github.io/posts/unity-amplify-2-color-dissolve/" rel="alternate" type="text/html" title="(Amplify) Directional 2 Color Dissolve Shader" />
    <published>2021-07-03T18:00:00+09:00</published>
  
    <updated>2021-07-04T04:04:46+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-amplify-2-color-dissolve/</id>
    <content src="https://rito15.github.io/posts/unity-amplify-2-color-dissolve/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity Shader" />
    
    <category term="Amplify Shader" />
    
  

  
    <summary>
      





      Summary



  
    디졸브 방향을 직접 지정할 수 있는 디졸브 쉐이더
  
  
    디졸브 효과 색상 2가지를 지정할 수 있다.
  
  
    포스트 프로세싱 Bloom 효과가 반드시 필요하다.
    
      Preview 설정 : Intensity 3, Threshold 0.9
    
  




Preview






Properties






Settings


Blend Mode

  Transparent




Nodes






Note


쉐이더 프로퍼티 중, Min Offset, Max Offset은 각각 디졸브의 시작과 끝 지점을 조정한다.

메시 정보 또는 디졸브 방향이 다르면 이 값들은 모두 달라질 수 있다.

이를 직접 계산하려면 굉장히 번거로우므...
    </summary>
  

  </entry>

</feed>


