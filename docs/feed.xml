

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://rito15.github.io/</id>
  <title>Rito15</title>
  <subtitle>Unity Csharp Developer</subtitle>
  <updated>2021-03-21T00:45:01+09:00</updated>
  <author>
    <name>Rito15</name>
    <uri>https://rito15.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://rito15.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://rito15.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator>
  <rights> © 2021 Rito15 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>베지어 곡선(Bezier Curve)</title>
    <link href="https://rito15.github.io/posts/unity-study-bezier-curve/" rel="alternate" type="text/html" title="베지어 곡선(Bezier Curve)" />
    <published>2021-03-20T19:19:00+09:00</published>
  
    <updated>2021-03-20T19:19:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-study-bezier-curve/</id>
    <content src="https://rito15.github.io/posts/unity-study-bezier-curve/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Study" />
    
  

  
    <summary>
      





      베지어 곡선


  점과 점 사이의 선형 보간(Lerp, Linear interpolation)을 이용해 그려내는 곡선




1차 베지어 곡선



  
    Linear Curve
  
  
    2개의 점
  
  
    단순히 두 점 사이의 선형 보간을 통해, 직선을 그린다.
  






2차 베지어 곡선



  
    Quadratic Curve
  
  
    3개의 점 P0, P1, P2
  
  
    Lerp(P0, P1, t)를 통해 보간된 지점 P01을 구한다.
  
  
    Lerp(P1, P2, t)를 통해 보간된 지점 P02를 구한다.
  
  
    P01, P02 역시 동일하게 보간하여, P012 = Lerp(P01, P02, t)를 구한다.
  
  ...
    </summary>
  

  </entry>

  
  <entry>
    <title>트랜스폼과 방향벡터의 회전</title>
    <link href="https://rito15.github.io/posts/unity-memo-rotation/" rel="alternate" type="text/html" title="트랜스폼과 방향벡터의 회전" />
    <published>2021-03-19T17:08:00+09:00</published>
  
    <updated>2021-03-19T17:08:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-memo-rotation/</id>
    <content src="https://rito15.github.io/posts/unity-memo-rotation/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Memo" />
    
  

  
    <summary>
      





      Memo


유니티엔진에서의 회전


  각 축에 회전이 적용되는 순서는 Z축 -&amp;gt; X축 -&amp;gt; Y축




트랜스폼을 자신의 축으로 회전시킬 때

Local Rotation(Euler) X, Y, Z 값 중 회전시키려는 축을 제외하고 모두 0이라면

(예 : X축으로 회전시키려는데 (34f, 0f, 0f)인 상태)

해당 축의 오일러 값만 변경시키면 다른 축에 영향을 받지 않고 정상적으로 회전할 수 있다.



정확히는, 유니티엔진의 회전 순서에 따라

Z축 회전일 경우 X, Y 오일러 값에 상관 없이 회전이 가능하고

X축 회전일 경우 Z 값이 0이 아니면 영향을 받고,

Y축 회전일 경우 Z, X값이 0이 아니면 영향을 받는다.



회전시키려는 축 외의 다른 값이 0이 아닌 상태라면

...
    </summary>
  

  </entry>

  
  <entry>
    <title>파티클 시스템 예제 - 08 - Meteor Swarm [TODO]</title>
    <link href="https://rito15.github.io/posts/unity-particle-system-example-08-meteor-swarm/" rel="alternate" type="text/html" title="파티클 시스템 예제 - 08 - Meteor Swarm [TODO]" />
    <published>2021-03-16T17:10:00+09:00</published>
  
    <updated>2021-03-16T17:10:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-particle-system-example-08-meteor-swarm/</id>
    <content src="https://rito15.github.io/posts/unity-particle-system-example-08-meteor-swarm/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Particle System" />
    
  

  
    <summary>
      





      Preview





    </summary>
  

  </entry>

  
  <entry>
    <title>파티클 시스템 예제 - 07 - Fireworks</title>
    <link href="https://rito15.github.io/posts/unity-particle-system-example-07-fireworks/" rel="alternate" type="text/html" title="파티클 시스템 예제 - 07 - Fireworks" />
    <published>2021-03-16T17:10:00+09:00</published>
  
    <updated>2021-03-18T21:03:52+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-particle-system-example-07-fireworks/</id>
    <content src="https://rito15.github.io/posts/unity-particle-system-example-07-fireworks/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Particle System" />
    
  

  
    <summary>
      





      목차



  목표
  준비물
  1. Fireworks 이펙트
  2. SubEmitter - Birth
  3. SubEmitter - Death
  4. SubEmitter - Death Flash
  5. 완성


Preview






목표



  
    서브 이미터 모듈 이해하기
  
  
    불꽃놀이 이펙트 완성하기
  




준비물



  동그란 텍스쳐와 Additive 마테리얼






1. Fireworks 이펙트


불꽃을 하늘로 쏘아올리는, 간단한 형태의 이펙트를 우선 제작한다.



준비


  
    하이라키 - 우클릭 - [Effects] - [Particle System]을 통해 파티클 시스템 게임오브젝트를 생성한다.
  
  
    생성된 게임오브젝트를 ...
    </summary>
  

  </entry>

  
  <entry>
    <title>포스트 프로세싱 적용하기</title>
    <link href="https://rito15.github.io/posts/unity-memo-post-processing/" rel="alternate" type="text/html" title="포스트 프로세싱 적용하기" />
    <published>2021-03-16T17:00:00+09:00</published>
  
    <updated>2021-03-16T17:00:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-memo-post-processing/</id>
    <content src="https://rito15.github.io/posts/unity-memo-post-processing/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Memo" />
    
  

  
    <summary>
      





      1. Built-in Pipeline



  
    Package Manager - [Post Processing] 설치
  
  
    레이어 - [Post Processing] 추가
  




  메인 카메라
    
      컴포넌트 추가 : Post-process Layer
      Volume blending - Layer : [Post Processing] 설정
    
  




  빈 게임오브젝트 추가 : “Volume”
    
      레이어 설정 : [Post Processing]
      컴포넌트 추가 : Post-process Volume
        
          Is Global 체크
          Profile - [New]
          [A...
    </summary>
  

  </entry>

</feed>


