

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://rito15.github.io/</id>
  <title>Rito15</title>
  <subtitle>Unity Csharp Developer</subtitle>
  <updated>2021-02-01T03:11:34+09:00</updated>
  <author>
    <name>Rito15</name>
    <uri>https://rito15.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://rito15.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://rito15.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator>
  <rights> © 2021 Rito15 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Unity UI Memo</title>
    <link href="https://rito15.github.io/posts/unity-ui-memo/" rel="alternate" type="text/html" title="Unity UI Memo" />
    <published>2021-02-01T03:00:00+09:00</published>
  
    <updated>2021-02-01T03:00:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-ui-memo/</id>
    <content src="https://rito15.github.io/posts/unity-ui-memo/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Memo" />
    
  

  
    <summary>
      





      UI 드래그 앤 드롭으로 옮기기


  UI 헤더(윗부분)를 따로 구성했을 때, 헤더를 드래그 했을 때만 옮기기
  헤더 UI의 컴포넌트로 넣어주기


/// &amp;lt;summary&amp;gt; 헤더 드래그 앤 드롭에 의한 UI 이동 구현 &amp;lt;/summary&amp;gt;
public class PopupUIHeader : MonoBehaviour,
    IPointerDownHandler, IBeginDragHandler, IDragHandler
{
    private RectTransform _parentRect;

    private Vector2 _rectBegin;
    private Vector2 _moveBegin;
    private Vector2 _moveOffset;

    priva...
    </summary>
  

  </entry>

  
  <entry>
    <title>Popup UI Management System</title>
    <link href="https://rito15.github.io/posts/popup-ui-management-system/" rel="alternate" type="text/html" title="Popup UI Management System" />
    <published>2021-01-31T20:23:00+09:00</published>
  
    <updated>2021-01-31T20:23:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/popup-ui-management-system/</id>
    <content src="https://rito15.github.io/posts/popup-ui-management-system/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Study" />
    
  

  
    <summary>
      





      목표


  팝업 UI 관리 시스템 구현




게임의 UI


  온라인 PC게임을 예로 들었을 때, 다양한 형태의 UI들이 존재한다.
  화면 예시 : Smilegate RPG ‘LostARK’


1. 전체화면 UI

  크기가 화면 전체에 해당하는 UI
  예 : 상점, 캐시 샵




2. 고정형 UI

  고정된 위치에 항상 존재하는 UI
  예 : 하단 바, 퀵슬롯, 미니맵, 채팅창




3. 추적형 UI

  게임 내 요소들(캐릭터, 몬스터, 건물 등)의 위치를 실시간으로 추적하여 따라다니는 UI
  예 : 체력 바, 이름, 말풍선




4. 안내형 UI

  화면 한켠에 잠시 나타났다가 사라지는 형태의 UI
  게임의 진행사항, 공지사항 등을 안내하는 용도로 주로 사용된다.




...
    </summary>
  

  </entry>

  
  <entry>
    <title>OpenGL 공부 - 04</title>
    <link href="https://rito15.github.io/posts/opengl-study-04/" rel="alternate" type="text/html" title="OpenGL 공부 - 04" />
    <published>2021-01-31T13:31:00+09:00</published>
  
    <updated>2021-01-31T13:31:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/opengl-study-04/</id>
    <content src="https://rito15.github.io/posts/opengl-study-04/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="OpenGL" />
    
    <category term="OpenGL Study" />
    
  

  
    <summary>
      





      목표


  Vertex Attributes, Layout, VBO, VAO에 대한 이해




Attributes, VAO, VBO


  버텍스 버퍼에는 버텍스 좌표, 텍스쳐 좌표, 노멀 벡터 등 여러 데이터가 float 값으로 들어갈 수 있다.
  하지만 그 자체로는 그저 메모리에 올라가는 값일 뿐이기 때문에 각각의 데이터가 어떤 역할을 하고, 길이는 얼마나 갖고 있고, 시작 위치는 어디인지 OpenGL에 알려줘야 한다.




  
    VAO(Vertex Array Object)
    
      하나 이상의 VBO를 담을 수 있는 객체
      개별 오브젝트의 모든 데이터를 담고 있다.
      고유 ID를 가진다.
    
  


// 1. VAO ID 준비
GLuint vao;
...
    </summary>
  

  </entry>

  
  <entry>
    <title>Input Binding System</title>
    <link href="https://rito15.github.io/posts/input-binding-system/" rel="alternate" type="text/html" title="Input Binding System" />
    <published>2021-01-30T16:18:00+09:00</published>
  
    <updated>2021-01-31T17:18:09+09:00</updated>
  
    <id>https://rito15.github.io/posts/input-binding-system/</id>
    <content src="https://rito15.github.io/posts/input-binding-system/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Study" />
    
  

  
    <summary>
      





      목표


  에디터 및 인게임에서 언제든 기능에 연결된 사용자 마우스, 키보드 바인딩을 변경할 수 있는 기능 구현
  전체 입력 바인딩을 직렬화하여 저장하고 불러올 수 있는 기능 구현




유니티의 입력 시스템


  유니티에는 2가지 Input System이 있다.
  첫 번째는 Input.Get~ 꼴의 메소드를 이용해 이번 프레임에 해당 입력이 있었는지 검사하는 레거시 시스템
  
    두 번째는 2019년 소개된 New Input System.

  
  New Input System을 사용하려면
    
      패키지 매니저에서 Input System을 설치하고,
      프로젝트 세팅에서 Active Input Handling을 지정하고,
      InputAction 윈도우에서 A...
    </summary>
  

  </entry>

  
  <entry>
    <title>OpenGL 공부 - 03</title>
    <link href="https://rito15.github.io/posts/opengl-study-03/" rel="alternate" type="text/html" title="OpenGL 공부 - 03" />
    <published>2021-01-29T22:07:00+09:00</published>
  
    <updated>2021-01-31T17:18:09+09:00</updated>
  
    <id>https://rito15.github.io/posts/opengl-study-03/</id>
    <content src="https://rito15.github.io/posts/opengl-study-03/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="OpenGL" />
    
    <category term="OpenGL Study" />
    
  

  
    <summary>
      





      목표


  버텍스, 버텍스 버퍼에 대한 이해




렌더링 파이프라인 요약




  
    Vertex Shader
    
      입력 : 정점 목록
      정점들을 오브젝트 스페이스에서 MVP 변환을 통해 클립 스페이스까지 변환한다.
    
  
  
    Shape Assembly
    
      정점을 조립하여 렌더링을 할 수 있는 최소 단위(Primitive : 점, 선, 삼각형 등)로 만든다.
    
  
  
    Geometry Shader
    
      입력 : 프리미티브 목록
      프리미티브 당 한 번씩 수행한다.
      프리미티브를 없앨 수도, 더 만들 수도 있고 완전히 다른 프리미티브로 변환할 수도 있다.
    
  
  
    Raster...
    </summary>
  

  </entry>

</feed>


