

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://rito15.github.io/</id>
  <title>Rito15</title>
  <subtitle>Unity Csharp Developer</subtitle>
  <updated>2021-03-14T03:56:39+09:00</updated>
  <author>
    <name>Rito15</name>
    <uri>https://rito15.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://rito15.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://rito15.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator>
  <rights> © 2021 Rito15 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Custom Editor (커스텀 에디터)</title>
    <link href="https://rito15.github.io/posts/unity-editor-custom-editor/" rel="alternate" type="text/html" title="Custom Editor (커스텀 에디터)" />
    <published>2021-03-13T17:40:00+09:00</published>
  
    <updated>2021-03-13T17:40:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-editor-custom-editor/</id>
    <content src="https://rito15.github.io/posts/unity-editor-custom-editor/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Editor" />
    
  

  
    <summary>
      





      Begin



   
Custom Editor Example


  #if UNITY_EDITOR

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;

[CustomEditor(typeof(SomeScript))]
public class SomeScriptEditor : UnityEditor.Editor
{
    private SomeScript ss;

    private void OnEnable()
    {
        ss = target as SomeScript;
    }

    public override void OnInspecto...
    </summary>
  

  </entry>

  
  <entry>
    <title>Play Mode Saver (플레이 모드가 끝나도 변경사항 유지)</title>
    <link href="https://rito15.github.io/posts/unity-editor-plugin-play-mode-saver/" rel="alternate" type="text/html" title="Play Mode Saver (플레이 모드가 끝나도 변경사항 유지)" />
    <published>2021-03-13T17:20:00+09:00</published>
  
    <updated>2021-03-13T17:20:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-editor-plugin-play-mode-saver/</id>
    <content src="https://rito15.github.io/posts/unity-editor-plugin-play-mode-saver/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Editor Plugins" />
    
  

  
    <summary>
      





      Note


  
    등록한 컴포넌트의 플레이 모드 내 변경사항을 플레이 모드가 종료되어도 유지시킨다.
  
  
    변경사항을 적용할 대상 컴포넌트들은 Play Mode Saver 컴포넌트 내에 관리된다.
  
  
    유니티 에디터 내에서만 동작하며, 빌드 시 Play Mode Saver 컴포넌트는 자동으로 제거된다.
  
  
    플레이 모드 내에서 Play Mode Saver를 수정한 사항도 플레이 모드가 종료되었을 때 유지된다.
  




Preview






How To Use


  변경사항 유지를 원하는 컴포넌트에 우클릭 후, Save Play Mode Changes를 클릭한다.





  자동으로 Play Mode Saver 컴포넌트가 해당 게임오브젝트에 추가된다....
    </summary>
  

  </entry>

  
  <entry>
    <title>델리게이트가 특정 메소드를 갖고 있는지 확인하기</title>
    <link href="https://rito15.github.io/posts/memo-cs-delegate-has-method/" rel="alternate" type="text/html" title="델리게이트가 특정 메소드를 갖고 있는지 확인하기" />
    <published>2021-03-12T21:52:00+09:00</published>
  
    <updated>2021-03-12T21:52:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/memo-cs-delegate-has-method/</id>
    <content src="https://rito15.github.io/posts/memo-cs-delegate-has-method/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Memo" />
    
    <category term="Csharp Memo" />
    
  

  
    <summary>
      





      //using System;
//using System.Linq;

/// &amp;lt;summary&amp;gt; 델리게이트가 메소드를 갖고 있는지 검사 &amp;lt;/summary&amp;gt;
private static bool CheckDelegateHasMethod&amp;lt;DType&amp;gt;(DType @delegate, DType method) where DType : Delegate
{
    return @delegate?.GetInvocationList()
            .Where(d =&amp;gt; d.Method == method.Method)
            .Count() &amp;gt; 0;
}

private Action&amp;lt;int&amp;gt; del;
private void MethodA(int i) {...
    </summary>
  

  </entry>

  
  <entry>
    <title>Menu Item</title>
    <link href="https://rito15.github.io/posts/unity-editor-menu-item/" rel="alternate" type="text/html" title="Menu Item" />
    <published>2021-03-12T20:10:00+09:00</published>
  
    <updated>2021-03-12T20:10:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-editor-menu-item/</id>
    <content src="https://rito15.github.io/posts/unity-editor-menu-item/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Editor" />
    
  

  
    <summary>
      





      메뉴 아이템 기본

private const string MenuItemTitle = "Window/Rito/Menu Item";
private const int MenuItemPriority = 123;

[MenuItem(MenuItemTitle)]
private static void MenuItem1()
{
    // ..
}

[MenuItem(MenuItemTitle, false, MenuItemPriority)]
private static void MenuItem2()
{
    // ..
}




활성화/비활성화 설정

private const string MenuItemTitle = "Window/Rito/Menu Item";

[MenuItem(MenuItemTitle, false)...
    </summary>
  

  </entry>

  
  <entry>
    <title>Scripting Define Symbol 스크립트로 제어하기</title>
    <link href="https://rito15.github.io/posts/unity-editor-define-symbol/" rel="alternate" type="text/html" title="Scripting Define Symbol 스크립트로 제어하기" />
    <published>2021-03-12T18:28:00+09:00</published>
  
    <updated>2021-03-12T18:28:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-editor-define-symbol/</id>
    <content src="https://rito15.github.io/posts/unity-editor-define-symbol/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Editor" />
    
  

  
    <summary>
      





      Scripting Define Symbol?





  
    스크립트에서 #define으로 정의하듯, 프로젝트 전체에서 정의하여 사용할 수 있는 심볼
  
  
    Project Settings - Player - Other Settings - Scripting Define Symbols
  
  
    빌드 타겟마다 달라진다.
  
  
    유니티 에디터 스크립팅을 통해 확인, 추가, 제거할 수 있다.
  




Source Code


using System.Text.RegularExpressions;
using UnityEditor;

public static class DefineSymbolManager
{
    public struct DefineSymbolData
    {...
    </summary>
  

  </entry>

</feed>


