

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://rito15.github.io/</id>
  <title>Rito15</title>
  <subtitle>Unity Csharp Developer</subtitle>
  <updated>2021-03-02T17:49:28+09:00</updated>
  <author>
    <name>Rito15</name>
    <uri>https://rito15.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://rito15.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://rito15.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator>
  <rights> © 2021 Rito15 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Projectile Shooter</title>
    <link href="https://rito15.github.io/posts/unity-toy-projectile-shooter/" rel="alternate" type="text/html" title="Projectile Shooter" />
    <published>2021-03-02T03:28:00+09:00</published>
  
    <updated>2021-03-02T03:28:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-toy-projectile-shooter/</id>
    <content src="https://rito15.github.io/posts/unity-toy-projectile-shooter/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Toys" />
    
  

  
    <summary>
      





      Note


  
    마우스 클릭 시 등록된 게임오브젝트를 생성하여, 지정된 방향으로 발사하는 스크립트
  
  
    생성된 게임오브젝트는 카메라의 시선에 수직인 평면 방향으로 이동하며, 수명이 다하면 제거된다.
  
  
    오브젝트 풀링이 적용된다.
  




How To Use


  
    빈 게임오브젝트를 생성하고, ParticleShooter를 컴포넌트로 넣는다.
  
  
    발사할 대상 게임오브젝트를 Particle Prefab 필드에 넣는다.
  
  
    Direction으로 발사할 방향을 지정할 수 있다.
  
  
    Life Time으로 대상 게임오브젝트의 수명을 지정할 수 있다.
  
  
    Speed로 대상 게임오브젝트의 이동속도를 지정할 수 있...
    </summary>
  

  </entry>

  
  <entry>
    <title>Mouse Chaser</title>
    <link href="https://rito15.github.io/posts/unity-toy-mouse-chaser/" rel="alternate" type="text/html" title="Mouse Chaser" />
    <published>2021-03-02T03:14:00+09:00</published>
  
    <updated>2021-03-02T03:14:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-toy-mouse-chaser/</id>
    <content src="https://rito15.github.io/posts/unity-toy-mouse-chaser/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Toys" />
    
  

  
    <summary>
      





      Note


  게임오브젝트가 마우스 커서를 따라오게 하는 스크립트


How To Use


  
    마우스 커서를 따라오게 할 게임오브젝트에 컴포넌트로 넣는다.
  
  
    Distance From Camera를 통해 카메라로부터의 거리를 지정할 수 있다.
  
  
    Chasing Speed를 통해 마우스를 따라올 속도를 지정할 수 있다.
  


Preview






Source Code


  https://github.com/rito15/Unity_Toys



   
.


  using System.Collections;
using System.Collections.Generic;
using UnityEngine;

// 2021. 03. 02. 03:02
// 작성자 ...
    </summary>
  

  </entry>

  
  <entry>
    <title>파티클 시스템 예제 - 04 - Fire Ball</title>
    <link href="https://rito15.github.io/posts/unity-particle-system-example-04-fireball/" rel="alternate" type="text/html" title="파티클 시스템 예제 - 04 - Fire Ball" />
    <published>2021-03-02T03:03:00+09:00</published>
  
    <updated>2021-03-02T03:03:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-particle-system-example-04-fireball/</id>
    <content src="https://rito15.github.io/posts/unity-particle-system-example-04-fireball/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Particle System" />
    
  

  
    <summary>
      





      목차



  목표
  준비물
  1. 파티클 시스템 제작
  2. 서브 이미터 설정
  3. Projectile Shooter 적용
  4. 결과




Preview








목표



  
    Sub Emitters(서브 이미터) 모듈 이해하기
  
  
    파이어볼 이펙트 만들기
  




준비물



  글로우 모양의 동그란 텍스쳐와 Additive 마테리얼







  
    파이어볼을 발사할 수 있게 해줄 스크립트
  
  
    아래 소스코드를 다운로드하여 프로젝트 내에 넣어둔다.
  
  
    ProjectileShooter.zip
  



   
Source Code


  using System;
using System.Collections;
using S...
    </summary>
  

  </entry>

  
  <entry>
    <title>파티클 시스템 예제 - 03 - Firefly</title>
    <link href="https://rito15.github.io/posts/unity-particle-system-example-03-firefly/" rel="alternate" type="text/html" title="파티클 시스템 예제 - 03 - Firefly" />
    <published>2021-03-01T22:57:00+09:00</published>
  
    <updated>2021-03-01T22:57:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-particle-system-example-03-firefly/</id>
    <content src="https://rito15.github.io/posts/unity-particle-system-example-03-firefly/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Particle System" />
    
  

  
    <summary>
      





      Preview






목표



  
    Light 모듈, Collision 모듈 간단히 사용해보고 이해하기
  
  
    반딧불이 이펙트 만들기
  




Firefly Effect


마테리얼 준비


  
    Addtive
  
  
    작은 Glow 모양의 텍스쳐
  






씬 준비


  새로운 씬 생성 (Project 우클릭 - Create - Scene)




메인 카메라(Main Camera) 설정


  Clear Flags : Solid Color





  Background : 검정(RGBA 0, 0, 0, 0)으로 설정






파티클 시스템 생성


  
    하이라키 우클릭 - Effects - Particle System
  
  인스펙터 T...
    </summary>
  

  </entry>

  
  <entry>
    <title>파티클 시스템 예제 - 02 - Mouse Chaser</title>
    <link href="https://rito15.github.io/posts/unity-particle-system-example-02-mouse-chaser/" rel="alternate" type="text/html" title="파티클 시스템 예제 - 02 - Mouse Chaser" />
    <published>2021-03-01T21:07:00+09:00</published>
  
    <updated>2021-03-01T21:07:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-particle-system-example-02-mouse-chaser/</id>
    <content src="https://rito15.github.io/posts/unity-particle-system-example-02-mouse-chaser/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Particle System" />
    
  

  
    <summary>
      





      목차


  목표
  준비물
  1. 기본 준비
  2. Heart
  3. Twinkle




Preview


기본



Heart



Twinkle





목표



  실시간으로 마우스를 따라다니는 예쁜 이펙트 만들기




준비물



  
    원하는 모양의 파티클 텍스쳐 (예제에서는 Heart, Twinkle), Additive 마테리얼
  
  
    파티클이 마우스를 따라오게 만드는 스크립트
  
  
    아래 소스코드를 다운로드하여 프로젝트 내에 넣어둔다.
  
  
    MouseChaser.zip
  



   
Source Code


  using System.Collections;
using System.Collections.Generic;
using Unit...
    </summary>
  

  </entry>

</feed>


