

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>https://rito15.github.io/</id>
  <title>Rito15</title>
  <subtitle>Unity Csharp Developer</subtitle>
  <updated>2021-07-22T02:23:51+09:00</updated>
  <author>
    <name>Rito15</name>
    <uri>https://rito15.github.io/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="https://rito15.github.io/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="https://rito15.github.io/"/>
  <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator>
  <rights> © 2021 Rito15 </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Hash Table(해시 테이블)</title>
    <link href="https://rito15.github.io/posts/hash-table/" rel="alternate" type="text/html" title="Hash Table(해시 테이블)" />
    <published>2021-07-20T17:14:00+09:00</published>
  
    <updated>2021-07-20T17:14:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/hash-table/</id>
    <content src="https://rito15.github.io/posts/hash-table/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Algorithm" />
    
    <category term="Data Structure" />
    
  

  
    <summary>
      





      특징



  
    데이터의 삽입, 제거, 탐색이 모두 O(1)로 매우 빠르다.
  
  
    내부적으로 정렬되지는 않는다.
  
  
    저장할 데이터의 수보다 더 많은 공간이 필요하다.
  




구현 원리



  
    Key와 Value를 함께 저장하는 Pair 타입(클래스 또는 구조체)을 준비한다.
  
  
    Pair[] 타입의 Bucket을 생성한다.
  
  
    Key의 값을 해시 함수에 넣어서 배열의 Index를 계산한다.
  
  
    Bucket의 Index 위치에 Pair를 삽입, 삭제, 탐색한다.
  
  
    Key에 대한 해시 계산으로 인덱스를 얻을 수 있기 때문에 데이터 삽입, 삭제, 탐색의 시간복잡도는 모두 O(1)이 된다.
  
  
 ...
    </summary>
  

  </entry>

  
  <entry>
    <title>C# 구조체가 IEquatable&amp;lt;T&amp;gt;를 상속해야 하는 이유</title>
    <link href="https://rito15.github.io/posts/cs-why-should-inherit-iequatable/" rel="alternate" type="text/html" title="C# 구조체가 IEquatable&amp;lt;T&amp;gt;를 상속해야 하는 이유" />
    <published>2021-07-19T20:00:00+09:00</published>
  
    <updated>2021-07-21T20:16:41+09:00</updated>
  
    <id>https://rito15.github.io/posts/cs-why-should-inherit-iequatable/</id>
    <content src="https://rito15.github.io/posts/cs-why-should-inherit-iequatable/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="C#" />
    
    <category term="C# Memo" />
    
  

  
    <summary>
      





      System.Object.Equals(object)


C#의 모든 타입의 최상위 클래스인 Object에는 .Equals(object) 메소드가 존재한다.

그리고 이를 통해 다른 값과의 동일 비교를 수행할 수 있다.



구조체나 클래스를 직접 정의하고, 해당 객체로 .Equals(object)를 호출하면

object.Equals(object)가 호출된다.

우선, 이것이 핵심이다.



박싱

int a = 1;
object oa = a;


Value Type을 object 타입으로 캐스팅하면 박싱이 일어난다.

IL_0001:  ldc.i4.1
IL_0002:  stloc.0
IL_0003:  ldloc.0
IL_0004:  box        [mscorlib]System.Int32
IL_0...
    </summary>
  

  </entry>

  
  <entry>
    <title>Animator Event Controller(애니메이터 이벤트 관리 컴포넌트)</title>
    <link href="https://rito15.github.io/posts/unity-animator-event-controller/" rel="alternate" type="text/html" title="Animator Event Controller(애니메이터 이벤트 관리 컴포넌트)" />
    <published>2021-07-17T15:15:00+09:00</published>
  
    <updated>2021-07-17T21:34:35+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-animator-event-controller/</id>
    <content src="https://rito15.github.io/posts/unity-animator-event-controller/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Editor Utilities" />
    
  

  
    <summary>
      





      Summary


  
    애니메이터 내의 각 애니메이션에 대한 이벤트를 생성, 관리할 수 있는 컴포넌트
  
  
    애니메이션의 프레임마다 이벤트를 추가할 수 있습니다.
  
  
    플레이모드의 변경 사항은 플레이모드가 종료되어도 유지됩니다.
  
  
    테스트 버전 : 2018.3.14f1, 2019.4.9f1, 2020.3.14f1
  




Usage Example



  
    캐릭터가 칼을 휘두르는 순간에 검기 이펙트 생성하기
  
  
    캐릭터가 걸을 때, 발이 땅에 닿는 순간마다 발소리 재생하기
  




Preview










0. Download &amp;amp; Import


  
    Animator Event Controller.unitypa...
    </summary>
  

  </entry>

  
  <entry>
    <title>파티클 시스템 예제 - 12 - Sword Aura</title>
    <link href="https://rito15.github.io/posts/unity-particle-system-example-12-sword-aura/" rel="alternate" type="text/html" title="파티클 시스템 예제 - 12 - Sword Aura" />
    <published>2021-07-11T14:55:00+09:00</published>
  
    <updated>2021-07-11T14:55:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/unity-particle-system-example-12-sword-aura/</id>
    <content src="https://rito15.github.io/posts/unity-particle-system-example-12-sword-aura/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="Unity" />
    
    <category term="Unity Particle System" />
    
  

  
    <summary>
      





      목차



  목표
  준비물
  1. 작업 환경 구성
  2. 하이라키 구성
  3. Aura 이펙트
  4. Smoke 이펙트
  5. Spark 이펙트
  6. Glow 이펙트




Preview










목표



  검 모델링에 부착하여 사용할 수 있는, 타오르는 듯한 이펙트 만들기




준비물


검 모델링

  https://assetstore.unity.com/packages/3d/props/weapons/free-low-poly-swords-189978


Additive 마테리얼들과 텍스쳐

  SwordAura, SwordSmoke, PointGlow
  SwordAura_Resources.zip




1. 작업 환경 구성


이펙트를 제작하기 위해 게임 뷰에는 스카이...
    </summary>
  

  </entry>

  
  <entry>
    <title>C# TLS(Thread Local Storage)</title>
    <link href="https://rito15.github.io/posts/08-cs-thread-local-storage/" rel="alternate" type="text/html" title="C# TLS(Thread Local Storage)" />
    <published>2021-07-08T01:08:00+09:00</published>
  
    <updated>2021-07-08T01:08:00+09:00</updated>
  
    <id>https://rito15.github.io/posts/08-cs-thread-local-storage/</id>
    <content src="https://rito15.github.io/posts/08-cs-thread-local-storage/" />
    <author>
      <name>Rito15</name>
    </author>

  
    
    <category term="C#" />
    
    <category term="C# Threading" />
    
  

  
    <summary>
      





      

메모리 구조






TLS(Thread Local Storage)


Data 영역의 전역 변수, Heap 영역의 객체는 모든 스레드가 공유한다.

그리고 Stack 영역의 지역 변수(또는 멤버 변수)는 해당 블록 내에서만 사용된다.

따라서 기본적으로 각각의 스레드마다 고유하게 갖는 메모리 영역은 없다.

이를 만들어 줄 수 있는 것이 바로 TLS이다.



TLS는 각각의 스레드마다 자기만의 변수를 저장할 수 있게 해준다.

따라서 이를 활용하여, 공유 변수로 인해 빈번한 스레드 동기화가 일어날 수 있는 경우

임시로 TLS에 저장하고 나중에 공유 변수에 동기화하는 방식으로

스레드 동기화에 의한 성능 저하를 줄여줄 수 있다.



ThreadLocal&amp;lt;T&amp;gt;



  C#의 Thr...
    </summary>
  

  </entry>

</feed>


