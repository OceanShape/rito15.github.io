참조:
https://www.youtube.com/watch?v=FXDjmsiv8fI
https://www.youtube.com/watch?v=GaKjTjwcKQo




--------------------------------------------------------------
--------------------------------------------------------------
  사용자 설정
--------------------------------------------------------------
--------------------------------------------------------------


# Note
---

- 사용자 정보 적용 우선순위
  - `Local` > `Global` > `System`

- 로컬 설정으로 리포지토리마다 다른 깃헙 계정을 등록하여 사용할 수 있다.
  - 실제로 커밋 기록에 영향을 미치는건 `user.email`이다.

<br>

# 사용자 정보 확인하기
---

```
# 글로벌 정보 확인
git config --get --global user.name
git config --get --global user.email

# 로컬 리포지토리 정보 확인
git config --get --local user.name
git config --get --local user.email
```


<br>

# 사용자 정보 설정하기
---

```
# 글로벌 설정 적용하기
git config --global --global user.name [깃헙ID]
git config --global --global user.email [깃헙ID에 연결된 메일주소]

# 로컬 리포지토리 설정 적용하기
git config --local --global user.name [깃헙ID]
git config --local --global user.email [깃헙ID에 연결된 메일주소]
```

<br>


# References
---
- <https://tekiter.tistory.com/7>
- <https://coding-groot.tistory.com/97>



--------------------------------------------------------------
--------------------------------------------------------------
 리포지토리 만들기
--------------------------------------------------------------
--------------------------------------------------------------

- init: 새로 만들고 원격에 연결하기
- clone: 이미 만들어진 원격 리포지토리를 로컬에 복제하기


--------------------------------------------------------------
--------------------------------------------------------------
 리포지토리 초기 설정하기
--------------------------------------------------------------
--------------------------------------------------------------

- git remote add origin [https:// ~ .git]
  - 원격 저장소 이름을 origin으로 설정하고 특정 URL에 연결하기




--------------------------------------------------------------

4. 상태 확인하기

- git remote : 원격 저장소 이름 확인
- git remote -v : 

- git branch : ?
- git branch -a : ?
- git branch -r : ?

- status: 변경된 파일 상태 확인
- diff 파일명: 파일의 변경 내용 확인
- log: 커밋 히스토리 확인
- fetch: 원격 리포지토리의 상태 확인



--------------------------------------------------------------

5. 커밋하기


- git add
- git add .
- git push 로컬


--------------------------------------------------------------
5. 되돌리기

- git log로 커밋들 확인

- git reset 커밋번호 : 해당 커밋 상태로 로컬 상태를 되돌리기(파일들은 변경 상태로 status에 남음)

- git reset 커밋번호 --hard : 해당 커밋 상태로 되돌리며, 파일들은

- git push --force : 충돌 같은 것 무시하고 무대뽀로 원격 저장소에 올린다.
  - get reset ~ --hard 이후 연계하면 지난 커밋들을 아예 기록 말소할 수 있다.

--------------------------------------------------------------




6. 브랜치 설정, 원격 브랜치 생성, 삭제




7. 충돌