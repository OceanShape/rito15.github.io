


# Task?
---

- Task는 ThreadPool을 기반으로 작성된 라이브러리이다.

- 내부적으로 ThreadPool의 스레드 개수를 차지하며, ThreadPool의 스레드 개수 제한에 영향을 받는다.

<br>

# 생성 및 실행
---

## **[1] 개별 객체 정의**

- 스레드 바디로 사용될 메소드를 미리 정의한다.

- 정의한 메소드 또는 람다식을 이용해 `Task` 객체를 만들고, 시작시킨다.

- 이렇게 시작되는 Task는 새로운 스레드에서 실행된다.

```cs
private void TaskBody()
{
    // Some Codes..
}

private void MainMethod()
{
    Task t1 = new Task(TaskBody);                // 미리 정의한 메소드 사용
    Task t2 = new Task(() => { /* Codes.. */ }); // 람다식 사용

    // 각 Task 객체를 새로운 스레드에서 실행
    t1.Start();
    t2.Start();

    // Task들의 종료 대기
    t1.Wait();
    t2.Wait();

    // 또는
    // Task.WaitAll(t1, t2);
}
```

<br>

## **[2] 즉시 실행**

- `Task.Run()` 메소드를 통해 실행하고, 리턴되는 `Task` 객체를 받아올 수 있다.

```cs
private void MainMethod()
{
    Task t = Task.Run(TaskBody);
    t.Wait();
}
```

<br>



# API 정리
---

생성

.Start()

.Wait()

.RunSynchronously()

.ContinueWith()

.


<br>

