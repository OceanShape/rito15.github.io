Infearn Rookies - 게임 프로그래머 취업 가이드 메모

# 신규 채용 종류
 [1] 신규팀
   - 프로토타이핑이 끝난 게임을 본격적으로 개발 시작하는 단계에서 TO 확보하고 채용
   
 [2] 라이브팀
   - 개발 및 출시가 끝난 게임을 유지보수하기 위해 신규 인원 채용
   

# 신입 주요 업무
 - UI 반복 작업
 - 실력 향상에 도움 안될 반복 작업들이 주로 많음
 - 근데 시니어 되면 주요 업무들을 해야 하니, 알아서 실력 올려야 함
 

# 신입으로서 어필해야 할 것들
 - 사회성 : 사람들과 잘 어울릴 수 있다. 그런 면에서 이러이러한거 해봤다
 - 지루한것도 잘 견딘다(굳이 어필하지는 않더라도 지루한거 못견딘다 하면 에러)


# 채용 프로세스
 - NOTE : 면접관들도 어쨌든 바쁜 일반 팀원들일 가능성 높으니,
   그걸 감안하고, 같이 일할 사람 입장에서 어필할 것
  
 - NOTE : 바쁜 와중에 짬내서 하는 사람들이다.
   같이 일하고 싶다는 생각이 들게끔 눈에 띄게 어필하는 것이 좋다.

 [1] 서류 단계
   - 스펙
   - 자소서
   - 포트폴리오
  => 여기서 대부분 대충 훑어보고 걸러야 하기 때문에
     강렬하게 어필하는 것이 좋다.
  => 자소서건 포트폴리오건 몇백페이지 써봐야 안볼 가능성 높다.
     진짜 제대로 어필할 수 있게 포인트 잡아서 ㄱㄱ
  => 게임 소개할 때는 다이어그램 이쁘게 활용해서 구조 요약해주는게 차라리 나을듯
  => 단계별 설명 괜찮을듯?
     - 1phase : 대부분 다이어그램 활용한 설계 보여주기
     - 2phase : 주요 구조와 기법들 소개(타당한 설계와 디자인 패턴 등)
     - 3phase : 구체적인 주요 코드들 소개
   
 [2] 기술 면접
   - 과제 / 코딩
   - 필기 시험
   - 기술 면접
   
 [3] 인사팀 면접
   - 인성 면접
   - 처우 협의
  => 여기는 대부분 통과


# 스펙
 - 웬만하면 4년제 컴공이 조금이라도 더 이득이다
 - 영어를 요구하지는 않지만, 꾸준히 공부하는 것이 좋다.


# 자소서
 - 읽는 사람 입장에서 같이 일하고 싶다 생각할 수 있도록 작성
 - 맞춤법 잘 지켜 쓰기
 - 잘 읽히는 글 쓰기(빠르게 읽는다는 점 감안)
 - 마이너스가 될 부정적인 얘기는 알아서 빼기
 - 부정적인 얘기를 주구장창 쓸 필요 없다. 잘 포장해라.
 - 문제가 있었으면 그걸 극복한 얘기를 쓰기
 - 자잘하고 구체적인 것들보다는 큰 관점에서 나를 소개하기
 - 무난무난하고 근면성실한 사람이라는 것을 어필
 
 - 어떤 삶을 살아왔는지
 - 게임 코딩을 어쩌다 시작했는지
 - 코딩을 얼마나 진지하게 생각하는지 어필!!!!
 - 블로그 정리 얼마나 꾸준히 했는지 어필
 - 증거도 첨부해주면 좋음
 - 앞으로의 포부
 - 서론 - 본론 - 결론 구성
 
 - 서론 : 어릴때부터 뭐 했고 어땠고 나에대한 소개
 - 본론 : 이러이러한 노력, 본격적인 내 장점 소개
 - 결론 : 입사해서 잘 하겠다. 포부

 - 시작은 별로 안좋거나 평범했더라도 이제 진지하게 하겠다 잘 포장

# 포트폴리오
 - 실력과 근성을 증명할 수 있는 공정하고도 중요한 평가 요소
 - 차라리 알고리즘보다 포폴 퀄리티에 신경을 써라
 - 서류 중에는 포폴이 제일 중요
 - 상용 엔진 포폴의 경우에는 아무래도 퀄리티가 좀더 높아야 유리

 - 아트 퀄리티, 스테이지 개수, 컨텐츠 개수 같은거 늘리지 말고
 - 프로그래머로서 보여줄 수 있는 기술적 난이도가 아주 중요함
 - 근데 아트 퀄리티 최대한 높여주는게 눈이 호강할듯
 
 - 게임 영상을 유튜브에 올리고 회사에 링크 제출
 - 작업 스타일 보고싶어서 소스코드 일부 발췌해서 보내달라고도 함(채용 정보 참조)
 - 영상에 자막 넣고 기술 소개서 따로 PPT로 만들고 그래봐야 면접관들이 잘 안봄
 - 너무 뻔한 최적화, 기술 등등 굳이 어필할 필요 없음
 - 개발하면서 고민했던 부분들, 연구한 부분들 어필
 
 - 온라인 게임이 오프라인 게임보다 훨씬 난이도 높고, 평가도 좋음
 
# 포트폴리오 소개서
 - 링크나 PDF 파일로 제출
 - 장황하게 일일이 소스코드 이것저것 따서 길게 제출해봐야 안봄
 - 중요한 설계, 아주 중요한 핵심 알고리즘 등등 간추려서 정리
 - 면접 질문 받을 때 불리하다 싶은건 다 빼버리기(핵심)
 - 일단 포폴 소개서에 적은건 빠삭하게 이해하고 있어야 함(매우 중요)

# 과제, 필기 시험
 - 서류 이후 면접 이전에 과제를 내주거나 필기 시험을 보기도 함
 - 필기 시험은 신입이 다 답하기 힘들 정도의 문제들을 내줌
 

# 기술 면접
 - 면접은 같이 일하고 싶은 사람인지를 확인하는 것
 - 실력, 인성, 지원 동기, 느낌 등
 - 서류 단계에서 제출한 자소서, 포폴 내용들이 면접 과정들에서 질문으로 들어올 수 있음
 
 - 기술 면접은 1시간 정도 진행
 - 전반부 20분 정도는 서류 기반으로 질문
 - 이후는 과제, 코딩 시험, 필기 시험에서 개선할 점들 얘기,
 - 진짜로 기술 면접도 진행 - 진짜 모르면 안되겠다 싶은 것을
 
 - C++ 또는 C# 언어의 문법적인 질문들
 
 - 자료구조/알고리즘
   - vector vs list
   - Binary Search Tree
   - Red Black Tree
   - 우선순위 큐
   - 이진 탐색 - 시간 복잡도와 그 이유
   - 유니티 면접 후기들 찾아보는게 나을듯
 
 - 운영체제
   - 가상 메모리
   - Page Fault
   - Paging
   - Context Switching
   
 - 멀티스레드
   - 프로세스와 스레드 차이
   - 스레드를 너무 많이 만들면 안될까?
   - 데드락? 그리고 해결 방법
   - 스핀락?
   - Lock-Free, Non-Blocking 알고리즘 : 기본적으로 스핀락과 같은 busy-wating 방식, 그러나 좀 다름
   - Lock-Free Queue? => 사용자 입장에서 lock을 안쓴다는듯. Concurrent Queue
   - (멀티스레드) ABA? => 스레드1이 두 번의 읽기를 수행하는데 그 사이에 다른 스레드가 값을 
   - Atomic 메모리 모델
   
 - 그래픽스
   - 렌더링 파이프라인
   - DirectX vs OpenGL
   - 그림자는 어떻게 만드나?
   - Diffuse vs Ambient vs Specular
   - Tangent Space
   - Double Buffering
   
 - 수학/퀴즈
   - 내적과 외적 계산
   - 삼각함수 계산
   - 동력학, 물리 속도 계산
   - 1~6이 나오는 주사위를 굴려서 1~18의 결과를 얻도록 하려면?
     - 주사위를 두 번 굴린다.
     - 첫 번째 주사위에서는 영역을 결정한다: 1,2 => 1~6 / 3,4 => 7~12 / 5,6 => 13~18
     - 두 번째 주사위에서는 영역에 대한 인덱스를 결정한다.
     - 예시 : 두 번 굴려 3, 5가 나온 경우 -> 7~12 범위의 5번째 숫자이므로 11
 
 - 데이터베이스 (서버쪽 취업할 경우)
   - Union vs Union All
   - Clustered vs Non-Clustered Index (중요)
   - Join
   - NoSQL
   
 - 네트워크/보안 (서버쪽 취업할 경우)
   - TCP vs UDP
   - IOCP
   - 동기 vs 비동기 함수
   - 대칭키 vs 비대칭키
 
 
★ 꾸준히 잘 운영된 블로그는 하나의 스펙이 될 수 있다.
 - 서류 제출할 때 블로그 링크 첨부하고 어필하기
 
 
 
★ 내 장점
 - 창업 동아리를 통해 애자일 모델을 경험해보고, 여러 직군의 팀원들과 협업도 해봄
 - 개인 개발을 하더라도 언제나 기록하고 메모하는 습관이 있음