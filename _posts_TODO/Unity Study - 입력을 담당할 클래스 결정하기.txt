
# 입력 처리
---

게임 플레이를 위해, 입력은 정말 많은 경우에 사용된다.

입력에 따른 동작 과정을 간단히 요약해보면 다음과 같다.

- 입력 값을 전달 받는다.
- 전달 받은 입력 값을 실제로 사용할 값으로 가공한다.
- 가공된 값을 동작에 사용한다.

<br>

구체적인 예시를 들면 다음과 같다.

- `Input.GetKeyDown(KeyCode.W)`를 통해 `W` 키보드 입력 여부를 전달받는다.
- 입력 값이 true일 경우 이동속도를 1, false일 경우 0으로 초기화한다.
- 이동속도 값을 이용해 캐릭터를 이동시킨다.

<br>

위와 같이 키보드 입력에 의한 이동을 구현한다고 하면

일반적으로 이동 구현 클래스 내에서 입력도 받고, 가공해서, 동작을 처리한다.

하지만 이런 경우도 생각해볼 수 있다.

- 모든 입력을 일괄적으로 허용/비허용 하는 경우
- 같은 키의 입력이라도 특정 조건에 따라 다른 동작을 수행하는 경우

개별 컴포넌트에서 입력을 받고 처리하게 되면

위의 경우에는 관리 클래스에 `IsBlocked`나 `CurrentMode`와 같은 변수들을 만들고, 각각의 컴포넌트에서 이를 참조하는 조건식을 작성해야 한다.

그리고 이런 컴포넌트가 열 개면 열 번, 스무 개면 스무 번 각각 작성해야 하며

관리 클래스에 변경사항이 생겼을 경우 모든 컴포넌트에서 이를 각각 수정해야 한다.

<br>

하지만 하나의 입력 관리 컴포넌트에서 입력을 모두 받아 가공한 뒤

각각의 컴포넌트는 기능만을 구현하고 가공된 값을 전달받아 처리하도록 하면

위의 단점을 보완할 수 있다.

<br>

따라서 입력에 대한 책임의 구분에 따라 각각의 장점과 단점을 알아본다.

그리고 간단한 예제 컴포넌트 클래스들을 각각 작성한다.

- `InputManager` : 입력 일괄 관리
- `Mover` : 이동 기능 컴포넌트
- `Rotator` : 회전 기능 컴포넌트

<br>

# 1. 개별 컴포넌트에서 입력을 모두 담당하는 경우
---

![image](https://user-images.githubusercontent.com/42164422/121939130-9c361080-cd87-11eb-99b6-b08a8529181c.png)

<br>

## **책임**
### **InputManager**
 - 입력 허용 여부, 입력 모드 관리

## **개별 컴포넌트**
 - 사용자 입력 값 수용 및 가공
 - 기능 구현

<br>

## **장점**
 - 하나의 기능을 하나의 스크립트에서 빠르게 작성할 수 있다.
 - 완성된 컴포넌트로서 즉시 재사용할 수 있다.
 - 입력의 중앙 관리가 필요하지 않아 `InputManager`가 존재하지 않는 경우, 최선의 케이스

## **단점**
 - 입력의 중앙 제어가 용이하지 않다.
 - 각각의 컴포넌트에 조건 검사 코드를 모두 각각 작성해야 한다. 
 - 입력 처리가 분산되어 규모에 비례해 관리에 어려움이 따를 수 있다.
 - 입력에 대한 변경이 생길 경우, 이에 따른 수정 비용이 커질 수 있다.


 C O D E


<br>

# 2. 입력 매니저에서 입력값을 받아 관리만 하는 경우
---

![image](https://user-images.githubusercontent.com/42164422/121939527-149cd180-cd88-11eb-8a00-d146efabecdb.png)

<br>

## **책임**
### **InputManager**
 - 입력 허용 여부, 입력 모드 관리
 - 사용자 입력 값 수용 및 가공

## **개별 컴포넌트**
 - `InputManager`로부터 가공된 값 참조
 - 기능 구현

<br>

## **장점**
 - 참조를 최소한으로 줄일 수 있다.

## **단점**
 - 매 프레임마다 각 컴포넌트에서 `InputManager`의 입력값을 확인해야 한다.
 - 각 컴포넌트마다 `InputManager` 참조 코드를 각각 작성해야 하기 때문에 코드 변경의 영향을 많이 받는다.


 C O D E


<br>

# 3. 입력 매니저에서 입력값을 받아 관리, 개별 컴포넌트들에 명령
---

![image](https://user-images.githubusercontent.com/42164422/121938739-27fb6d00-cd87-11eb-88c4-5f2a129a2bcb.png)

<br>

## **책임**
### **InputManager**
 - 입력 허용 여부, 입력 모드 관리
 - 사용자 입력 값 수용 및 가공
 - 입력을 사용하는 모든 컴포넌트 참조 및 명령

## **개별 컴포넌트**
 - 기능 구현

<br>

## **장점**
 - 각각의 컴포넌트를 입력으로부터 완전히 독립시킬 수 있다.
 - 입력을 완전히 중앙화하여 관리할 수 있다.
 - 

## **단점**
  - `InputManager`가 모든 컴포넌트의 참조를 알아야 한다.


 C O D E

